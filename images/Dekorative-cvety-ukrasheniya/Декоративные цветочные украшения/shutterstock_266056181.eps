%!PS-Adobe-3.1 EPSF-3.0
%%Title: Page decoration III [Converted].eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: pingwin pingwin
%%CreationDate: 4/2/2015
%%BoundingBox: 0 0 516 564
%%HiResBoundingBox: 0 0 515.8765 563.5157
%%CropBox: 0 0 515.8765 563.5157
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page decoration III [Converted].eps) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2015-04-02T02:37:57Z</xap:CreateDate>
  <xap:ModifyDate>2015-04-02T02:37:57Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>236</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADsAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FWOfmB50tvJvle61uW0nv5o6R2dhbIzyzzuDwjHFW4jarMRsPuxVgfkvzB+fXnbQbi9urOw8j8pR&#xA;+j2ubWa4uZIuLhucEskfAAlSrMBWh+GmKpq3lX87dLtxd2Xnm38w3sK1bTNT0y2tbacj9lZbPhLC&#xA;SOhPIV64qwb88vzQsNS/I68vhaSaf5ij1KDS5bOVuNzpupxH1pCsi0P9zG3puh+JWr4jFXrf5Xah&#xA;repflz5bv9cLNq11p9vLdu4ozs6Ah2FBRmFGPvirKMVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirEBrNr5q1vzX5KuYbuw/Qv1HneW1xJA88F9D6yvHLF6ckdH&#xA;jkjYBv2eu9MVYDJ5V8z/AJSa9Za1pGt32sfl/eXMVrr2j6lKbiSxFzII0vIJDvwR3HMUrx68uqqo&#xA;vzp+WujeZ/zisrW/VW0q4tbfXNVsTQrc3GlNNaQcx4Mt8oev2lTj8lXsQAAoNgOgxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVK7HzPoN9rV/odteI2saZwN7YNVJkSRQ&#xA;ySBWA5IwYfGtVrtWu2Kofzd518teUdNXUNevBbRSuIbWFVaSeeZvsxQQoGeRz4KPntiryvzH/wA5&#xA;UaFp9pqkVn5b1hNb05Y2NlqlutioSVgizS/HLKkQLCrGMdhtUYqxb/oYn84ofOekeWNS0HRdNl11&#xA;4l0y+ke4uLWVLg8YnjntpJVkVmIWq9+tMVeu/l5oXmzST5g8y+fLnTxrWqSRtM1gZBaW9hZRkQpy&#xA;mCtRTJK5J/m6+CrzX8vPzVl/MKy/Mjym00moabBHcjy5fyKBcPb3bPBBE1aFmVynpM3xGvxGuKs+&#xA;HmvRbLVvNX5hatciDy5pEEejWNz1EptZHe7eIftl7mUQLTq0f04qgPyM1nzP5zfWvzC1xHtbHVpF&#xA;tPLOmMTxg0+3LVcDu00h+N/2im1F44q9Qur+xtDCLq4itzcyrBbiV1T1JXBKxpyI5OQpoo3xVXxV&#xA;KPMPnDyp5bSJ9f1iz0pZjSH65PHCXp14ByC1O9MVR2nanpup2cd7pt3De2UwrFc20iyxOOlVdCyn&#xA;6DiqC8x+bPLvlu2iuNavktFnf07aKjSTTSfyQwxh5ZW/yUUnFUlX80/Lsa+rqFnq2lWm3+m3+l3t&#xA;vbgEVrJK0XGIeJl4gYqyy2ura7t4rm1lSe2mUPDPEwdHRhUMrLUEEdxiqpirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirCvO/5gXelapZ+WPLdgus+cdRjM9vYu/pQW1sp4td3koB4RK2wA+JzsuKoOHyh+&#xA;btwq3F/+YC2dy3xNaadpVp9VQ/yBrr15nHvyU4qwzz3ovnLRdW03zZrhtbm+0T4bPzlp0b2pSIt8&#xA;VrrFmWmBtJuRQzRMfSrz4gVxVj+ueXte/Nn8xJ7u78rw6n5Ignh0oX1xdyW13Ywtax3E01tEk0cZ&#xA;f1Jqsxjk5fCvRScVZl5k/J78tfLnkm2hn1JNPv8AT7K70XR/Met3Bb011JZkaKUcoIHWlw/EFfh6&#xA;jpiqJ/J+5sD5o8yaNotzHqvlrR4tOEOoQhDbjU3gZb4W7IWT95wSSRU2DsxO7bqq/wDzkhqGor+W&#xA;l1oelUOq+YZU0+GrrGqwk+rcySyOVSOIQxsruxCjlviryD8u/Len+WtAbRdDurrVJ7+VLjzDq2kW&#xA;8k1zc+iD6NnpcdKrGrFj9cnCR8viRiwHFVX86+W/M+sa55R0nzdp0Gk6LczG18nfl5b3ixRN9VRS&#xA;8upXqh1Wiuq0iDyNy4qAxJKrKPMv57+e/wAu/NEXlfWPJdpdafbWIvIzoMszJHYpVPUVXiAVIfTK&#xA;sGVQPGlMVS/80fNHmn81PKunWnlny6LN7Ro/Mls2oX1ot3NFaoSv1W1t5ZJiW9YVc8afZ6nZV7T+&#xA;V0E0X5f6I095dX011b/XJLi+Vo7it2zXHBkYsUEfq8FWpooAqcVYPrv/ADj5p/mn83dR83+bZk1f&#xA;y9NZxQabo7PPG0EsaRoalCoMdVkegb7T9MVSjTvLuk/lt5z0jWvIV8ZfI2v6p/h/zBoazPcQ21/I&#xA;5ghmhLFipWdRHJyNRXwPwqs1/LS2h13Vte87X3+kahLqV5pelmQA/VLCwma2WKGv2DK8bSyEfaJF&#xA;emKs8W+sZJbiBbiJ5rXj9biDqWiDryX1FrVeS7ivbFWK2OnweVPNVvaaePS8v+Y2mEdkv91balHG&#xA;1wTAvRI7iGOV3UbB0qBV2xVdP+bXkG2029v73VY7RNOvZNLvLeUE3C3sTcWgSFObyseq+mGqNxir&#xA;JbHUra8WiH07hUjkntJConhEo5IJYwSUJA74qisVdirsVdirsVdirsVdirsVdirsVeWflJ6d758/&#xA;MzVbs8tYXWl0+jfaSxtYFFsFr9lX5MduvXFXompa9o+l3Fhb6hdJbS6pP9UsFkqBLOUZxGp6ciqG&#xA;levQb4qjZoYponhmRZIpFKSRuAysrChVgdiCMVeZ/lBo2o+WdW87aBdTw/ofT9Ril0hQGDx2k1sr&#xA;RiR2+0sUKxwj/jGfniqVeefzr8jasLnyroWgyfmNdvRbmxs4PrOnoeXwtNPwlWincNGj08QcVeZe&#xA;ZfzB/MHynY2tlrdjc+Q9BkYrb6boVlBaQUJr8OocdRPMgkkCFG78cVZVa/lLZa/Z2Ou3/ly583w3&#xA;MSz2l9deabuWVopkDK6VhtFFRTaoxVLLG0/Ii38zX3l7VvJnmLQNX02MPdzLc6pdxxq4JDiSyurg&#xA;8CvxBynHrXocVQHnfyMkvmDy7q/kTV73zDpUjSx6FcC/TVEsNXijacRlLtbvisyQAVADRsvJq0Vc&#xA;VYhqH5i3vm260bU9dnfULqxaWyXUbF49B1eN5B++tJvUFzYyKyVKK3D1ByUfFyUKvffyUT8j1ur4&#xA;+SNNTR/MVOOq6ZerJHqcI2LIY52dlStKiI8K0xV61irGPzO81TeU/IOteY4DGLjTbf1oFmBMbycg&#xA;qRtQqfjZgvXvir58/Ju+vPMflPT9JaMtd+ZPO0vmB4WPIR6bp5t7q4lPghuYxCNhVmxV6Rq195n/&#xA;AC384z2nl+3tfMenebryS+tPLLXaWmpQXsoL3Mlv6isj2zlC78qBDXfxVS+68y6l+XcPmn80vzAt&#xA;IbDU/MAtLDSfK9pMs7gWqSekktwBwZ25Mzso4qo7khcVYJ+VH5l6pF+V1ncanLW8ttZ1F/KloPim&#xA;dYNNkMdraoeTyKLq6jgVRXZ+HQbKvnGzm11PM0Rnvn0zVjdF3vbt5ImguJT8U0jgGSNq7lwKjr2x&#xA;V+gv5S+RNS8m+WV07Ubm2mu5WM1xHZRssIlb7bmWYvczyOftSSv4AKoGKs2xV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV5Z5y8h+eNK85T+ffy5mtn1O/hjg1/y/flkt79YRxilSQEenMigKCaD36hlWGecLj8y&#xA;9QlsfOn5l6dbeV/J3kidNYj0e2uku7q91CE8bUepGWjAMrBVrT7RG9ahV6LpX5mnTfy20jzR5zUW&#xA;2qawpmtNJtEaS4la5dpLW1t4ftySiFkVvepbiMVeNedNXtL651zzV+aN3PoehPcQ6db+SdLlElzf&#xA;yWsImC3EgKpJ6P1kB6fArVU7gVVRn5Y/m/8Akv5k1K38ojyzdaHa3Eqw6ZI9xJJbiVz+7Tkjqbd5&#xA;GqF4bE98VZb+ZNh5z/LO2Pmzy1fXWu+Ubdl/xB5U1WZ70JbkgGW1nnMkyBe6lmA+1uBQKvVvKFzo&#xA;d15W0m60FBFo1zaQzafEuwWGRA6LSppQGlO2KsD/AOclNYt9E/Ku+1ZJ/qmsW1zZvolylBMt4k6s&#xA;vpn/AIxeryH8nId8Vb8r6PoX5ieT9I8+aUzeXfNWo2wkfWdMoji5jLRzJPGf3d1GsysOMynbpQ74&#xA;qwLWvy70/Xf8XeSfMVpBpX5geZmh1TStThUppmoSadEVSW1FKxyn1JfrMbcnHqMwLLSirzr8mfJ+&#xA;v61rmueR9cF3pHm/ytbfXvL+sxml3YSwuifVuYNJLeYTKyoW40qUpyJxVlHkX/nLTzhZ6pd6Z5+0&#xA;X1WgjAVrWNbOeOVGCN9YFzJHEFYnrVaNtQ12VS/82/PXnD8zootKubnS/JPkuN1mmfUNStnuLkqf&#xA;hZoYGkmkC9VjRCK7lulFUf5O8xanommDy/8Akx5fvvMuszRJbXPnfUrY21kkSElUto5OKRxBnZwJ&#xA;GFWJZhITXFXrv5R/lBdeVrm780+bNRbXfPmqrxvtTdi8cERofQg5Bfh2FTQbAAAAbqvLfzxks/zF&#xA;8/22iWjz67DoiGOx8u6MyvLcXMpBmnvLs8rezgXiI+T1fYkKFYNiqBi8kfnb5QiGo6H5NW58wxQN&#xA;aWF8JrSWy0q05F/R02zM8skjsas8845MxPwkksyqG0TTv+cq1+sa15j0ptd0UIw1TRdS+pvJdWpr&#xA;60cMQ/eo3Anjxp7BvslV9aWjQtawtAOMDRqYh0ohA4/hiqrirsVdirsVdirsVdirsVdirsVdirsV&#xA;eZ/nbDpV9b6FpmsK82kLeNqd/Yx/bvFsUpFaLUhf3lzPEWrQBFZiVUFgqxWHWtXOsya9Dp8Gs+db&#xA;mBjbX95N6Ok6NYSA0aAMOforSrzusf1jf0mZfhCryc/lNr3mi8vdTtdQ0j8xrrTWL30Fvd3gUetI&#xA;8rLE8S2duzSOzuyCcMxJNd64q9U/Kv8AMHRj5TurCLypbroWlyehr1lptu8V5Yygmr3mmSmaV1qh&#xA;PqRTStsaqCpoq9ivI9H83eUrqC1uYrvSdcs5YEuoiJY3iuIzGWFDRvteOKsd8v8AmvyX5c8w6R+U&#xA;thJPLqthpkZjAjLokMEYC+vKNld1Xl0pv4kAqvDv+cifJfmDzx+a1h5b0vXptRlKJPNpJhEdlo1o&#xA;UUPcTzh+LNKQX3UNSi13UYq9n/JhdK0f8s4blZI7PQ2ub65sJpmEaixkvJPq0rs3FR6kXF/9lirB&#xA;fPP5x+QvNlpqGgXWnatY3mmSR3ela9DFBKts6TCGLUoZIZn5RRTuivwqxVqU+1xVTvy15z8u+WdP&#xA;m81+abC7h8769dtp2uxRwPLJ62lQ8ZDAoCqtnHBEbgMOqmpLHFVHUptC/OjQ11nyxb3mi+adBb19&#xA;A1DVLX0UnWQMGjO8iT2s6rxkG9Kio3oVWO6JaeUfMuny3Hk3y/q2jeebF3g8x6R5f1EaTHZXSsyO&#xA;splf6qUkeNuBjickdQKGirF7D8x/OI/TlvrHmDzL5eTy5cpbaxIZNM1d7QSyemssyLa2ckkRf4ec&#xA;Jem21CtVWV3f5Zec9e0eLUbfUV/MDSryMSWv6Q8wXsNrLt9o2lrb28RFRQqZa9j3xVMPKHlz/nIz&#xA;TJYrOysPKPlPQ4jymhtIJGQrShPBHLuw61aRa9ziqZaL+dvnTzfeXUP5f+VE1zS9Nf6vd+Yry5Gn&#xA;2k86gc/q8TCd+LfaX42IBHKndVmflf8AMK5vdWXy95o0aXy15kkQy2trLKlxbXaJu5tLqOiyMg3e&#xA;MgOo3pTfFUt/ODXPOlsmj6J5UjmSfVZwdU1C2jM9xbWEdxbwTvBEOr/6Wp5V+FVY9aEKvA/Mflv8&#xA;z/L3nm68ueU7bU/MOpWqrc3Pm64v76CTk0Uc0iozXMVjGEEgHCYSk1FSa8cVe7fkf+Zeq+btIvdL&#xA;8yWr2Hm/y/IkGrW0iemzpIpaG4Cii/vFU14/DUVFFYYq9LxV2KuxV2KuxV2KuxV2KuxV2KvOvNf5&#xA;bar5t87Qatf6pNZaDpUBtrTSFCMlzLIVkkuWZWDIAQqhftVSvwj7Sqhf/kJ5X1iJLbzBqWp6ppwk&#xA;9Z9LM0drayS7fvJVtI4JZpDx/vJZGf8AysVZ5oHl7Q/L2lxaVoljDp+nwf3dtAoRanqxpuzHux3O&#xA;KpLpnkKy078xdY842rLE2s2Nta3dsgpzngdyZ2PSvp8E+j71WG3lyv5bfmrpdtbsI/KHn+eSF7EU&#xA;CWesgLxlhHZLvkFZR+38Xtiq/wA+/lV5wP5gQ/mN+X2p2tn5i+rCz1HTtRVzaXkK0oGePk6miqKU&#xA;/ZU1Whqqqx+UPzY82LJZedrrStE0G4I/Sdj5fE5u79AOPoz3U1DFEygBvT+JlqtQDiqefmjpPkaP&#xA;yha3HmmRLLyv5eube/ktgimGQWwKQ2xioQyMzKAgG/TFXyj+avnj8u/P11bp5Y8lXml6rcScLK9s&#xA;0jEl8nL+7msYAPU5stFYScgQaE8SMVS7zp5w1zXWtrrzbrE+s6JHfz3d2dKS7DWbXyqH0sy3kdvH&#xA;D8EbBVHOm+2KvZfy1u/yO873mjab5T0seTfNnl+9tdSgjkiAu7m3tnDzw/WlfnOksNVYO1aHlxIB&#xA;xV6L5m/LS40HWpvPP5dW0dt5jZnk1nR+RS11eF6F4mBJWGeq8o5FAHInlXkTirA/NvlDy75z/LTz&#xA;Pqf5ZW0FjrvmO9ik85R6hO0Nxb+hKZ7mGcTMwtmSYc3GwIrSo44q7/nGnW9PsvPHmzyVoV2L/wAs&#xA;2sFrd2N1GS1ubuKKKDUHgY9Y5bh+S02oBTruq+hpoUmhkhkFY5FKOOmzChxVgv5WflbF+XvlbUPL&#xA;y6jNrGmz3M9xbQyRrG8cUoC+jyU/ESF3bYV6AYq+WE/Nm60fV9W8syHUYtH02V9T8tQa2a6hpWo2&#xA;AaeKESVdjHMEMDI3Z/mWVfSP5m68YvNPkuwuRKui+Z5JLGK9sppbPULO7kVWikjmicco5VbjIhFN&#xA;g3bFU68x+RfLnnL8tZfKljdcrGOM2tndOz3JiuLQmIGYO3KR4pUIdXNeQ33GKvn/AP5xZu7/AELz&#xA;P5lGru86aLbtpMccCmV3dLguwVqhRFD6bH1HoicxyYAjFXt1h+fHlLUdUGm2EtrcXjNwjs11Gx+s&#xA;SPUUWKkpt3Y1NAJ+uKsz0bzTpuqXMljwmsdVgUST6Xep6VwqHbmoqySpXb1ImZK7cq4qnGKuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KqV3A89rNAkz27yxsizx05xlgQHXkCOS9RUYq+ete/Jj83tf/ADd8sXnm&#xA;LXf055V0F4r1dUaO3suLxy+o0C2sDFjJJ6aBpOIFPCgXFX0VirsVeDf85labq93+V1pcWaPJZ2Op&#xA;RTaiEr8MbRSRo7AfsiR1HzIxVjf5QaN+W0v5gpfad5itpb99Tu77yva2RaWdrC4sngFrdRtHWA2k&#xA;S/By2H04qhPy18t+XG8gedYfNOoPoOjTeb1t57q5JdT9QmSZYy7/AN27v8DzE79OuKsF8r6BHB+a&#xA;/wCXttoV5a3mt/pWW81CHSrmO7gtNN+srKtv68BaJuEAnLAMdjTpTFX2Z5v1e60XynresWcIubvT&#xA;bC6vLe3IJEkkELSIhC/F8TLTbFXguu+XvM35gflhovnvylbwR+dNbtntPMlzZ3S2NvPZuksU8dzG&#xA;xKS8acd2Dr2Owoq8jn8yedfy51TRfMkEK6XZQyrYaXbaSeekX9jau5v+U0srzTO87CjOprWqtRUx&#xA;V9Va9+fX5YaToK6vDrEeriVeVvY6YRdXLmleJjQ/u/8AnoVGKsP/ACw/Obzz+Zvnazay8uy6J5N0&#xA;5Z5dQvJZGk+sO0ZjgjDmOJKhm5FFr4123VSj/nJH8t9J82fmD5GtrRETWdRllj1Z12P6LtuEkk8x&#xA;H2RECyqTSpbj4UVSv/nIfzvcahrGjahod7bWtroRmk0nULmRESe9lUB7qJZP7yK0jH7tlBMkp+BX&#xA;VWxVD/lbqX5jal5Kj8n/AJfRXDLezT3PmD8w9SWSO39W6YmU6ektJZWpsHPxcviKrWoVZ3df84t+&#xA;WZPK0flu28xaxZ6aCJLm3ha1SK5m6tLcBYBLMeW6iSRgvRaYqwGL/nHL/nH/AEvXG8t6z52mk8xz&#xA;0it7P6xbQPHJIP3YKcH/AHhqCqs2+22+Kvd9V8parP5N05GuFuPOOgW6Sabq9Dye9giCszVo3p3X&#xA;HjKndWPcA4qyHy9rNvrmgaZrVupW31S0gvYVO5CXEayqD9DYqmGKuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVbNDFNE8MyLJFIpSSNwGVlYUKsDsQRiqTaB5H8meXrie50LQ7HS7i52nmtLeKF2BNeJZ&#xA;FB41/Z6Yqj77RtJ1CwuNOvrKC5sLvkLq1ljV4pORq3NCKNU774qlPlb8uvI3lSWWby7odpps844y&#xA;zwRgSsux4+oatxqK8a0xVkRAIodweoxV5nP/AM46/lZLqc16NPnht7iX17nSYbqeKwkkJqS1sjBK&#xA;EgfCPh9qYqwn8+vyEPmfUp/M8mqrp3lvy/5fmW2023iJaOa0EkqLHGB6YiZftcfi+EADuFU08jeS&#xA;vyY87fljoXmfUdMsYrmGxhTU9Vgc2E0V3bxrHO008DwvyDitXbcEdjirAvzY0ubyz5RtPPH5dee9&#xA;avfK6XYs9RsodXmkjALFK20reoFIZeJ5K/UEbYqlFx5U8v6p5d1HzXfazruqvd24t4bm/wBRJaxv&#xA;ZYOenQajxVPUtJpJUaK5RlT4qMqbnFUfo835S+QfyZ/T91a6Nqv5lKjQta3aPNdx37uRxmtbpmkR&#xA;oFNZCFRTTb7Qqqmv5e/85B+d5rl7O2Mfny2t/Qlv5IlttMvEEyVkg02w/dy3SwcSORXkx/lFDir6&#xA;UtdU0+6urizhuEe9tFja7tQwMsImUtH6iDdeQBpXFXlX5CeXfLV9+XYTVbC1vfMaajdN5oNzEktx&#xA;+lIbt3rNzBbko4MntSmKs+89ea4vLfl+a7RfX1S4/wBG0WwWhkur6UEQQoverbsf2VBY7DFUX5Q0&#xA;RtB8p6Jobv6raVYWtk0g6MbeFYi308cVTbFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk3nHzNB5&#xA;X8tX2v3FndX9vp6rJPa2KCW4MZdVdkRmQERqxdt/sg4qq+V/M+ieaNCtNd0S5W7029TnDMtQdjRl&#xA;ZTurKwIYHocVTTFXYq7FXYq06JIjRyKHRwVdGFQQdiCDirBLn8iPyguGQv5VslVGLiOJWijLE1q0&#xA;cbKjU7cht2xVd5x/L3yF5m0KDyLJ6NpBZU1C20OykjtqrEGjQvCg5ej6koJ4gfFTfsVXkFzpEPl3&#xA;yH5j8u6qYvrel+QooPMEaMHWPUHmnbTY2ZfhMitI1N+nGm1MVes+SvJGia15A8ry+c9AstS1tNLt&#xA;FupNTtIZ51cQqCHMyMwb+au9cVX/AJhfl95Ol8i6vFbeVbW7ubazmfTLWyto47gXCoTD9XeNVeN+&#xA;YFCmKsd/5x08lecfK+k6kfM9rwu9VWzvJL6eX1r2Wdo3EsU7FmPGBRGEBAIJYb9cVZhrv5XeXNU1&#xA;ptetpr3Q9dlCrc6lpFy9pJOqfZWdRyilp4uhPviqt5e/Ljy9o2qHWXku9W1zg0Satqtw93cRxt9p&#xA;IedI4VPf00WvfFWU4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp3Fxb20ElxcypDbwqXmmkYI&#xA;iIoqzMxoAAOpOKvGvyI81aLqnnf8wbDyra8fJ8V7Bd2F1H8Nv9ZliEd0IloAFkkh9RQO2+1QMVe0&#xA;4q7FXYq7FXYq7FXnHnz8m18yearbzZpHmLUPLPmCG2+ozXdiQRNa8y/Bkam9T1rToaVAxVPfJ35a&#xA;+WfK+lS2FvHJqEt3OLzUdQ1FvrV1dXS0KzTSON2Uj4aAU7b4qyrFXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq8u82/8AOQfkvSdRfRtJuLfVdXQlZC9zHa2UTDqHuX5GRgdikCSMDsQMVY3b/mT5q1+S&#xA;Yw+a4IlgJMtp5VsLbVLiNF6lkuJ7i7b5/Ul6dK7YqmPlmc+Z5pF8sfnDfXGpRswksri0071kpXlz&#xA;sprWCZaH/JFMVTu4vPzv8sr609vp3nnTY95fqanS9TC9ysTtNbS0H7IZScVZD5J/Mfyv5wjnTTJp&#xA;INTs/h1LRrxDb31q/dZoH+Ib7chVffFU71vV7PRdGv8AWL4stlpttNeXTKOTCKCMyOQO54qcVfIf&#xA;nj/oYf8AOrTW1jStIlh8jyux07S4rm3hEqI1A8qvJG8zAr1I41+yMVfQ/wCQflnzN5Z/K7SdG8yW&#xA;0NpqVuZa28XAlY2kLIJWjqjSUO5BPau9cVehYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FVG8vrKyi9a8uI7aGoX1JnWNeR6CrECuKvI7m71n86be8stG1C68ueQbeaWzvr6NOF/q&#xA;joaMluzVWK14nd92f7JUCuKvMvzJ/wCcOodK0SbVvIupXl5fWKmZtMvfTeWYJ8R9CSFIf3gp8KlP&#xA;i8a9VUq/Kr/E95Y+XLf8wrObUvK3mWZrTy95nqw1LSdQSZ4YVS8I9aP1JEoilivSnRlxV6A/5b2v&#xA;5ifpvRNXujp/5peR7mKCLzdZr6MtzBNH6thcTrGVqZIhRqHkjCqmhpirLvyY8+ebrm8v/If5gQ+h&#xA;510RBMlxQBL+xLcFuY2UBW4tRWIA6j9rkAqnX5mflvZa9EvmLTLv9A+ctHjaTS/MMVFKhAWMVztS&#xA;WBhUMrA0BNO4Kr5yb8yvzJ/NyT0Yde0nSlVPqsPkqS5ubVtWk9AGUO0XpM6TliER5VX9k9yVWa/l&#xA;1+UDW95oOp6l5E/RQ1pbyx8x2UE70smipJaX1tI8zXVv6hVkZVmPY9aYq9C/KfWfMNp5y84eQNW1&#xA;GTWrfy01pNpWqXDB7o219GZFguHAHN46fabc/KmKvUsVdiriQBU7AdTiqha39jdqHtbmK4U1IaJ1&#xA;cEA0O6k9DiqvirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfLP8AzltoHmTzV5z8vaF5ekOq&#xA;XcNjNcSaBAw9WL94AbkoSAea/CO44ntir2r8jPLHmTyx+V2iaL5jb/crapJ6kJcSGFHlZ44ealge&#xA;CMBsaDoNhirPMVed/mF+e3kjyB5itdF8xC7ie7tGvEu4oGkhADFFjqNyzFT0FBtypXFWN/kFeal5&#xA;s8y+dfzLuLSSy03zFPa2uiQyijNbWEbR+p1NeVVrTblyArir1240jTLjUbTUpraN9QsRILS6I/eR&#xA;rKvGRQw34sOq9KgHqBiqRfmml0/5ZebUtK/WW0a/EVKliTbPstCDy8PfFXyT+Xc/5f6X+b3lG80L&#xA;QbyXy3a3v6Jk8yXzSPDd6hMpSC5ReCRQMspqqVPwfEQrDFX1X5z1rSdUkuPI1r5mk8teaL6ES2U6&#xA;RlJjGpDs1uZlWOX4VYN6b1G/SmKvBfy4/NPyh5CTzE2kS3Pma81C9jstOnlYvqOvanX45mJ5+jbR&#xA;+oqx15MxdieRoqqvbfO35tWXk/R9KS5tv0z5q1aUWNnommuD6t+ip60YduXpojyKCWBIqNsVQnl/&#xA;80vNsWt2uk+f/KEvlb9JusOl6nHdRX1nJcP9i2llhFIZXOycj8R2Haqrw/8ANL8+vP3mbzLr/wCV&#xA;FjpltYx6jqQ0O0uayi64fWRES7ByhE9Oy0CMftdcVeyp/wA40flhD5ZtdJtLOSy1SzQGDzHau0Oo&#xA;i4A3n9VTuS2/E/COgpirP/KOkavo/lyx0zWNWfXdQtEMc2qyxiGSYcyULoGk+JU4qW5EtTkdziqb&#xA;4q7FXYq7FXYqlXmrzNpflfy5qHmDVXKWGmwtPPxFWamyogJALOxCrv1OKvKPy/8Az+8x+ZNcsodR&#xA;8sRWmjam8SRT2t4l1dWf1pS1o99bqodI7inwOQo3HiMVew6fq1hqEl2lpIZGsZ2tbqqOgWZVVyoL&#xA;hQ3wuN1qMVReKuxV2KuxV2KuxV2KsZ0XS7K486a/5geCI30Ig0e3uQql/q8US3TgP1+Ka5KsP8ge&#xA;GKsmxV2KvmT/AJym/O610q/Xybo9hZXmr26CS+1G9t4br6oZlDLHAkyuolZKMzEbAjv9lV896X+d&#xA;X5saZfQ3lr5r1ItAQY7eW4kmtgB0X6tIWh402C8KDtir70/KrznL51/L7RfM00It7jUIWNxEteIl&#xA;hkaGQrXfiXjJX2xVlTojoyOoZGBDKRUEHYgg4q+cPze8mXHkP8sbzSNPjWby7FrVpqXl6RWRZ7Oe&#xA;W6Uvaur09RPiYxOpLUJDCg5FViH/ADmvfX0XnTyykbNHHb2Ek1vItVYSvOQ9GHgI0xV4v+Vtml75&#xA;20+1fX4fLKzN6Z1iWoaINs3ouFIjlI2Ryy0/mGKvu7/lTvlFNR8n3tsJrdvJYmXTYlZSsouE4uZ+&#xA;Sksxf95yFCWJJ64q8n/OzUns/OWt+XrTzZqseu67pv1rTdCu445dGPFGVIYWZvUhuGe3LwuoAElK&#xA;k1piqD/KLyzq/wCYv5xv+bOraJLpGlW1tbtbJcLxF1fi0SAyxgqvKNficMO/HfrRV9O4q7FXYq7F&#xA;XYq8x81f85I/lF5a1OTS7zWDc3sLcLiOyikuFiYbENIg9OoIoQGJHhirLPJf5heTfOtg195Z1SLU&#xA;Io6CeNeSTRE9BJE4WRK0NKrv2xViX5uanpOoxar5G8z3UOgaBrOlA2HmG7f04WvxMx9L1GKRD0vT&#xA;RyjOC4O3Q4q+cPJPmnzT5W0TzNZ6TfW7zymDTzrNlewSafF9dmaGbUp6TRyIwrCsMjRFUAP2K7qs&#xA;w1X82IfLHlvTtP8AIfmG6s18r2cjT2d5BbzWd/6U0Q9R2kSK6H1x7mT0yKGiVCKDzxV9QaBqZ1XQ&#xA;tO1QxGA39rDcmE7lDNGr8T/q8qYqjsVdirsVdirsVdiqHsrKO0jkRCWMssszs1KlpXL02A2WvEew&#xA;GKojFXYq+Ofyx8t2fmv/AJyr8zv5hjS4/RV5qd8lrNRkeS3uhBAlCPiEQkDL/q4q+lfMv5Pflj5m&#xA;v5dR1vy7aXd/OFE11xaOV+PQs8RQk9q9abdMVZPpWlabpGm22maZbR2lhaRiK2tohxREXoAMVRWK&#xA;vCP+ckvMVrPqvlXyhxeeKK5bzJr8UADyLpulRvM68T3lCvwr+0o8cVSWe4/LX889JXzd5yml0DSt&#xA;LuZNL0S2S4RLmaRooZpwyGOQzNVl9MRdq1FcVXWXkT8j/K0XqQfl/rOtR3jC0i1DVoUt4S8o4oP9&#xA;yk1isRdtlf0wanbtirJtQ/P+18oavoXlXV/J2tWLXMYihDvb3dx6MQEcbpHbyzvNVlPLcHao5dMV&#xA;eBal521n8yLPUPLmraimoa62vxzaBqc0S2n6PsY/V+tzyysqejAB6VI2NQQe+KvrG0/ML8q/Lmj2&#xA;GmN5s0lILK3itYOV9bs5SFAimgcnovXFUbcfmh+X0WiSa1Hr9jd2KUVWtbiKZ3kbZIkVGJaRjsE6&#xA;1xVlGKuxVLPMXmbQPLelyarr1/Dp2nxEBridgo5HoqjqzGmyqKnFUgi86+UfPPlbU4PKvmS1ae7g&#xA;lsoLqKTjLBcTxOsTGNuEgYH4l23ptirxX8nv+cSreyk1Sf8AMyyttR58I9Mt7e5uKL9r1ZWaJoft&#xA;VXjWp77HFUo/Mf8ALW6/InzRpX5jeR5Z38vC5FvqumSOXKRy9Yi/7cMqggF90cKak0oqm/5l635c&#xA;1n85rDRvM9w2oeT7rQ5dasL51jWTTWa3kuPVgKpxmjZbRKRXCyKXI2xVh/nzyPeaN5Y8r+YYPLMc&#xA;FnayoL21eYNcRac86JbWN4OQUS3n1iaWd+AFW4fCFAxV6N5H/Iv8ktc1x7ixttenttNEU8uj6sJY&#xA;LKCaQtS3KTRxyvJHxPNQ7L4k1xV9DABQABQDYAdAMVdirsVdirsVdirsVdirsVdir5a/OnRtc/Kv&#xA;837L83NDtWutEv3C61AteKySL6UyOR9kTrR0Y7ep9AKr6G8k+e/K3nXRY9X8u3yXdswAlj6TQuR/&#xA;dzRn4kYe/XqKjfFU/wAVYJ+aH5x+Uvy+sCb6X65rc4pp+h2xDXMztslVFfTQn9th8uR2xV475F8r&#xA;+dPMs3mDzFfaRBq/nHXpYo7y8v5GttO0qCCRZEs4nVZJZLhGiTkEjZI+KhyW5oVUbrfn/wAz/k9e&#xA;Wz615F09bfUZGt08zQ37z8mb42V3+rCRF5VcRLGiU2RRQ4qyBPzfvvNF1L5dtTo/6TuoQR5W123e&#xA;FNQgmWq/VL+K5vLW4SRPs/u/i9t8VYj5O0f8m5/P50nV9G1b8u/PLAwx2H6QmS3mWQcSlpdq3R91&#xA;UJxB6J4Yqnv5z/kn5L8v+Qf0z5X0COFvL7G6u1tneK9e329SWO8PqSiWCnqAvzSnKqk0oq+dYdL8&#xA;u+ZY5LmQz3dtbp6l5q1hboNUtI9gZb/Twyx3USn7U8Tht6yNUhMVe4/kh/zjZ5B+v2PnOLzVH5st&#xA;LSVZ7GG2hEESzoeSfWFaSV+SfC3pkKQetRir6axVLrzzL5csb2GwvdVs7W+uWWO3tJriKOWR2NFV&#xA;I2YMxJOwAxV5v/zkR+T2ufmXoGm2ujX8Npd6ZPJMILousEokQLu0auVZafD8J6nFXxD508l+YvJf&#xA;mK40HXrf6vqFvxb4WDo6OKpJG4+0rf2GhGKvtD/nFTz/AKr5s/Ll7fV52udR0O5Nl9ZkJZ5ICivC&#xA;zsftMKslfACu+Ksg/wCci0s2/JXzULsKYxbIU5dPVE8Zi+n1ONMVfO/mzXfL0d9oyaj5jg0S70Hy&#xA;9ZeXZhHZvf6mLiz4SvKiRS/V0Ak+w0squjCoSoDYqyD8nbf8mNBkTzRYz+ZL68gctqGvmETW6RyA&#xA;iSK7trJ7pkjkB39ZSa7gjbFX1HpGsaVrOnQalpN3FfWFyvKC6gcSRsPZl8O47YqjMVdirsVdirsV&#xA;dirsVdirsVdiqH1DT7DUbKewv7eO7srlDHcW0yh43RuqsrVBGKvCta/5xL0u31ZtX8geZb/yjeNU&#xA;iKJnljWp+zG6yQzKvsztirk/I/8APa8U22p/mxdQ2Z2ZrSOX1SN9uQkgIr/rYqy7yH/zjx+X/lGa&#xA;XUFW41bX5g3PWr+Uvcozj4ngK8RE/g4+MfzYq9IsLCz0+ygsbKJYLS2RYoIU2VUUUAGKsG/O38tf&#xA;+VgeU7bTKs50++j1IWaOsRujFFLF9X9ZuQh5+t/ecWpT7JxV8pfnDp+k+T9D8ieWLi5ivvN/l4XU&#xA;mtQwSMwt4Lmdbm3tGmG9U5txpuKltqjFX0LpXk/TvzV8gah5d84k3HmDypqd5oieYYwBciazKmK5&#xA;Vu/qRPGZFOzGvQ0oq9G8n6b5hj8pQ6R5veHUdRhR7O7u1+KO8hFUSV1YVDSxU9RT+1XqMVfMV5+U&#xA;Gsflh/zkN5MbyzM8+k67flrNASZYrWNlF/DLT7Sx28tQ56jr0OKsx/Pf8m7bQBJ+YPkqWfQHhIPm&#xA;CLTTJGBCWFbqOOFo2HA/3qoy/D8YoVPJV5p5pu9T0+wSDzZqPmedrqBLqz1C28xyT6JcwTGkUsbP&#xA;aXs0YkYfCkvhuwxVkf8Azjpp+v3HmGFtB8q6VY2aTpJqvmk3Yv7wW6Pzkgjb1pFDz0EbGNFFCSe2&#xA;Kvq++vrKwtJb2+uI7WzgUvPcTOscaKOrM7EAD54q+Af+ci/zG0vz5+ZM+p6R8elWFvHp1lcEFTMk&#xA;TvI0vE7gNJK3Gu/GnTpir2D8rvMK/k7+V1pYy2Taj+YnnG5+taV5ZQUuFSVRFbG5UfEifBzodzy4&#xA;ilGKqs/1PRda/MSHSvI2rXjX2m6S8d15+1i2IiimvkHqpplsyAA8ZHDSFd0VVFQ5xVNtX/5xo/Jn&#xA;UdKewTQEsWK8Y721klW4jNKBg7s/M/64YHvir560D8g/zi8ped9dufK7zRX/AJbRbrSL8IUg1KF3&#xA;/uFJPAu8YPKMkio4nqGxV7Tp+rt5Z13yd5stLCTRNI/MKaLTvMnl50MSQavcRlre5jiIXhI7xtHI&#xA;aDmtGI5Yq9sxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi3nnzPrmjz+X7DRLGK8v9e1JLENc&#xA;MyQwxLDLczytwBJYQ27cV/2sVeE+ffK/5ZX1/rXm7RLm587ecNM1Yve2NzcxQ21oUVwi3ZkSDhY2&#xA;zx/aVhyNFZt6hV6f/wA476Fr2n+RrrVvMDc9Z8z6lda1dPxK1FxxWMgEKVV0jDqpAoG6Dpir1DFU&#xA;K2lac2qJqrW6NqMcJtorphV0iZubIhP2QzAFqdaCvQYqvv7G1v7G4sbyNZrS7ieC4hYVV45FKupH&#xA;gVNMVfHsnlbzXD+XnmCy06/aHXvyi1e9W1nZgDLo9yvOWMg/C6t6Rk4OOLLVab0xV64n/OOf5deb&#xA;/L2j6/Npk/lTzHfWVvd3baQ5tfSuZoVeRPQcPGnF2IIVFOKsR1//AJw21W/jYR+fbq6RAWt7W/t3&#xA;lXn2rILj4fCojOKsSm/IrzT5Bc6jb+XHvp7ZiU8wkx6vFblfszxabGIJAV+0GkjlA68QRiqV+XvP&#xA;35faDfXGu37a7q15fMV1PXrf0XvHDGhQXkk6yWySBSOKwQy06SFcVfW/5b6z5P1nyXpl/wCUI0h0&#xA;CSMi1t0T0zGVYiRHTs4cHluaneprXFWS4qxD81PzEi/L/wApv5jm0y41SGOeGGWG224JK1Glkchg&#xA;qqB36sVXatcVeOr+YUn53fmb5V0/yxYXUHlLypfR65quo3SBC9xb7wJRS4Xf4VHLk3ImgC4q+kcV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVQOs6LYaxZfVbxW4q6ywyxs0csUsZqksUi0ZHU9x8j&#xA;sSMVYK35CeRrvzUvmfXfX17U0A4i9SzjiJVuQaWOzt7UXDVHWfn+AxV6QAAKDYDoMVdirsVdiqSW&#xA;HlDRrLWtb1eOIPca+9tLfo4DIXtIhFGQCPBQfnviqd4q7FXYq8j/ADM/JI32p/418hSpofnq15SE&#xA;oAtrqAI+OG5T7FZOhY7N0evVVWZ/lqlp/hOC4i0g6DdXks1xqmlFDH6N88hF0AP5TKCUI2ZaEbHF&#xA;WU4qtkjjljaORQ8bijIwBBB7EHFVKzsLGxh9Cyt4rWGpb0oUWNanqeKgDFVfFXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FVs00MMLzTOsUMSl5JHIVVVRUsxOwAGKpFL5/8lxxiRdZtbhCeNbWQXNDSvxeh&#xA;6lPpxVF2HmryxqN39TsNXsru8oSbWG4iklAXZqxqxYce+22KppirsVdirsVdirsVdirsVdirsVdi&#xA;rH/OXnTTfK1jDJPHJe6lfSfV9J0i2Aa5u7g9I4lJAoBu7n4VXc4q87gXz55ykaW91C9MPPiNO8vX&#xA;C6dpdu1aGO41dh9bu2WhDtaIUDbUGKpV5o0v8vPK8iQ63FZQX3xPLYNruuX93IpFUY+mjTRgn9po&#xA;yKYqxjSvzH8vw6hFa6Jq+uaJPLJHDaRWGpf4lt/UkYKFlsL8G6oSfswjm37OKvUND/Ni/sII5POE&#xA;VvJpDyegnmzTFlWzjk+GkWo2s3+kafL8YqJKqCdyMVeno6SIskbB0cBkdTUEHcEEYq3irsVdirsV&#xA;dirsVdirsVdiqA17WbbRdIudTuVeSO3UcYYhyklkdgkUMY2q8sjKijxIxViep2WjaTo0/nD8xpob&#xA;mWyT6w0Uo9WysdxxitYSOLyA0X1SvqO3TitFCrzWw1v89fzfmF/oMy+RvIUjUtruQMb66jBp6imM&#xA;pL7jg8a9uTYqmt3/AM4yyX0BS/8AN91dyNuzzWkEtW/m5ymSev8Az1xVN7eH8zvy7jR2RvNvleD/&#xA;AHpit3lkvoYxSrwxXUk8x4/yfWJAegEQqcVelaDruk6/o9prGkXC3enXqCS3nStCK0IINCGUghlO&#xA;4OxxVH4q7FWL+ZfzF0DQ79dIVLjV/MEi+pHoelxG5u+B6PIoKpChr9uVlX3xVJ5vPP5irLGh8oWF&#xA;m84H1e11DXYYLpyTTiscNvdITWg2k64qqj8010uVIfOuh3nlZZGCJqUxju9MLEgKGvLcssVf+LlT&#xA;FWcxSxSxJLE6yRSKGjkUhlZWFQQRsQRiq7FXYq7FXjEUEnm/ztdX88snp6hf3mh2DRkj0NE0jbUG&#xA;hZT8L3t8Fhd+vp0oRtiqYfnF5x8waSujfl9+X0EcfmvX0aOzKKEisLCFeLz7DinECibbUNBWgKrv&#xA;IX/ON/kHy6gvtbtx5o8xzH1L3VNUH1hWlbdjHDJyQbnq1W98VZBen8t5opbSDy7DrMUDGKSKz0sX&#xA;MHJfhdRN6f1csleLKHqNxTrirGb7yZow1FrnyFefovXVhZJPLOqx3EdjqFqpPOE210qSCL4iA0QM&#xA;aEk8eRriqn+XvmAeWr2w0wrNbeUNanax0+yvGrPomsLUvpMrHcwyje2avgBVWQ4q9hxV2KpVq2uN&#xA;a3Men2Ns2oarModbZWCJFGSVE1xKQwij5AgbMzUPBW4tRVjF55i8xz3sljY3L315bllu7fRbKN0t&#xA;pSlRFNe388ds7ISKqvByP2VqKKr7Lzj5ljvY7K9shJeyciumTQ/o66dEHI/VZmnvLG7cJ8TItwnE&#xA;Cp8MVZdperWOqWv1mzkLIGMciOrRyRyL9qOSNwro47qwBxVF4q7FXYqxb8w3EWm6XPKaWUOs6Y94&#xA;SeKhDdosbN/kpO0bHwpXtiqT/mh5BuvPGr+V9Ju9/Kdpczajr0NaCdrdUW1tzQ1pI0rlv8kHvTFW&#xA;PeQvzk1w+bPMPk3zpoUWg3mgWUmo2Ys+TxSWMFBSNfi5ngwK+n13FBTFWU6VDb6z5ai80eb7x7e3&#xA;voRciz+uPb2FtazfFCjek8SSkoyl3lLfF9niKDFVfTLby7eBz5K8xoLm1A5QQ3v6StAv7KS2zyyB&#xA;EanWIxv/AJXXFUr0S5i0DzPLLHbLp1trN4LfzBpiEtFbarMD9XvoTRQYb/j6ZbiOUnCoD+oMVejY&#xA;qxH8xfMmqadaWGjaCVHmXzDM1npssgDR2yIhkub2QHYrbRAtT9puK98VY3oGg6BoflC61h5bqLy8&#xA;wN1JJG7jUtYkfZbu8uEZJna4Zh6EKsuzDl9rgiqcWXkK8vIzcXv1TQPWHL9F6TZWL8ATXjcXF1Bc&#xA;CZ9hukcYr/NTkVUFN5ZuNAIilmgttNuOMK6hawCK15SH01h1PTQ31WVJaqrTxCNv2fgHxYqk2jX1&#xA;1+XWsrbSp9V8nXdzHb3+mljJFo13dGlvcWshof0ddyApRgBHJtt8ShV7BirsVdirxLQNZh8vazeW&#xA;8k3IeUNZ1I6okdHYaH5glN7Hd/DXkkFyUEtPshWJpTFXpF75L8vazqWoa8ZHa51nRl0UXlvIFKWT&#xA;tLKWt5F+y0hnDct/srT3VeEfl+3mvy55G/M3QrPVp9R0TQdRgstJ1WpYxwyTcNRZG+Lj6MDc24n4&#xA;TUinXFXuq6xNbTjy75W0tb39ERxW9zLNN9Vs7YCIGOAyiOeR5fSKtxSM0BHIrUVVUry+F7LBo3m7&#xA;SVsTdSj9HX1tcNPbfWFHKMR3IS2mt7gb8CUWp2RidsVYX5q0K4vZ7nQ9RnCXmrImlXd6oCc7hY3u&#xA;dD1eiiiSrLbPA9KVkAp8Cpiqf/8AKxrv/lSv+NfR/wBy36Nr9Vp/0s/95/Rp/wAxfwYq9BxVh1q+&#xA;oWn5fan5gsIzJr+pWM+rKGWrm5kgMlvBRh0hUJCop0XcVJxVpfMvkvyN+WlhrNxeU8uW9tbNHeqr&#xA;O8wuivGbivJneV5fUc7ncscVZJf2Gm63pghmAmtZwksEyGjKwo8U0TjdHQ0ZHXcHcYqxW21C4svr&#xA;Gq3bg6nokosPMzKoVbm0orxXxRPsskMizeCj1Y99iFWcYq7FXYq851r85/ySvLy88o6t5ispHuOV&#xA;ne28nq/Vzz+B0a5C+gvWhPqbe2KqereZPN3kXSVlurjT/MejOyRaVeXV1Na6g6sCUjcQ294t2wQV&#xA;9SMKxAqUO5xVCflrpGl+bNT1vzvq2qWeuarqVu2hT2diJltbGyVub2dJ1jnLuzc5GdF36KMVTLR9&#xA;O0i08z3On6tN6lj5L0yxOjC+KUjh4SepqDbKhcej6Xqcfh4NSnJqqpF+dvniK28i6L5q8pWia5f3&#xA;l6IdIv7QO08UZgnnmlgeP4tktW5qwKMKh1Za4qrazrlv5v8Ay203zbZBYZ9X0+4gc14ILiKGW4t2&#xA;BJBJg1C0X0S1ftNt8RxV6nYXkV7Y295EGWK5iSaMNQMFkUMK0JFaHFXmXn5Xn/MGeOWghh8qXgjk&#xA;b4vTjur2CK+lVar8UcCKf891WaeetO1G88sTR6VCs9/aT2d/a2pIQTPp93FeCAMdlMvocATsCd9s&#xA;VYJq35zXup+bfKugeSrOe5uLq+A81W97ZXUEljZLQSiRpVjRJFq3QtutO+6r1W4jsru2ktrhY57a&#xA;5DwSxPRkcEFXjIOx2BBGKvPNW0y2v/LEumawfrJ0q5by5q0sp5NNp9/6UcbvIeQ5iG4trl3ptIh6&#xA;CuKp3+VGsX+p+RrAam5k1bTWn0rU3P2mudOne0kdtzvIYef04qy7FXnX5tNc3uo+WfLbeq2maxNe&#xA;NeWsMxtmvZLO1aeCwadf7tLhweZ7had8VeSeVfOeq+Wtdkv2/L/yzBZ2Ra1u5/LqMJ4I3ADRz38a&#xA;yWbN8NGWWVKsOxxVmMmgaV5rc2/5ZsLTRzALvUwdR1O102R7tmC2i2dnNGEb92xl4cQoIBDV+FVn&#xA;f5QSNN+XumrN5aPlSVBJDPohjaJUaORkLqsgDlZQOYL7mvU9Sqx/U/MnnHyVBrWnaX5Rvde1K81G&#xA;a80e7tUDWk6X83qn63MG5QtBzaP4lpxVN+4VYZ/zknpvmK/vbHVbbUG0+Xylo02tvbwEkPO11BGy&#xA;CQFGX4UJRqHddgMVZzrGofpjS/KWttwWXUYtKlumjooMh1jSnCFfirwd5AAW+GpHc4qx3iP8J/oj&#xA;mv1H/lYn1fhvx9H9N/W/Spyp/efD/CuKvcMVY/5SvYYLZPLdwRFqmjxJAYWHAzW0dI4bqJamscig&#xA;VoTxaqE1GKvK/wAxvJXkW18w2mmG11DV4Jy13aeSrW7lWwbU3kBtlaEt6UEcq/WJW6Kqxu1KVGKp&#xA;1/jT82tD1a90/wA02mjIl1pVzqPl6XTjOY1urJogbGczFCxk9VQGUCv7PgqqZXvme3tPPdxp/mKw&#xA;MVhrVpa6PcXcUiXNmtyXmaCCVkKTQG4W7ZQZY1DGgU4qzDyXeT33k7Qr2d2knutOtJpZHPJmeSBG&#xA;Ys1BUknc4qnGKqN5dRWdnPdzVENvG8slBU8UUsaD5DFXj/5e+RvL3n7yzF5v1YCJdb9aa30rSmWx&#xA;trWNpHCK5tRFJPMOsjSsQWNONBiqbeW/JVx5O89aRavevf8AluS2vrfy+s6J6lneTejPJAPTVE4v&#xA;BayNGQooA69WqyrLvJ+keS4v0jr/AJYWJ08w3DXV/eQSvKk88bNGzDkzKtGDAhABXFW/Nn5feTfN&#xA;qRr5h0uK/MStGkhLxyCNjVk9SJkfgSKla0xVLbjSdNTzR5X8uabbxW+maBb3OotZxqAkSmFtPtkp&#xA;TpItzPTx4GuKvM9AsdU8qfkhLoF3In1z6w9rAn2wt1b2C3ElshBCsf0hbvByXkKnauKveNPs0srC&#xA;2so2LJbRJCjN1IjUKCafLFWFfmfod+zad5p0uyOp3OircQalpCAF77Sr1VS8t0B+1IvBJY1J3K8f&#xA;2sVUdB/Mixt/Kx1SW4XV9BtF4JryXFrAwCCnpX6Xs1s0V0uyuN+R+L4a8VVea3X5p+UvN/mK4h1H&#xA;zBL5e8mah6QvxEl3bi5ZAUiglvkT0ITKp5XDpLRohEiufjoqjX0PyT+X/mnUtKs3e18oXEFh5pVI&#xA;p5StmLRbtbmS3cFpD6/pQKOL1+LbamKoEfmMJNc85+XtL1OW5t7qO5ivba+4mSJ7m2S1sL20ulWN&#xA;3idvq8Mkcw5ozqQzCpxVlOl3nnDTLvWZfKerWF/ouq6lcalaMdH1K+P+lHnJwuYJrW3kQMNinLr1&#xA;xVbpnmv8xP8AGHl+21LXkWyuLq//AEnbPp1tZQ/U9OtwJpBJ9avnoLqaOOvNCG5AjamKpX+d+vJq&#xA;+oWK+VdSg1G/bRtbttKGn3EUsiahItsxUcC1JHskuFjp8VagbndVnP5LfmD5S82+Vlt/LenXGk2+&#xA;iJDZzadcRcBC4T+7Rx8MnHianr3YCuKqOtGz/L/VfMus6RZx+hf6Hf67c2S/u4zeaOEqwp9n6yt0&#xA;oeg6py6saqst8leZ4PNPlLSfMUETQR6pbR3AgehKFx8S1HWjVFcVTrFXkOra75C8wa35h0jzDqJh&#xA;h8xae0OnpEDV9I0gyPPciQLIqrLcPccSdnjjDL1GKrHZBqHlPQpV+pJpNnHqOvMRy9IRNFqdwpO5&#xA;j9G4tbYOvLpOnYbqob6jf/8AKgP8Q+g36S+uf409Knxf8dT9L04/zfV/hpir2rFXl352eb/qEuh+&#xA;WdNtNPufMetyyvaXeqxpJaadbW6crm+lDig9NK8enfrShVSnyv8AkXZXEbatJ5l1+CeVjJYXNrcD&#xA;TiGkC+tcJaQRpDEs5RaRlD8Cry32VVjfnvzDrWm655e0bWNcs9Yu9J1JPqWrxmJXf1OJjTUIYyVg&#xA;lgmiRixAR132KsMVeNeXfMvmnUvMOl6mL71tVtNCudP1g3UhA9Zri9SE3RflRbdCly7PTisdQQ3H&#xA;FXs3kL8wtJufqdrfX97daWESz0hppp4JdRS3ASS4hsoZIobXT7cREtPc82ZQ1W5Bhir0/wApnQNJ&#xA;0PWPO8ln+j7G5je5SQq73B0yzVjDJJWsjNKOcwDfFRwp3XFU3t/PejNpSahq8M2h289utzFHqfoo&#xA;8kLJzYhYpJt0X7an4l7imKsT8s/lx+XH5XvqvnTR7q9TTdQiUCwjmNzaUuZU9FbSCNSzvI5RI/iY&#xA;70HXFUR5t896DPa6VeTetY/ovUmu9RgvImhuLeKxtDcSMUb+cXEEa0O7SqO9MVYh/wA45eafKHl/&#xA;yppnlPUNXSHzPq9xPerpskc0YVrg80hSZ0WKRvTCn4W3JoK4q9o1rXLHSLVZ7ks8krCK0tIgGnuJ&#xA;mBKxQoSOTmnyAqzEKCQq+ZvP3nfzefzj8u+WvLxe98yHUbbUfMtraSssJMZBg04yqK/V7W25GVmW&#xA;nJ3cgdAq9K8t6ZJ5h81adbJL9b0by0TdXd/QKt3ezzfW2mUDoLi8C3CAGixxqwqk64qybVPzZ0nT&#xA;/NWo+W30bWbq70xIJbiexsjdxmO5UMjosDSTFa8lJ9PqpGKoPWvzp0zT7KS5j0DWiFG0t/aHSLYM&#xA;egkudTNpGo8Tvirxj8utJ1Hzr51EiW8eu6boifXbi/kqdJk8xajS4ubuWpU3P1ZX9GKNF3Cpuinn&#xA;ir6MuhpWi6OmmSwtqct2Ja2bCJpLpm+O4kkDlIlWrVctxRahe6rir5O8/wCr+X/rd9pWjT2J0u+t&#xA;LnTV0/T9Rjvvqod/XhjtwFhZ4vrYD+lGJONWVOoCqsa01106e2vr6zgudf12G2lsNKkMjQvHaxCN&#xA;Gu4+Kv6MU9u0rwFWMrpGq8lDFlXtP5aal+YM181rYsZdZuFZtR1PUV53skrgqsl1ECRp9jb15QWp&#xA;4yysBRVUuVVeheefyg0vVtA0yCytIb3WNLW3s7S91IC6EdtJcRm9nME3K3mnZFaT96jVYYqoal+X&#xA;ejx3y21h5X0vVLvTJbO8g1Flh068QSz8SqSWMMPFoRE0nL4ajitCanFWaebW8yejZQ6JcQ2Cy3B/&#xA;SWpzxiYW9rHFJIzLGzIpZnRU5MaLWtDirwjzJ+Ydx520+8s7e4Vbb6neaHN5kEM8dg1rPcqbu6Z4&#xA;UuSnrQWkKxr0BaQsQoTkq9S8iy+dNItrO31EeX28iW1go0/VNLnnT0oYUUQmQT843jaP9tX9zirv&#xA;NPnnTLjQbzUp7ptL8kW6E32usTFLerT/AHn09dpCJfs+sKV/3VWvqIq8B8oWN95i89XP5peYrH9H&#xA;aOyiHyv5cI9P17aNRBAjIikrZxpxV2CH1WPpors/AqvShomo6vfzeVJmZ/MXmgJc+cLg8Q+n6IG5&#xA;GCQoXCXF+aoIwx4p8NSkSMVXuP1S1+q/VPST6r6fpehQcPTpx4cenGm1MVYj5n1DzRC5tLLXbWK6&#xA;cbW1ppE97div2TtdmOME0+OVOHv4Ksc8rflR6PmCfz1+YGoyaxqcMQXT49TaAx2ECH1WdxEsdssn&#xA;L4vgHGPszH48VTO78+w+ZNF1HUtAj+teW7BDzvGniskv5q0EMUszJ6VuD/ezNTkNo+Qrir5r863n&#xA;mS/hb9LeY4WsmkWJbXS9JSTy/p/JgI4RdTpGrlAakRI54hm5MRQqrvzS8v2Wg29npOgA6polqi3X&#xA;mKWPVLJ3gvbySM/VLuRhMy24khVxzojyOT1oAqnn5UP5jOszR6j5H/SKXES3qWthexL9dt7dkX1W&#xA;nunkF/HE/D9zHdCJTT919mir23Vvzsi0yCZtX8jeZ7W3iWlzNLZ2rWyhtvinF0YqEmn2t8VQPlj8&#xA;zJPMWtzRp5O1O3isLVra00aRLGK5ME/pu0s0Vxcw+lGyoixqBx6/EagKqy+8vtYfS99GtdH021Ec&#xA;hl1i5iVbcW7LIknpWpniYRMgIBnTp1GKvPLTyt+W+rec455/MN/5p8x60xvJdQ0qZRZWYhQJG4No&#xA;aW6BVCR85HbxO9cVdoH5m6p9VfT53S+08a1eW2ieddXiL2C2doYlSWSSBY1mm9SSREblErBCxk23&#xA;VVL3VdUQ3N1pOr6ff6tJE6T+a4TPrc9vDSrLBb29vBZWS96POF6NIW+1irHvy7/LYzfXR5fido9V&#xA;LfpzzZfyLcz3XNyZE9SOsUqsfiMVuzxsaerO4DQsq970HQdN0PTU0/T4+EKlnkdt5JZXPJ5ZG/ad&#xA;23J/hiryf879N8/3V9bXfl/yt6tzbVjtPNWm31b23hcgyRzWDRw+ujHf0i8iH2JxVL7ESSwWyXnk&#xA;y9e6gREu9btvLlpDfXDqN3QztFHb+FFik26MD0VZXpfnry7pemr5b8u6efL/AJgmLfo3TfM0d1ps&#xA;dzPIavIbsx3AuZGYlm4uzuep74qxXztqEFloV1pfn6a7stT1Z1S/1SaRrPSruFOlpBc2UV/LBarz&#xA;/u39J335MeW6ryiNdGsfMHlq806102502S/tnsdP0mxa0Zo0m9GO5gu7oNeyelcMpNxccI2YcF5q&#xA;WCqpF5m16x88eYZdasn1LT9Z1mVFfyhHffVi9rFCqQPbzSW6QkvGo4Q0Yt+yTXjir1L8lfKP1Gwi&#xA;srHzhrmgRXE7JY27COAx3gHOexvbG8S5hS4C0eNoyPVSp41U4q9D1ryT+ecNs76X+Yr3hJ3hfS9N&#xA;hlEfUmNvT4PJ2CsY1/ylxVJPy8vtYtbq/wBI1zzRqtndJcsbi+eDTw0srsqo1169vPLAzLxVQxaM&#xA;LwVZKNGGVZP+Ydxo3lmzsW1O2l8zXmpTvDbwateelYloYJLgtLHxa1DcYjwC25ZmoAPBVjOn/nZq&#xA;kt7d3ywQpoklosOg2TKLOxkmoD68mo6h9QcJGyyIyrB0pxqwIKqVeXdP0PQ9N0u1uvNnl3zbY6da&#xA;RxRaI180aW127u8stqlqt2Zjzl/ds8HNABxK74qjdZslvpU1a506OO3tyCmoa093Jb2pbflHe+Yi&#xA;EStK8odNloPfFXeW7bVtavvrflQNrGpyMGl856hHKmk2rBSnqWcc5NxqM6qzqkjfu1BohjQ8MVet&#xA;+T/J+neWNPkt7eSW7vbuT6xqmqXLc7m7uSoVpZWPsKKo+FRsBTFU9xVp2CIzGpCgk0BY7eAFScVe&#xA;a+a/+ciPyw8ryNBql1epeL/x6HTr2KQ/I3EUKf8ADYq8k1bzj5u/NfX1v/JvleTyrptope98+3Pr&#xA;W94ltECzcZLd4VkooI9HlJXvxFTiqzV/y7/MDVdNs7bWL68uZdTsVnudQvpy05N/JT6mGrS3tbC2&#xA;Hr3ZUKJX+E1BUBVKbn8ptdvdMn83eWhfWOl+Y7u7v4o7SJr+3a3a7lNvFe6eo9SSF4QkkbRxSCjc&#xA;Xj2DFVnv5XeVdT0+xuraHTbrTLppFu7YaXBqcMEV8i8TPBBrllYxxCVGKSp9YZHXYKtBRV7T5buP&#xA;N00Df4isrO1kFfTe0nkdnFdjJC0fGIkdVWaQD+Y9cVYF+Ynk+z8vGLzRo9q0dlauo1KxtaRtFGzU&#xA;+sWjDj6LKWNQpCjkWNFaZZVU9vbb/Gflqfy3d3ypcypZ6jp+qpCkkV3bxzx3Vvc+hJ8DjnEqTxH8&#xA;FdcVYjqH5H38Fs19eanJ5jnjZ5J7V0dXMLHk8FlHczXVqi9xFJEyufhLKDXFU1ttSsH1Hyxoumec&#xA;dWutP80Wl1JpUlnHpCQxw2kaNQiOwjliXgxUEU4sOJocVZdH+XnlhpI5dQhm1maI8o21W4nvkV/5&#xA;0hnd4Y226ogxVkmKuxV2KvGPPH5eefLHzBqGt6Bqus6nouoDnJo1tqlxFNYy1q72kLzQwzRNufS9&#xA;WNlP2Wp8OKvMh5Q/MHX7i7m8rLoN9rdg4+sw6tHfy6/bcySHeDXpLuJD4OjcSfsnFU1g/KHSrLy/&#xA;qPnX8wfM82reY2kh0+5m1ANGNLNxLGlxxSQszTxQSs8JWi/ZaMGqNiqZanp3lKee91fyel3eXEx9&#xA;WC6uLK7sbCzWC2aztPWu7mGCCGysI+UwRGZ5H4nooxVjN5ovlS+8v2N3rWk3dhpNzIIdHnu9Ll1W&#xA;zvlkkMdvPbtZT2l9aTXnH1Hg9UIzHmAS1cVZhdedPyr8nWr+VvNHmxJXk9OG9060tb28aBVNfSnN&#xA;9ca2IxCTukbhlPTfFXsHkC78p3nlq3uvKuoyapo71ENzLd3N49V+EqXunklUj+Q0p4Yqxr84LBdM&#xA;trXzvaRB7rSZI4NShIqt1YTyCJ4ZFoQ28nH4qhVZzSvEhVPrLT9HvRN5Y1e3t9X0tI47zRxdolzH&#xA;JZt8IU+pzEj27fDzp/dtHUlixxVJtTfyoPKFx578lC0hm06Gee2u7SMQRXaWbMktpMFVfUjdomjF&#xA;VPFqMm4GKsE1b8xde84eYdR0Py9ezQ/pCLT9Ph0/T7lZri0mivPUvr6S6sSy2kKwco/jk9SQ0oo6&#xA;Yq9O078ofy5sbqO8/Qsd7exbx3epPLqMynrVZLx52U/LFWYABQABQDYAdAMVdirsVdiqXeY9S03T&#xA;PL+o6lqkfq6dZW0txdxBBIWiiQs6hDsxIHQ4q8481sNO0u/0ryrY3KWesaLNLc6VYQLcfUp5+K2x&#xA;W3jLLEbpPXSqgx80DkU5kqpzpv5TaJdWET+YL3XNXa5jR7vT9V1W6mg5sAWSS2hkitXAOxX0+Hti&#xA;rOZZLSxs3lcpb2lrGWY7Kkcca1PToFUYq+b/ACc/nj8/NX1fWLvzBf8Alv8AL+wuDaWGm6VJ6E07&#xA;AB/3slDyIRlZuYYVI4gYqz78vbjVfLv5m6h+X/8AiS480aOml/pSObUJFuL6wnW4SH6rNOv2hIkn&#xA;NQ4BFNhTqq9O1axs9Q0q9sL3/eK7glguqkD91KhR9z0+EnFXmv5Y3t5eflt5K8wz8mu7ad7OcMaO&#xA;ba5uXsvRBYD4Ek9F+PhGO9MVTOyT8z9G1rzHF9VbXoNWvPrOgXktzDHZ2MLoE9GeNitwojK8v3Kv&#xA;z/yTU4qyXyr5N0Py5YWkFnaW4vbe0gs59SSCOOe4WCNU5Suo5HlwrQk4qnmKuxV2KuxV2KvEfzdu&#xA;r/QvzI03zVdNJa2NnZ20Ol6hGBHCCbwtqdtPM1IlkmtuAh+ssIftEUejBVA33nJfN2ryan5ftNSv&#xA;yLiykSHSrS3vIozYSNJFzv2mW0huZfUljlZXlT0WRSOQYYqy7yZ+S3l+Py9pjebrN9T1pF9a7tru&#xA;+vL2zSRnLrGLeaZ7ZhCCqA+n+zXFWL/85Ca7daZc3N7bv6X+FtBk1DTFWo4X+pXaaZDcAD9q3iaQ&#xA;p/KzVxVMv+cWvJ2haZ+V+m6/DCkuta4Jri/1FgGlb986CMORyCqEFRX7VTiqb/lLY2kXmjzpqVrc&#xA;aTHb6vd28ttpGkXkd2sQt4vRkuH9NYwjXD/ERwHvviqZ/nfqkOmflfrdzIfiKRRwqOrSSToqgDau&#xA;5r8sVU9Wa68n+WPL14Vae90fTbixmNOSFYdMe6cuOu8unxioYdaV3xVgGg+UfzDuvL9lYaXoraPY&#xA;XBW+tobjVIrrRrSWek/rxWyxfXZSkjerHbyyeksm/bFXs/lTy1p/lny5p+g2FTbafAkKyN9uRlHx&#xA;SP4s7VZvc4qm2KuxV2KuxV2KtOiSIyOodHBVlYVBB2IIOKoPStD0XR4Ht9J0+206CRvUeK0hjgRn&#xA;oF5FYwoJooFcVRuKoLXNLTV9E1DSpJXhj1C2mtXmjpzQTRmMste45VGKvnX/AJx980Q/lpfeaPyx&#xA;82sLXUbC5l1HS2IC/XEMKhlhLFVZnSFXjXvUjtir3bQ9C1yG5XVNR1RmvroBtQsI4LVbUHieMaSL&#xA;CtywirRWeY18N6BVjX5yec2stGTyloZF15x81obHSLJDVkimqk13IR/dxRJyPM9x7Giqbp5fs9D8&#xA;teWfKVqBKsVxZQxyOKV/R7C9kmZQSav9WP8As2HbFWX4q7FXYq7FXYq7FXYq7FXYq7FXm35t6FEk&#xA;1t5nnsX1PR4bS50nzVp0aepJJpV2UczxpuWe1miWTYV4lqb0xV4joPnG/wDyp0SXylrYl1z8stYu&#xA;Fm0LzTp5EsbWUs6m6gbifhMsXNXQMHRixFag4q9hk/5yR/JuOziu7PUvrCRrwUCB7YxxmleP1oW/&#xA;JfhFVi5Hb7JxVC6ems/mx5o03W7uxn0v8udAmF5pdreKY7jVr5P7q4eI7pbxVqgb7XuCQqqK/NzU&#xA;m1CG50rTn9S9vo38saeijlyv9X4fWJB3X6lZRtI7rtRytQQRir1G0tYbS1htYRxht41iiXwVAFUf&#xA;cMVVcVdirsVdirsVdirsVdirsVdirCfzM/J7yV+YlkkWu2zJfQKVtNUtiEuYgd+IYhgyVNeLAj6c&#xA;VeQ2n5M+atIEuk6/+aF9YabExWBNQhaaymgr+7MUlzdPaq/EbxNHzQgkVXi5Vej+S/L35Y+RpLif&#xA;Tb5te8zXihbi8Mi6jqkygfDGiQgmOIcRsqqgoORoKhVmej2GoTX8mt6sohvJIzBZ2KvzW1tmYOVd&#xA;h8LTSMqmUr8I4qq1483VTrFXYq7FXYq7FXYq7FXYq7FXYq7FXnfmn8qrUPcar5QgtrLU7ksdU0ec&#xA;N+idVjkH7yK7t1rGrt1WZU5A9eQxVhGhal5E8pTRwa35T0vy5ewkBZ9bs0tJUKn9jVLe2ubW9AJo&#xA;svON6U5hmJbFWR3/AOb0Or8rHQLhNSmbb0vLXrapdSAnZfrEkNvZ2Y/mklZqA7AGjYqnPkPyHf29&#xA;9D5k8yRRQ6tBC9to+j28jTW2l20zcpFEr7z3Ux3uLg7sdhtUsqz/ABV2KuxV2KuxV2Kv/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -563.516 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 563.516 li
515.876 563.516 li
515.876 0 li
clp
[1 0 0 1 0 0 ] concat
176.904 517.752 mo
178.2 514.8 178.272 511.848 177.408 509.112 cv
177.912 509.688 178.488 510.192 179.136 510.624 cv
181.728 512.208 185.04 512.28 187.416 510.192 cv
188.352 509.256 189 508.104 189.072 506.736 cv
189.144 505.008 187.92 502.776 185.832 503.064 cv
184.824 503.208 184.248 504.216 185.328 504.792 cv
185.832 505.08 186.264 505.584 186.696 506.016 cv
188.424 508.104 186.408 510.408 184.248 510.984 cv
181.152 511.776 178.272 509.976 176.688 507.384 cv
176.112 506.304 175.68 505.512 174.816 504.576 cv
173.88 503.424 172.728 502.416 171.432 501.624 cv
167.472 499.32 163.08 498.888 159.048 500.112 cv
159.12 500.472 li
160.488 500.04 161.928 499.824 163.44 499.824 cv
170.208 499.896 176.256 504.216 177.264 511.128 cv
177.768 515.52 175.752 520.344 171.216 521.712 cv
168.408 522.576 164.448 521.352 164.952 517.824 cv
165.096 516.96 165.24 516.168 165.672 515.448 cv
166.464 514.008 165.096 513.288 163.8 513.792 cv
161.208 514.944 161.424 518.328 162.72 520.344 cv
163.8 521.856 165.312 522.72 167.112 523.08 cv
171.288 523.8 175.032 521.424 176.904 517.752 cv
false sop
/0 
[/DeviceCMYK] add_csa
0 0 0 1 cmyk
ef
.216 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
176.904 517.752 mo
178.2 514.8 178.272 511.848 177.408 509.112 cv
177.912 509.688 178.488 510.192 179.136 510.624 cv
181.728 512.208 185.04 512.28 187.416 510.192 cv
188.352 509.256 189 508.104 189.072 506.736 cv
189.144 505.008 187.92 502.776 185.832 503.064 cv
184.824 503.208 184.248 504.216 185.328 504.792 cv
185.832 505.08 186.264 505.584 186.696 506.016 cv
188.424 508.104 186.408 510.408 184.248 510.984 cv
181.152 511.776 178.272 509.976 176.688 507.384 cv
176.112 506.304 175.68 505.512 174.816 504.576 cv
173.88 503.424 172.728 502.416 171.432 501.624 cv
167.472 499.32 163.08 498.888 159.048 500.112 cv
159.12 500.472 li
160.488 500.04 161.928 499.824 163.44 499.824 cv
170.208 499.896 176.256 504.216 177.264 511.128 cv
177.768 515.52 175.752 520.344 171.216 521.712 cv
168.408 522.576 164.448 521.352 164.952 517.824 cv
165.096 516.96 165.24 516.168 165.672 515.448 cv
166.464 514.008 165.096 513.288 163.8 513.792 cv
161.208 514.944 161.424 518.328 162.72 520.344 cv
163.8 521.856 165.312 522.72 167.112 523.08 cv
171.288 523.8 175.032 521.424 176.904 517.752 cv
cp
@
43.0557 527.688 mo
44.6396 526.032 45.3599 524.016 45.4316 521.928 cv
45.6479 522.432 45.8638 522.936 46.2241 523.368 cv
47.5918 525.096 49.896 525.888 51.9121 525.096 cv
52.8477 524.664 53.4961 524.016 53.9277 523.152 cv
54.3599 521.928 54.0718 520.128 52.5601 519.84 cv
51.9121 519.768 51.2637 520.272 51.8398 520.92 cv
52.1279 521.28 52.272 521.64 52.4878 522.072 cv
53.1357 523.872 51.1919 524.952 49.6079 524.808 cv
47.376 524.664 45.792 522.72 45.3599 520.632 cv
45.2881 519.696 45.0718 519.12 44.7837 518.256 cv
42.6958 512.784 36.6479 510.768 31.3198 509.832 cv
30.8159 509.76 30.3118 509.688 29.8799 509.688 cv
29.448 510.048 li
29.5918 510.048 29.8799 510.12 30.24 510.192 cv
34.9199 511.2 40.6797 512.136 43.4878 516.384 cv
44.7837 518.328 45.4316 520.776 44.856 523.296 cv
44.208 526.392 41.6157 529.128 38.2319 529.056 cv
36.1438 528.912 33.6958 527.184 34.9199 524.88 cv
35.2078 524.376 35.4958 523.872 36 523.44 cv
36.8638 522.648 36.0718 521.856 35.136 521.928 cv
33.1199 522 32.3999 524.376 32.8318 526.104 cv
33.1919 527.328 33.9839 528.264 35.136 528.984 cv
37.7998 530.424 40.896 529.704 43.0557 527.688 cv
ef
43.0557 527.688 mo
44.6396 526.032 45.3599 524.016 45.4316 521.928 cv
45.6479 522.432 45.8638 522.936 46.2241 523.368 cv
47.5918 525.096 49.896 525.888 51.9121 525.096 cv
52.8477 524.664 53.4961 524.016 53.9277 523.152 cv
54.3599 521.928 54.0718 520.128 52.5601 519.84 cv
51.9121 519.768 51.2637 520.272 51.8398 520.92 cv
52.1279 521.28 52.272 521.64 52.4878 522.072 cv
53.1357 523.872 51.1919 524.952 49.6079 524.808 cv
47.376 524.664 45.792 522.72 45.3599 520.632 cv
45.2881 519.696 45.0718 519.12 44.7837 518.256 cv
42.6958 512.784 36.6479 510.768 31.3198 509.832 cv
30.8159 509.76 30.3118 509.688 29.8799 509.688 cv
29.448 510.048 li
29.5918 510.048 29.8799 510.12 30.24 510.192 cv
34.9199 511.2 40.6797 512.136 43.4878 516.384 cv
44.7837 518.328 45.4316 520.776 44.856 523.296 cv
44.208 526.392 41.6157 529.128 38.2319 529.056 cv
36.1438 528.912 33.6958 527.184 34.9199 524.88 cv
35.2078 524.376 35.4958 523.872 36 523.44 cv
36.8638 522.648 36.0718 521.856 35.136 521.928 cv
33.1199 522 32.3999 524.376 32.8318 526.104 cv
33.1919 527.328 33.9839 528.264 35.136 528.984 cv
37.7998 530.424 40.896 529.704 43.0557 527.688 cv
cp
@
33.9839 432.648 mo
34.6318 423.576 42.1201 417.6 50.832 416.952 cv
56.8081 416.808 62.1357 419.04 66.168 422.784 cv
78.1201 434.016 82.8721 451.368 77.688 467.064 cv
77.04 469.008 76.248 471.096 75.0239 472.824 cv
75.5278 470.232 li
76.3198 469.152 77.2559 466.92 77.3999 466.488 cv
81.6479 454.176 78.9839 440.136 71.7119 429.48 cv
69.3359 426.024 65.1597 421.848 61.4878 419.976 cv
53.4238 415.656 43.416 416.952 37.7278 424.512 cv
34.344 429.48 33.6958 436.464 38.0879 441 cv
40.9678 443.88 46.4399 444.96 48.0957 440.424 cv
48.4561 439.344 48.8159 438.264 48.8159 437.112 cv
48.7437 434.88 50.9038 434.952 52.0557 436.392 cv
54.4316 439.344 51.9839 443.304 49.104 444.816 cv
46.8721 445.896 44.5679 446.04 42.1919 445.32 cv
36.792 443.448 33.8398 438.192 33.9839 432.648 cv
ef
33.9839 432.648 mo
34.6318 423.576 42.1201 417.6 50.832 416.952 cv
56.8081 416.808 62.1357 419.04 66.168 422.784 cv
78.1201 434.016 82.8721 451.368 77.688 467.064 cv
77.04 469.008 76.248 471.096 75.0239 472.824 cv
75.5278 470.232 li
76.3198 469.152 77.2559 466.92 77.3999 466.488 cv
81.6479 454.176 78.9839 440.136 71.7119 429.48 cv
69.3359 426.024 65.1597 421.848 61.4878 419.976 cv
53.4238 415.656 43.416 416.952 37.7278 424.512 cv
34.344 429.48 33.6958 436.464 38.0879 441 cv
40.9678 443.88 46.4399 444.96 48.0957 440.424 cv
48.4561 439.344 48.8159 438.264 48.8159 437.112 cv
48.7437 434.88 50.9038 434.952 52.0557 436.392 cv
54.4316 439.344 51.9839 443.304 49.104 444.816 cv
46.8721 445.896 44.5679 446.04 42.1919 445.32 cv
36.792 443.448 33.8398 438.192 33.9839 432.648 cv
cp
@
166.752 492.84 mo
166.752 492.84 161.928 490.824 159.192 491.256 cv
150.192 492.624 154.368 505.296 162 499.968 cv
163.368 499.032 164.808 498.096 164.808 498.096 cv
164.808 498.096 161.712 499.176 159.984 499.176 cv
154.872 499.176 154.728 494.424 159.192 492.768 cv
163.296 491.184 167.328 494.856 171.432 495.288 cv
177.048 496.008 183.528 490.68 182.592 484.848 cv
181.44 478.08 173.232 477.936 167.976 478.8 cv
165.456 479.232 163.728 479.952 163.728 479.952 cv
163.728 479.952 164.088 479.16 164.448 478.08 cv
165.816 473.904 164.304 469.44 158.976 470.232 cv
156.6 470.52 154.512 472.32 154.44 475.92 cv
154.44 477.864 155.52 479.088 155.52 479.088 cv
155.52 479.088 155.448 478.296 155.52 476.568 cv
155.808 471.6 163.152 469.656 163.872 474.192 cv
164.736 479.808 159.552 482.688 155.016 484.2 cv
145.584 487.44 136.944 487.152 127.584 487.584 cv
127.584 487.584 128.952 486.432 130.32 485.208 cv
132.048 483.696 132.84 482.256 133.488 480.024 cv
133.704 479.088 133.848 478.512 133.848 477.576 cv
134.136 475.416 135.504 473.4 137.736 473.04 cv
139.32 472.752 141.336 473.688 140.832 475.488 cv
140.688 475.92 140.544 476.352 140.256 476.712 cv
139.752 477.432 140.4 477.864 141.12 477.72 cv
142.56 477.288 142.704 475.488 142.128 474.336 cv
141.696 473.472 140.976 472.896 140.04 472.608 cv
137.88 471.888 135.72 472.896 134.496 474.768 cv
134.208 475.2 133.992 475.704 133.776 476.208 cv
133.56 474.192 132.624 472.248 130.896 470.736 cv
128.664 468.936 125.424 468.432 122.976 470.16 cv
121.896 470.88 121.176 471.96 120.888 473.256 cv
120.6 474.912 121.536 477.216 123.552 477.216 cv
124.488 477.144 125.208 476.28 124.272 475.56 cv
123.768 475.2 123.48 474.696 123.12 474.192 cv
121.68 472.032 123.912 470.088 126.072 469.8 cv
129.384 469.44 132.192 471.888 133.128 474.984 cv
133.92 477.432 133.488 479.88 132.336 481.968 cv
130.392 485.496 125.424 486.72 121.752 487.08 cv
112.68 487.944 102.456 486.216 94.248 483.696 cv
94.248 483.696 94.752 483.192 95.7598 482.688 cv
103.824 478.512 108.504 473.544 111.456 465.048 cv
112.536 461.88 115.272 457.92 115.272 457.92 cv
115.272 457.92 109.872 459.864 107.784 459.864 cv
101.952 459.864 95.2559 460.44 90.144 463.536 cv
88.7759 464.4 86.6157 466.776 86.6157 466.776 cv
87.3359 459.936 86.3999 452.736 78.1201 451.296 cv
72.5757 450.432 71.3521 450.432 67.5356 446.256 cv
67.5356 446.256 69.6958 453.24 68.3281 455.544 cv
65.0879 461.016 64.2959 468.432 67.752 473.904 cv
69.0479 475.92 71.7837 477.648 71.7837 477.648 cv
63.3599 474.048 64.6558 469.224 64.4399 461.52 cv
64.3677 457.92 64.7998 449.496 61.272 447.336 cv
59.2559 446.184 56.5918 446.832 54.0718 448.272 cv
46.584 452.592 46.0801 458.352 42.2637 465.048 cv
38.5198 471.456 33.1199 476.28 25.344 478.152 cv
21.168 479.16 11.9519 483.12 8.20776 482.976 cv
5.97583 482.832 0 482.616 0 482.616 cv
0 482.616 6.6958 483.912 10.0078 483.84 cv
18.5759 483.552 25.2 481.392 32.1118 476.712 cv
41.3999 470.376 42.1201 463.896 48.8877 455.76 cv
58.6079 444.168 63.0718 453.312 63.2158 461.52 cv
63.2158 464.76 62.9277 472.32 65.6641 474.768 cv
66.6719 475.704 67.0317 476.064 67.0317 476.064 cv
67.0317 476.064 65.4478 475.344 63.6479 474.768 cv
52.9199 471.312 48.4561 482.544 41.1118 487.44 cv
38.8799 488.952 32.8318 492.336 32.8318 492.336 cv
32.8318 492.336 37.0798 491.904 39.24 492.84 cv
41.3281 493.848 43.1279 495.072 46.8721 496.512 cv
50.6157 497.88 54.144 497.448 54.144 497.448 cv
54.144 497.448 49.6797 498.168 46.6558 499.68 cv
37.7278 504.144 34.1279 505.8 24.1199 506.736 cv
21.7439 506.952 16.9199 507.384 16.9199 507.384 cv
16.9199 507.384 25.1279 510.048 28.9438 510.264 cv
38.9519 511.056 46.3677 508.032 51.1201 502.056 cv
52.8477 499.968 56.6641 498.168 56.6641 498.168 cv
56.6641 498.168 54.5757 501.84 53.9277 502.848 cv
51.4077 507.096 52.3438 511.92 50.688 515.952 cv
50.1118 517.608 49.3198 519.624 49.3198 519.624 cv
49.3198 519.624 52.5601 516.744 54.5757 516.384 cv
56.5918 516.096 61.9917 515.304 64.8721 514.944 cv
67.752 514.512 70.8477 512.496 72.4316 509.832 cv
74.0161 507.168 74.5918 505.872 74.376 503.28 cv
74.1597 500.76 73.728 496.584 73.728 496.584 cv
73.728 496.584 74.3037 498.888 75.6719 500.832 cv
84.312 513.792 100.584 506.304 108.648 504.288 cv
111.24 503.64 116.136 502.056 116.136 502.056 cv
116.136 502.056 110.376 502.416 107.784 501.192 cv
105.264 499.896 101.232 496.296 100.008 493.92 cv
97.416 488.592 97.0557 489.096 92.0161 485.64 cv
92.0161 485.64 99.7197 488.16 102.888 488.592 cv
111.312 489.744 120.24 489.816 128.664 489.312 cv
137.232 488.808 145.656 487.8 153.936 485.424 cv
159.624 483.768 163.512 481.104 169.704 480.312 cv
174.24 479.736 178.992 480.024 179.856 484.56 cv
180.72 489.168 175.176 495.072 171.072 494.64 cv
167.544 494.28 166.608 489.168 170.208 489.672 cv
171.288 489.816 171.504 491.184 171.504 491.184 cv
171.504 491.184 172.728 489.96 171.936 488.952 cv
169.488 485.424 165.384 489.096 166.752 492.84 cv
ef
81.6479 495.072 mo
85.0317 493.272 82.3677 490.752 80.208 490.032 cv
73.9438 488.088 76.9678 485.496 78.6958 480.96 cv
79.6318 478.512 79.5601 477.576 77.832 476.928 cv
76.104 476.28 75.3838 476.28 75.3838 476.28 cv
75.3838 476.28 77.3999 476.856 77.7598 478.44 cv
78.1919 480.744 74.3037 485.064 73.2959 482.688 cv
72.7197 481.536 74.0879 480.456 74.0879 480.456 cv
70.9917 480.456 70.7041 484.776 72.7197 486.432 cv
74.52 487.872 72.2881 490.032 71.3521 489.384 cv
70.416 488.736 70.4878 487.512 69.624 486.288 cv
68.7598 485.136 68.2559 484.488 66.4561 485.28 cv
64.6558 486 63.792 487.08 63.792 487.08 cv
63.792 487.08 66.2397 485.928 66.96 485.928 cv
70.7041 485.928 69.3359 493.272 72.936 491.832 cv
74.8799 491.112 75.312 489.24 76.4639 489.672 cv
76.8237 489.816 84.7437 493.128 80.208 494.496 cv
79.1279 494.856 78.2637 494.496 78.2637 494.496 cv
78.2637 494.496 79.416 495.36 80.064 495.36 cv
80.7119 495.36 81.6479 495.072 81.6479 495.072 cv
0 0 0 0 cmyk
ef
108.216 502.632 mo
107.928 502.776 103.896 501.624 101.736 499.032 cv
99.6479 496.512 98.5679 493.704 96.1201 492.12 cv
93.6719 490.536 89.9277 489.24 87.48 489.24 cv
85.0317 489.24 82.0078 489.312 82.0078 489.312 cv
82.0078 489.312 87.48 489.672 90 490.824 cv
96.7681 493.92 95.2559 496.224 99.5039 499.968 cv
100.44 500.832 103.104 501.912 102.6 501.912 cv
102.096 501.912 96.8398 500.4 93.7437 498.96 cv
90.6479 497.448 83.52 493.92 83.52 493.92 cv
83.52 493.92 89.4961 499.176 91.728 500.184 cv
93.96 501.264 97.7759 502.344 99.6479 502.992 cv
101.448 503.64 103.392 503.568 103.392 503.568 cv
96.624 504.648 89.5679 505.44 83.0879 502.56 cv
79.272 500.832 76.3198 497.664 76.3198 497.664 cv
76.3198 497.664 78.1919 501.408 81.792 503.496 cv
88.7759 507.6 98.4238 506.376 105.696 503.928 cv
105.696 503.928 108.576 502.56 108.216 502.632 cv
ef
112.392 460.44 mo
112.392 460.44 108.144 468.288 107.064 469.944 cv
102.528 477.288 98.1357 480.024 90 482.112 cv
86.3281 483.048 80.1357 483.624 80.1357 483.624 cv
80.1357 483.624 90.8638 481.392 94.5356 479.232 cv
98.1357 477.072 101.736 474.984 103.32 472.176 cv
104.976 469.44 105.912 466.344 105.912 466.344 cv
105.912 466.344 102.312 469.224 99.792 470.736 cv
97.3438 472.176 95.1118 473.904 92.3037 475.776 cv
89.5679 477.648 86.5439 479.304 86.5439 479.304 cv
86.5439 479.304 92.4478 475.2 94.5356 472.536 cv
96.5518 469.872 99.0718 466.344 101.88 464.832 cv
104.616 463.32 106.416 462.816 105.696 462.96 cv
95.9761 464.328 91.7998 466.92 85.4639 474.12 cv
83.0879 476.784 79.7759 478.872 79.7759 478.872 cv
79.7759 478.872 84.168 473.688 85.9678 471.096 cv
90.5757 464.688 97.7041 460.584 105.912 461.232 cv
108.576 461.448 112.392 460.44 112.392 460.44 cv
ef
79.5601 474.84 mo
83.4478 469.656 li
90.936 459.576 79.5601 454.392 73.2236 451.44 cv
70.272 450.072 li
70.272 450.072 70.6318 454.176 69.5518 456.336 cv
66.4561 462.6 66.0239 468.648 70.1997 474.624 cv
70.9917 475.704 72.144 476.64 72.144 476.64 cv
69.624 472.464 67.8237 466.632 69.9839 461.952 cv
73.9438 453.528 75.0239 463.68 75.0239 466.992 cv
75.0239 469.224 75.8877 472.752 75.8877 472.752 cv
75.8877 472.752 76.3198 470.808 76.3198 467.064 cv
76.3198 463.32 76.6797 460.08 75.5278 457.272 cv
74.376 454.536 73.6558 453.312 74.1597 454.104 cv
74.6641 454.824 79.1279 457.056 80.856 458.136 cv
87.4077 462.24 84.0957 467.856 80.7837 472.536 cv
79.5601 474.84 li
ef
66.4561 490.104 mo
66.4561 490.104 63.5757 492.192 61.1279 493.632 cv
53.7119 497.808 51.624 495.288 44.856 493.056 cv
42.3359 492.192 38.5918 491.472 38.5918 491.472 cv
38.5918 491.472 41.5439 490.608 44.1357 487.512 cv
48.5278 482.256 53.7119 474.048 62.1357 476.424 cv
65.0879 477.288 71.2798 479.232 70.416 479.016 cv
69.5518 478.8 65.3037 478.368 62.208 478.368 cv
55.0078 478.368 53.6396 482.616 48.8877 486.576 cv
47.6641 487.656 46.6558 488.304 46.6558 488.304 cv
46.6558 488.304 49.4639 489.456 53.7837 487.656 cv
58.1758 485.856 61.272 484.632 63.2881 484.344 cv
65.3037 484.056 66.2397 483.84 66.2397 483.84 cv
61.8477 485.856 56.8081 490.392 51.9121 490.392 cv
48.6001 490.392 45.936 490.392 45.936 490.392 cv
51.0479 493.416 55.8721 493.704 61.3438 491.688 cv
63.3599 490.968 66.4561 490.104 66.4561 490.104 cv
ef
71.7837 493.632 mo
72 492.192 75.0957 510.624 63.5757 512.64 cv
59.3281 513.432 54.3599 511.416 52.0557 515.376 cv
52.0557 515.376 53.064 511.704 53.7119 509.688 cv
55.7998 502.992 59.2559 497.88 65.4478 494.136 cv
68.1118 492.552 68.4717 492.552 68.4717 492.552 cv
68.4717 492.552 65.52 495.432 63.3599 497.232 cv
60.1201 500.04 57.3838 504.072 59.1118 508.392 cv
59.1118 508.392 61.0557 507.96 63.0718 504.792 cv
65.0879 501.624 68.3999 497.952 68.3999 497.952 cv
68.3999 497.952 66.6001 501.624 65.9517 503.208 cv
65.3037 504.792 66.0239 505.512 63.792 507.456 cv
61.5601 509.4 58.896 511.056 58.896 511.056 cv
58.896 511.056 62.856 510.984 65.0161 509.472 cv
69.4077 506.376 70.272 502.488 71.1357 497.448 cv
71.5679 495.072 71.5679 495 71.5679 495 cv
71.7837 493.632 li
ef
64.2236 474.192 mo
64.2236 474.192 63.792 473.688 63.0718 472.824 cv
57.0239 465.264 48.0957 460.08 37.7998 464.76 cv
28.7278 468.936 31.104 478.728 24.1919 483.912 cv
18.5759 488.16 14.688 489.888 11.2319 490.968 cv
7.70386 491.976 4.896 491.832 4.896 491.832 cv
10.512 490.968 23.616 486.288 24.6958 479.664 cv
26.5679 467.712 30.5278 464.832 38.0159 461.664 cv
48.168 457.344 57.6719 461.952 62.5679 471.024 cv
64.2236 474.192 li
0 0 0 1 cmyk
ef
195.12 486.216 mo
200.736 485.784 205.992 484.272 210.384 480.6 cv
213.264 478.152 215.28 474.84 217.296 471.672 cv
218.16 470.16 218.952 468.648 219.672 467.064 cv
220.248 465.696 223.128 457.488 225.792 460.584 cv
227.088 462.168 227.016 464.904 226.728 466.848 cv
225.072 476.568 215.568 482.184 206.784 484.776 cv
202.896 485.712 199.08 486.216 195.12 486.216 cv
ef
195.12 486.216 mo
200.736 485.784 205.992 484.272 210.384 480.6 cv
213.264 478.152 215.28 474.84 217.296 471.672 cv
218.16 470.16 218.952 468.648 219.672 467.064 cv
220.248 465.696 223.128 457.488 225.792 460.584 cv
227.088 462.168 227.016 464.904 226.728 466.848 cv
225.072 476.568 215.568 482.184 206.784 484.776 cv
202.896 485.712 199.08 486.216 195.12 486.216 cv
cp
@
211.104 469.296 mo
205.632 475.272 199.224 479.304 192.096 483.12 cv
191.088 483.624 182.016 487.584 184.824 489.672 cv
186.984 491.472 190.944 491.688 193.608 491.76 cv
212.904 492.12 230.544 479.232 238.536 462.168 cv
245.16 446.544 243.72 428.832 231.84 416.16 cv
223.272 407.88 210.672 403.776 199.8 410.184 cv
194.76 413.64 190.584 420.336 193.68 426.384 cv
194.184 427.464 195.12 428.616 196.2 429.192 cv
196.92 429.624 196.056 428.472 195.984 428.328 cv
193.032 423.792 194.112 418.968 197.28 414.864 cv
197.352 414.864 196.272 416.232 195.912 416.736 cv
194.544 418.968 194.04 421.056 193.752 423.576 cv
193.68 424.8 193.248 423 193.176 422.712 cv
192.312 414.432 200.16 408.96 207.36 407.592 cv
221.616 405.504 233.712 415.224 239.256 427.68 cv
248.616 450.792 235.728 476.136 214.2 486.648 cv
208.08 489.528 201.024 491.616 194.184 491.256 cv
191.88 491.184 183.168 489.96 188.208 486.36 cv
191.16 484.056 194.904 482.472 198.072 480.528 cv
211.032 472.752 220.032 461.592 223.128 446.616 cv
223.704 443.736 223.92 440.712 224.568 437.904 cv
224.856 436.464 225.576 434.952 226.944 436.608 cv
230.112 440.424 229.464 446.832 229.176 451.368 cv
229.032 454.248 230.112 452.664 230.688 451.152 cv
232.992 445.032 231.984 435.96 227.16 431.208 cv
221.904 426.096 222.912 437.04 222.84 439.128 cv
222.624 450.648 218.88 460.656 211.104 469.296 cv
ef
211.104 469.296 mo
205.632 475.272 199.224 479.304 192.096 483.12 cv
191.088 483.624 182.016 487.584 184.824 489.672 cv
186.984 491.472 190.944 491.688 193.608 491.76 cv
212.904 492.12 230.544 479.232 238.536 462.168 cv
245.16 446.544 243.72 428.832 231.84 416.16 cv
223.272 407.88 210.672 403.776 199.8 410.184 cv
194.76 413.64 190.584 420.336 193.68 426.384 cv
194.184 427.464 195.12 428.616 196.2 429.192 cv
196.92 429.624 196.056 428.472 195.984 428.328 cv
193.032 423.792 194.112 418.968 197.28 414.864 cv
197.352 414.864 196.272 416.232 195.912 416.736 cv
194.544 418.968 194.04 421.056 193.752 423.576 cv
193.68 424.8 193.248 423 193.176 422.712 cv
192.312 414.432 200.16 408.96 207.36 407.592 cv
221.616 405.504 233.712 415.224 239.256 427.68 cv
248.616 450.792 235.728 476.136 214.2 486.648 cv
208.08 489.528 201.024 491.616 194.184 491.256 cv
191.88 491.184 183.168 489.96 188.208 486.36 cv
191.16 484.056 194.904 482.472 198.072 480.528 cv
211.032 472.752 220.032 461.592 223.128 446.616 cv
223.704 443.736 223.92 440.712 224.568 437.904 cv
224.856 436.464 225.576 434.952 226.944 436.608 cv
230.112 440.424 229.464 446.832 229.176 451.368 cv
229.032 454.248 230.112 452.664 230.688 451.152 cv
232.992 445.032 231.984 435.96 227.16 431.208 cv
221.904 426.096 222.912 437.04 222.84 439.128 cv
222.624 450.648 218.88 460.656 211.104 469.296 cv
cp
@
124.848 545.832 mo
114.912 551.16 101.88 548.928 96.1201 538.704 cv
92.5918 532.296 92.9517 522.36 99.7197 518.256 cv
104.4 515.592 112.176 516.024 113.76 522.144 cv
114.336 524.592 112.824 528.12 109.872 526.752 cv
109.224 526.464 109.296 526.536 109.584 527.04 cv
111.168 530.064 115.128 528.624 116.064 526.032 cv
117.432 522.144 116.064 518.76 113.4 516.312 cv
105.624 509.328 93.8877 513.288 89.3521 522 cv
87.3359 525.888 86.5439 530.568 86.9761 534.888 cv
88.1279 533.088 88.4878 535.464 88.7759 536.256 cv
93.0957 546.552 102.24 553.896 113.688 554.328 cv
131.4 554.544 144.288 539.352 144.36 522.216 cv
144.216 510.264 138.24 499.536 128.52 492.552 cv
136.512 498.384 141.984 506.88 143.496 516.672 cv
145.296 529.488 139.824 542.808 128.16 549.072 cv
138.312 542.592 143.28 530.856 141.984 518.976 cv
139.752 502.128 125.856 490.248 109.584 488.448 cv
109.656 488.52 li
126.072 490.536 139.968 502.848 141.336 520.128 cv
142.272 535.536 131.832 550.224 115.776 551.232 cv
114.264 551.304 112.032 551.52 110.664 550.8 cv
108.936 549.936 112.104 549.792 112.536 549.72 cv
116.928 549.288 121.032 548.136 124.848 545.832 cv
ef
124.848 545.832 mo
114.912 551.16 101.88 548.928 96.1201 538.704 cv
92.5918 532.296 92.9517 522.36 99.7197 518.256 cv
104.4 515.592 112.176 516.024 113.76 522.144 cv
114.336 524.592 112.824 528.12 109.872 526.752 cv
109.224 526.464 109.296 526.536 109.584 527.04 cv
111.168 530.064 115.128 528.624 116.064 526.032 cv
117.432 522.144 116.064 518.76 113.4 516.312 cv
105.624 509.328 93.8877 513.288 89.3521 522 cv
87.3359 525.888 86.5439 530.568 86.9761 534.888 cv
88.1279 533.088 88.4878 535.464 88.7759 536.256 cv
93.0957 546.552 102.24 553.896 113.688 554.328 cv
131.4 554.544 144.288 539.352 144.36 522.216 cv
144.216 510.264 138.24 499.536 128.52 492.552 cv
136.512 498.384 141.984 506.88 143.496 516.672 cv
145.296 529.488 139.824 542.808 128.16 549.072 cv
138.312 542.592 143.28 530.856 141.984 518.976 cv
139.752 502.128 125.856 490.248 109.584 488.448 cv
109.656 488.52 li
126.072 490.536 139.968 502.848 141.336 520.128 cv
142.272 535.536 131.832 550.224 115.776 551.232 cv
114.264 551.304 112.032 551.52 110.664 550.8 cv
108.936 549.936 112.104 549.792 112.536 549.72 cv
116.928 549.288 121.032 548.136 124.848 545.832 cv
cp
@
211.824 393.264 mo
204.12 391.608 196.632 392.112 189.144 394.344 cv
189 394.344 185.04 395.784 186.408 394.632 cv
186.984 394.128 187.704 393.768 188.424 393.408 cv
196.848 389.088 206.784 389.232 215.64 391.968 cv
217.08 392.04 216.72 391.752 215.64 391.32 cv
197.712 383.832 171.36 394.56 167.904 414.792 cv
167.904 415.152 167.4 418.608 168.192 418.608 cv
168.84 418.536 170.136 415.296 170.352 414.792 cv
182.52 390.456 213.408 387.864 232.344 406.368 cv
250.056 424.152 250.128 451.8 236.376 471.816 cv
220.176 494.712 191.952 501.984 165.456 496.008 cv
164.952 495.864 159.768 494.424 159.408 494.856 cv
159.264 495 159.624 495.288 159.696 495.36 cv
160.776 496.224 162.216 496.872 163.44 497.448 cv
159.84 495.288 168.624 497.376 168.984 497.448 cv
194.472 501.984 220.68 494.496 236.376 472.896 cv
249.984 453.744 251.064 427.68 235.944 409.032 cv
228.168 399.6 218.448 395.064 206.784 392.832 cv
205.704 392.616 207.504 392.76 207.72 392.76 cv
209.088 392.832 210.456 393.048 211.824 393.264 cv
ef
211.824 393.264 mo
204.12 391.608 196.632 392.112 189.144 394.344 cv
189 394.344 185.04 395.784 186.408 394.632 cv
186.984 394.128 187.704 393.768 188.424 393.408 cv
196.848 389.088 206.784 389.232 215.64 391.968 cv
217.08 392.04 216.72 391.752 215.64 391.32 cv
197.712 383.832 171.36 394.56 167.904 414.792 cv
167.904 415.152 167.4 418.608 168.192 418.608 cv
168.84 418.536 170.136 415.296 170.352 414.792 cv
182.52 390.456 213.408 387.864 232.344 406.368 cv
250.056 424.152 250.128 451.8 236.376 471.816 cv
220.176 494.712 191.952 501.984 165.456 496.008 cv
164.952 495.864 159.768 494.424 159.408 494.856 cv
159.264 495 159.624 495.288 159.696 495.36 cv
160.776 496.224 162.216 496.872 163.44 497.448 cv
159.84 495.288 168.624 497.376 168.984 497.448 cv
194.472 501.984 220.68 494.496 236.376 472.896 cv
249.984 453.744 251.064 427.68 235.944 409.032 cv
228.168 399.6 218.448 395.064 206.784 392.832 cv
205.704 392.616 207.504 392.76 207.72 392.76 cv
209.088 392.832 210.456 393.048 211.824 393.264 cv
cp
@
156.384 443.448 mo
161.136 444.24 164.952 446.688 167.688 450.072 cv
167.4 448.992 167.256 447.84 167.256 446.616 cv
167.4 442.008 170.136 437.76 174.744 436.536 cv
176.76 436.104 178.704 436.32 180.504 437.328 cv
182.808 438.768 184.608 442.152 182.448 444.528 cv
181.44 445.608 179.64 445.536 179.856 443.736 cv
179.928 442.8 179.64 441.864 179.424 440.928 cv
178.344 437.04 173.664 437.688 171.144 439.848 cv
167.544 443.088 167.328 448.272 169.272 452.448 cv
170.208 454.032 170.712 455.328 171.288 457.2 cv
171.864 459.288 172.296 461.592 172.152 463.896 cv
171.72 470.808 168.48 476.712 163.512 480.816 cv
163.224 480.456 li
164.88 479.016 166.32 477.36 167.688 475.488 cv
173.16 466.92 172.872 455.616 165.096 448.488 cv
159.912 444.168 152.208 442.728 146.592 447.12 cv
143.136 450.072 141.336 456.048 146.232 458.352 cv
147.384 458.856 148.536 459.432 149.832 459.576 cv
152.28 459.72 151.992 462.024 150.336 463.248 cv
146.736 465.552 142.56 462.384 141.192 459.072 cv
140.184 456.408 140.328 453.816 141.408 451.224 cv
144 445.392 150.264 442.656 156.384 443.448 cv
ef
156.384 443.448 mo
161.136 444.24 164.952 446.688 167.688 450.072 cv
167.4 448.992 167.256 447.84 167.256 446.616 cv
167.4 442.008 170.136 437.76 174.744 436.536 cv
176.76 436.104 178.704 436.32 180.504 437.328 cv
182.808 438.768 184.608 442.152 182.448 444.528 cv
181.44 445.608 179.64 445.536 179.856 443.736 cv
179.928 442.8 179.64 441.864 179.424 440.928 cv
178.344 437.04 173.664 437.688 171.144 439.848 cv
167.544 443.088 167.328 448.272 169.272 452.448 cv
170.208 454.032 170.712 455.328 171.288 457.2 cv
171.864 459.288 172.296 461.592 172.152 463.896 cv
171.72 470.808 168.48 476.712 163.512 480.816 cv
163.224 480.456 li
164.88 479.016 166.32 477.36 167.688 475.488 cv
173.16 466.92 172.872 455.616 165.096 448.488 cv
159.912 444.168 152.208 442.728 146.592 447.12 cv
143.136 450.072 141.336 456.048 146.232 458.352 cv
147.384 458.856 148.536 459.432 149.832 459.576 cv
152.28 459.72 151.992 462.024 150.336 463.248 cv
146.736 465.552 142.56 462.384 141.192 459.072 cv
140.184 456.408 140.328 453.816 141.408 451.224 cv
144 445.392 150.264 442.656 156.384 443.448 cv
cp
@
84.7437 472.032 mo
85.896 470.304 86.7598 468.216 87.4077 466.272 cv
95.9761 440.136 76.104 410.616 47.9517 411.408 cv
32.688 412.344 18.9358 422.928 17.928 438.84 cv
17.7119 448.416 23.0398 458.28 33.2639 459.792 cv
38.8079 460.368 45.3599 457.488 45.3599 451.152 cv
45.2881 449.64 44.856 448.416 43.9199 447.264 cv
43.0557 447.408 43.7041 447.48 44.2798 448.416 cv
46.7998 453.024 42.8398 457.704 38.448 459.144 cv
29.5198 461.808 21.6719 454.608 19.0078 446.544 cv
15.3359 433.296 22.9678 420.912 34.6318 414.936 cv
51.6958 407.016 70.7759 413.856 81.4316 428.688 cv
88.6318 439.344 91.3677 453.384 87.1201 465.696 cv
86.9038 466.128 86.04 468.36 85.248 469.512 cv
84.7437 472.032 li
ef
84.7437 472.032 mo
85.896 470.304 86.7598 468.216 87.4077 466.272 cv
95.9761 440.136 76.104 410.616 47.9517 411.408 cv
32.688 412.344 18.9358 422.928 17.928 438.84 cv
17.7119 448.416 23.0398 458.28 33.2639 459.792 cv
38.8079 460.368 45.3599 457.488 45.3599 451.152 cv
45.2881 449.64 44.856 448.416 43.9199 447.264 cv
43.0557 447.408 43.7041 447.48 44.2798 448.416 cv
46.7998 453.024 42.8398 457.704 38.448 459.144 cv
29.5198 461.808 21.6719 454.608 19.0078 446.544 cv
15.3359 433.296 22.9678 420.912 34.6318 414.936 cv
51.6958 407.016 70.7759 413.856 81.4316 428.688 cv
88.6318 439.344 91.3677 453.384 87.1201 465.696 cv
86.9038 466.128 86.04 468.36 85.248 469.512 cv
84.7437 472.032 li
cp
@
109.224 488.016 mo
109.584 487.944 li
136.44 484.92 160.704 510.984 154.152 538.92 cv
150.192 553.968 137.232 565.416 121.752 563.112 cv
112.464 561.24 104.112 553.824 104.76 543.312 cv
105.336 537.696 109.44 531.792 115.56 533.088 cv
116.928 533.448 118.008 534.168 118.944 535.392 cv
118.656 536.184 118.656 535.464 117.936 534.816 cv
113.976 531.288 108.72 534.24 106.416 538.272 cv
102.096 546.624 107.352 555.984 114.552 560.304 cv
126.504 566.784 139.968 561.888 148.104 551.448 cv
159.192 536.112 156.456 515.664 144.432 501.84 cv
135.648 492.408 122.76 486.72 110.088 488.376 cv
109.944 488.376 109.8 488.376 109.584 488.448 cv
109.224 488.016 li
ef
109.224 488.016 mo
109.584 487.944 li
136.44 484.92 160.704 510.984 154.152 538.92 cv
150.192 553.968 137.232 565.416 121.752 563.112 cv
112.464 561.24 104.112 553.824 104.76 543.312 cv
105.336 537.696 109.44 531.792 115.56 533.088 cv
116.928 533.448 118.008 534.168 118.944 535.392 cv
118.656 536.184 118.656 535.464 117.936 534.816 cv
113.976 531.288 108.72 534.24 106.416 538.272 cv
102.096 546.624 107.352 555.984 114.552 560.304 cv
126.504 566.784 139.968 561.888 148.104 551.448 cv
159.192 536.112 156.456 515.664 144.432 501.84 cv
135.648 492.408 122.76 486.72 110.088 488.376 cv
109.944 488.376 109.8 488.376 109.584 488.448 cv
109.224 488.016 li
cp
@
168.552 478.152 mo
171.576 476.424 174.168 474.12 175.608 470.88 cv
176.544 468.72 176.832 466.344 177.048 463.968 cv
177.192 462.888 177.192 461.88 177.12 460.8 cv
177.12 459.792 176.544 454.464 178.848 455.472 cv
180 455.976 180.72 457.56 181.08 458.712 cv
182.736 464.616 178.92 470.376 174.744 474.192 cv
172.8 475.776 170.784 477.072 168.552 478.152 cv
ef
168.552 478.152 mo
171.576 476.424 174.168 474.12 175.608 470.88 cv
176.544 468.72 176.832 466.344 177.048 463.968 cv
177.192 462.888 177.192 461.88 177.12 460.8 cv
177.12 459.792 176.544 454.464 178.848 455.472 cv
180 455.976 180.72 457.56 181.08 458.712 cv
182.736 464.616 178.92 470.376 174.744 474.192 cv
172.8 475.776 170.784 477.072 168.552 478.152 cv
cp
@
166.032 447.048 mo
163.872 444.24 161.28 442.008 157.824 441 cv
155.592 440.424 153.144 440.424 150.84 440.496 cv
149.76 440.568 148.68 440.712 147.672 440.856 cv
146.664 441.072 141.48 442.368 142.128 439.92 cv
142.488 438.696 143.928 437.832 145.08 437.256 cv
150.696 434.808 156.888 437.76 161.28 441.432 cv
163.08 443.16 164.664 444.96 166.032 447.048 cv
ef
166.032 447.048 mo
163.872 444.24 161.28 442.008 157.824 441 cv
155.592 440.424 153.144 440.424 150.84 440.496 cv
149.76 440.568 148.68 440.712 147.672 440.856 cv
146.664 441.072 141.48 442.368 142.128 439.92 cv
142.488 438.696 143.928 437.832 145.08 437.256 cv
150.696 434.808 156.888 437.76 161.28 441.432 cv
163.08 443.16 164.664 444.96 166.032 447.048 cv
cp
@
173.52 475.992 mo
175.536 474.552 177.696 473.544 180.144 473.544 cv
181.8 473.544 183.456 474.048 184.968 474.552 cv
185.688 474.768 186.336 475.056 187.056 475.344 cv
187.632 475.704 190.944 477.576 190.944 475.776 cv
190.944 474.912 190.08 474.048 189.432 473.472 cv
186.192 470.736 181.44 471.528 177.84 473.184 cv
176.256 473.904 174.888 474.84 173.52 475.992 cv
ef
173.52 475.992 mo
175.536 474.552 177.696 473.544 180.144 473.544 cv
181.8 473.544 183.456 474.048 184.968 474.552 cv
185.688 474.768 186.336 475.056 187.056 475.344 cv
187.632 475.704 190.944 477.576 190.944 475.776 cv
190.944 474.912 190.08 474.048 189.432 473.472 cv
186.192 470.736 181.44 471.528 177.84 473.184 cv
176.256 473.904 174.888 474.84 173.52 475.992 cv
cp
@
200.304 430.344 mo
202.968 423.072 210.528 419.976 217.8 421.56 cv
222.768 422.856 226.584 425.952 228.96 429.984 cv
236.016 442.008 235.728 457.344 227.808 468.864 cv
226.8 470.376 225.648 471.816 224.208 472.968 cv
225.288 471.024 li
226.152 470.304 227.448 468.72 227.664 468.36 cv
234.072 459.288 235.224 447.192 231.84 436.752 cv
230.76 433.368 228.312 428.976 225.792 426.528 cv
220.248 421.128 211.68 419.76 205.272 424.584 cv
201.312 427.824 199.152 433.368 201.672 438.192 cv
203.328 441.144 207.504 443.376 209.952 440.064 cv
210.528 439.272 211.104 438.48 211.32 437.544 cv
211.824 435.744 213.552 436.248 214.128 437.688 cv
215.352 440.712 212.472 443.376 209.736 443.952 cv
207.648 444.312 205.704 443.808 203.904 442.656 cv
199.944 439.848 198.792 434.808 200.304 430.344 cv
ef
200.304 430.344 mo
202.968 423.072 210.528 419.976 217.8 421.56 cv
222.768 422.856 226.584 425.952 228.96 429.984 cv
236.016 442.008 235.728 457.344 227.808 468.864 cv
226.8 470.376 225.648 471.816 224.208 472.968 cv
225.288 471.024 li
226.152 470.304 227.448 468.72 227.664 468.36 cv
234.072 459.288 235.224 447.192 231.84 436.752 cv
230.76 433.368 228.312 428.976 225.792 426.528 cv
220.248 421.128 211.68 419.76 205.272 424.584 cv
201.312 427.824 199.152 433.368 201.672 438.192 cv
203.328 441.144 207.504 443.376 209.952 440.064 cv
210.528 439.272 211.104 438.48 211.32 437.544 cv
211.824 435.744 213.552 436.248 214.128 437.688 cv
215.352 440.712 212.472 443.376 209.736 443.952 cv
207.648 444.312 205.704 443.808 203.904 442.656 cv
199.944 439.848 198.792 434.808 200.304 430.344 cv
cp
@
163.584 431.208 mo
153.576 424.872 151.344 412.488 156.024 402.048 cv
159.552 394.992 165.456 390.24 172.368 387.936 cv
192.744 381.24 215.784 386.496 230.616 402.264 cv
232.488 404.28 234.36 406.512 235.656 408.96 cv
232.992 406.8 li
232.128 405.144 230.184 402.768 229.752 402.264 cv
218.232 389.664 200.304 383.976 183.528 385.704 cv
178.056 386.28 170.64 388.512 166.104 391.536 cv
156.168 398.232 151.416 410.616 156.6 421.848 cv
160.128 428.832 167.832 433.944 175.896 431.712 cv
180.936 430.2 185.616 424.512 181.368 419.76 cv
180.36 418.752 179.352 417.6 178.056 416.88 cv
175.464 415.584 176.832 413.208 179.208 412.704 cv
184.104 411.84 187.2 417.168 187.128 421.416 cv
186.984 424.656 185.616 427.392 183.312 429.696 cv
177.84 434.808 169.848 434.88 163.584 431.208 cv
ef
163.584 431.208 mo
153.576 424.872 151.344 412.488 156.024 402.048 cv
159.552 394.992 165.456 390.24 172.368 387.936 cv
192.744 381.24 215.784 386.496 230.616 402.264 cv
232.488 404.28 234.36 406.512 235.656 408.96 cv
232.992 406.8 li
232.128 405.144 230.184 402.768 229.752 402.264 cv
218.232 389.664 200.304 383.976 183.528 385.704 cv
178.056 386.28 170.64 388.512 166.104 391.536 cv
156.168 398.232 151.416 410.616 156.6 421.848 cv
160.128 428.832 167.832 433.944 175.896 431.712 cv
180.936 430.2 185.616 424.512 181.368 419.76 cv
180.36 418.752 179.352 417.6 178.056 416.88 cv
175.464 415.584 176.832 413.208 179.208 412.704 cv
184.104 411.84 187.2 417.168 187.128 421.416 cv
186.984 424.656 185.616 427.392 183.312 429.696 cv
177.84 434.808 169.848 434.88 163.584 431.208 cv
cp
@
438.264 511.128 mo
439.56 508.248 439.632 505.296 438.768 502.56 cv
439.272 503.136 439.848 503.64 440.496 504.072 cv
443.088 505.656 446.472 505.728 448.776 503.64 cv
449.784 502.704 450.36 501.552 450.504 500.184 cv
450.504 498.384 449.28 496.152 447.264 496.512 cv
446.256 496.656 445.608 497.664 446.688 498.24 cv
447.264 498.528 447.624 499.032 448.056 499.464 cv
449.784 501.48 447.768 503.784 445.68 504.432 cv
442.584 505.152 439.632 503.424 438.12 500.832 cv
437.544 499.68 437.04 498.96 436.248 497.952 cv
435.24 496.872 434.16 495.792 432.864 495.072 cv
428.904 492.696 424.512 492.336 420.408 493.56 cv
420.48 493.848 li
421.848 493.488 423.36 493.272 424.872 493.2 cv
431.568 493.344 437.688 497.664 438.696 504.576 cv
439.2 508.968 437.112 513.72 432.648 515.16 cv
429.768 516.024 425.808 514.8 426.384 511.272 cv
426.528 510.408 426.672 509.616 427.032 508.824 cv
427.896 507.456 426.456 506.736 425.232 507.24 cv
422.64 508.32 422.856 511.776 424.152 513.792 cv
425.232 515.232 426.744 516.168 428.472 516.528 cv
432.648 517.248 436.464 514.8 438.264 511.128 cv
ef
438.264 511.128 mo
439.56 508.248 439.632 505.296 438.768 502.56 cv
439.272 503.136 439.848 503.64 440.496 504.072 cv
443.088 505.656 446.472 505.728 448.776 503.64 cv
449.784 502.704 450.36 501.552 450.504 500.184 cv
450.504 498.384 449.28 496.152 447.264 496.512 cv
446.256 496.656 445.608 497.664 446.688 498.24 cv
447.264 498.528 447.624 499.032 448.056 499.464 cv
449.784 501.48 447.768 503.784 445.68 504.432 cv
442.584 505.152 439.632 503.424 438.12 500.832 cv
437.544 499.68 437.04 498.96 436.248 497.952 cv
435.24 496.872 434.16 495.792 432.864 495.072 cv
428.904 492.696 424.512 492.336 420.408 493.56 cv
420.48 493.848 li
421.848 493.488 423.36 493.272 424.872 493.2 cv
431.568 493.344 437.688 497.664 438.696 504.576 cv
439.2 508.968 437.112 513.72 432.648 515.16 cv
429.768 516.024 425.808 514.8 426.384 511.272 cv
426.528 510.408 426.672 509.616 427.032 508.824 cv
427.896 507.456 426.456 506.736 425.232 507.24 cv
422.64 508.32 422.856 511.776 424.152 513.792 cv
425.232 515.232 426.744 516.168 428.472 516.528 cv
432.648 517.248 436.464 514.8 438.264 511.128 cv
cp
@
304.416 521.064 mo
306 519.408 306.792 517.464 306.792 515.376 cv
307.008 515.88 307.296 516.384 307.656 516.816 cv
309.024 518.544 311.256 519.336 313.344 518.472 cv
314.208 518.112 314.928 517.464 315.288 516.6 cv
315.792 515.376 315.504 513.576 313.992 513.288 cv
313.272 513.144 312.624 513.72 313.2 514.296 cv
313.56 514.656 313.704 515.088 313.848 515.52 cv
314.568 517.32 312.624 518.4 311.04 518.256 cv
308.736 518.04 307.224 516.168 306.792 514.008 cv
306.648 513.144 306.504 512.496 306.144 511.632 cv
304.056 506.232 298.08 504.144 292.752 503.28 cv
292.176 503.136 291.744 503.136 291.312 503.064 cv
290.808 503.496 li
290.952 503.496 291.312 503.568 291.672 503.64 cv
296.28 504.576 302.04 505.584 304.92 509.832 cv
306.216 511.776 306.864 514.224 306.288 516.744 cv
305.64 519.84 303.048 522.576 299.664 522.432 cv
297.504 522.36 295.128 520.56 296.352 518.328 cv
296.64 517.824 296.928 517.248 297.36 516.888 cv
298.296 516.096 297.504 515.304 296.496 515.304 cv
294.48 515.448 293.832 517.824 294.264 519.48 cv
294.624 520.776 295.416 521.712 296.568 522.432 cv
299.16 523.872 302.328 523.152 304.416 521.064 cv
ef
304.416 521.064 mo
306 519.408 306.792 517.464 306.792 515.376 cv
307.008 515.88 307.296 516.384 307.656 516.816 cv
309.024 518.544 311.256 519.336 313.344 518.472 cv
314.208 518.112 314.928 517.464 315.288 516.6 cv
315.792 515.376 315.504 513.576 313.992 513.288 cv
313.272 513.144 312.624 513.72 313.2 514.296 cv
313.56 514.656 313.704 515.088 313.848 515.52 cv
314.568 517.32 312.624 518.4 311.04 518.256 cv
308.736 518.04 307.224 516.168 306.792 514.008 cv
306.648 513.144 306.504 512.496 306.144 511.632 cv
304.056 506.232 298.08 504.144 292.752 503.28 cv
292.176 503.136 291.744 503.136 291.312 503.064 cv
290.808 503.496 li
290.952 503.496 291.312 503.568 291.672 503.64 cv
296.28 504.576 302.04 505.584 304.92 509.832 cv
306.216 511.776 306.864 514.224 306.288 516.744 cv
305.64 519.84 303.048 522.576 299.664 522.432 cv
297.504 522.36 295.128 520.56 296.352 518.328 cv
296.64 517.824 296.928 517.248 297.36 516.888 cv
298.296 516.096 297.504 515.304 296.496 515.304 cv
294.48 515.448 293.832 517.824 294.264 519.48 cv
294.624 520.776 295.416 521.712 296.568 522.432 cv
299.16 523.872 302.328 523.152 304.416 521.064 cv
cp
@
295.416 426.096 mo
296.064 417.024 303.552 411.048 312.264 410.4 cv
318.24 410.256 323.568 412.416 327.6 416.232 cv
339.48 427.464 344.304 444.816 339.12 460.44 cv
338.472 462.456 337.608 464.472 336.456 466.272 cv
336.96 463.68 li
337.752 462.528 338.616 460.368 338.76 459.936 cv
343.008 447.552 340.344 433.512 333.144 422.928 cv
330.768 419.472 326.592 415.296 322.92 413.352 cv
314.856 409.104 304.776 410.4 299.16 417.96 cv
295.776 422.856 295.128 429.912 299.52 434.448 cv
302.4 437.256 307.872 438.408 309.528 433.8 cv
309.888 432.72 310.248 431.712 310.248 430.56 cv
310.176 428.328 312.264 428.4 313.488 429.768 cv
315.864 432.792 313.416 436.752 310.536 438.264 cv
308.304 439.344 305.928 439.416 303.552 438.768 cv
298.152 436.896 295.2 431.568 295.416 426.096 cv
ef
295.416 426.096 mo
296.064 417.024 303.552 411.048 312.264 410.4 cv
318.24 410.256 323.568 412.416 327.6 416.232 cv
339.48 427.464 344.304 444.816 339.12 460.44 cv
338.472 462.456 337.608 464.472 336.456 466.272 cv
336.96 463.68 li
337.752 462.528 338.616 460.368 338.76 459.936 cv
343.008 447.552 340.344 433.512 333.144 422.928 cv
330.768 419.472 326.592 415.296 322.92 413.352 cv
314.856 409.104 304.776 410.4 299.16 417.96 cv
295.776 422.856 295.128 429.912 299.52 434.448 cv
302.4 437.256 307.872 438.408 309.528 433.8 cv
309.888 432.72 310.248 431.712 310.248 430.56 cv
310.176 428.328 312.264 428.4 313.488 429.768 cv
315.864 432.792 313.416 436.752 310.536 438.264 cv
308.304 439.344 305.928 439.416 303.552 438.768 cv
298.152 436.896 295.2 431.568 295.416 426.096 cv
cp
@
428.112 486.288 mo
428.112 486.288 423.36 484.272 420.552 484.704 cv
411.552 486.072 415.728 498.672 423.36 493.416 cv
424.8 492.48 426.24 491.472 426.24 491.472 cv
426.24 491.472 423.144 492.552 421.416 492.552 cv
416.304 492.552 416.16 487.872 420.552 486.216 cv
424.728 484.632 428.688 488.232 432.792 488.736 cv
438.48 489.384 444.888 484.056 443.952 478.296 cv
442.872 471.528 434.664 471.384 429.408 472.248 cv
426.816 472.68 425.16 473.4 425.16 473.4 cv
425.16 473.4 425.52 472.608 425.88 471.528 cv
427.248 467.352 425.736 462.888 420.336 463.608 cv
417.96 463.968 415.872 465.768 415.872 469.368 cv
415.872 471.312 416.952 472.536 416.952 472.536 cv
416.952 472.536 416.88 471.744 416.952 470.016 cv
417.24 465.048 424.584 463.104 425.232 467.64 cv
426.096 473.256 420.912 476.136 416.376 477.648 cv
406.944 480.888 398.376 480.6 389.016 481.032 cv
389.016 481.032 390.384 479.88 391.752 478.656 cv
393.408 477.072 394.2 475.704 394.848 473.4 cv
395.136 472.536 395.208 471.888 395.28 471.024 cv
395.496 468.864 396.864 466.848 399.168 466.416 cv
400.752 466.2 402.768 467.136 402.192 468.936 cv
402.048 469.368 401.976 469.8 401.688 470.16 cv
401.112 470.88 401.832 471.312 402.552 471.168 cv
403.992 470.736 404.136 468.936 403.56 467.784 cv
403.128 466.92 402.336 466.344 401.472 465.984 cv
399.312 465.336 397.08 466.344 395.928 468.144 cv
395.568 468.648 395.352 469.152 395.208 469.656 cv
394.992 467.64 394.056 465.696 392.328 464.184 cv
390.096 462.312 386.856 461.88 384.336 463.536 cv
383.256 464.328 382.536 465.336 382.32 466.632 cv
382.032 468.36 382.896 470.664 384.912 470.592 cv
385.92 470.592 386.64 469.728 385.632 469.008 cv
385.2 468.648 384.84 468.144 384.48 467.64 cv
383.112 465.48 385.344 463.536 387.432 463.248 cv
390.816 462.816 393.624 465.336 394.56 468.36 cv
395.28 470.88 394.848 473.328 393.768 475.344 cv
391.824 478.944 386.856 480.096 383.184 480.456 cv
374.112 481.32 363.888 479.592 355.608 477.144 cv
355.608 477.144 356.184 476.64 357.192 476.136 cv
365.184 471.96 369.936 466.92 372.816 458.496 cv
373.968 455.256 376.704 451.368 376.704 451.368 cv
376.704 451.368 371.232 453.24 369.216 453.24 cv
363.312 453.24 356.688 453.816 351.504 456.984 cv
350.136 457.848 348.048 460.224 348.048 460.224 cv
348.768 453.384 347.832 446.112 339.48 444.744 cv
334.008 443.808 332.712 443.88 328.896 439.632 cv
328.896 439.632 331.056 446.688 329.688 448.992 cv
326.448 454.464 325.728 461.88 329.184 467.352 cv
330.48 469.368 333.216 471.024 333.216 471.024 cv
324.792 467.496 326.016 462.672 325.872 454.968 cv
325.8 451.296 326.232 442.944 322.632 440.784 cv
320.688 439.632 318.024 440.28 315.432 441.72 cv
307.944 446.04 307.512 451.8 303.624 458.424 cv
299.952 464.904 294.48 469.728 286.776 471.6 cv
282.6 472.608 273.384 476.568 269.64 476.352 cv
267.408 476.28 261.504 476.064 261.504 476.064 cv
261.504 476.064 268.128 477.36 271.44 477.216 cv
280.008 476.928 286.56 474.84 293.544 470.16 cv
302.832 463.824 303.48 457.344 310.32 449.208 cv
320.04 437.616 324.432 446.76 324.576 454.968 cv
324.648 458.208 324.36 465.768 327.024 468.144 cv
328.104 469.152 328.392 469.44 328.392 469.44 cv
328.392 469.44 326.808 468.792 325.08 468.216 cv
314.28 464.76 309.888 475.92 302.544 480.888 cv
300.312 482.328 294.192 485.784 294.192 485.784 cv
294.192 485.784 298.512 485.352 300.6 486.288 cv
302.76 487.224 304.56 488.52 308.304 489.888 cv
312.048 491.328 315.504 490.896 315.504 490.896 cv
315.504 490.896 311.04 491.616 308.088 493.128 cv
299.16 497.592 295.56 499.248 285.48 500.112 cv
283.176 500.328 278.352 500.76 278.352 500.76 cv
278.352 500.76 286.56 503.424 290.376 503.712 cv
300.312 504.432 307.728 501.48 312.552 495.504 cv
314.208 493.344 318.096 491.616 318.096 491.616 cv
318.096 491.616 315.936 495.216 315.288 496.296 cv
312.768 500.472 313.776 505.296 312.12 509.4 cv
311.472 510.984 310.752 513 310.752 513 cv
310.752 513 313.92 510.12 315.936 509.832 cv
317.952 509.544 323.424 508.752 326.304 508.32 cv
329.184 507.888 332.28 505.872 333.864 503.208 cv
335.448 500.544 335.952 499.32 335.736 496.728 cv
335.592 494.136 335.16 490.032 335.16 490.032 cv
335.16 490.032 335.736 492.336 337.032 494.28 cv
345.672 507.24 362.016 499.68 370.08 497.664 cv
372.6 497.016 377.496 495.432 377.496 495.432 cv
377.496 495.432 371.808 495.864 369.216 494.568 cv
366.696 493.344 362.592 489.672 361.44 487.368 cv
358.776 482.04 358.416 482.472 353.448 479.016 cv
353.448 479.016 361.152 481.608 364.32 482.04 cv
372.672 483.12 381.6 483.264 390.096 482.76 cv
398.664 482.256 407.088 481.176 415.368 478.8 cv
421.056 477.216 424.872 474.552 431.136 473.688 cv
435.672 473.112 440.352 473.472 441.216 478.008 cv
442.152 482.616 436.608 488.448 432.504 488.088 cv
428.976 487.728 428.04 482.544 431.64 483.12 cv
432.72 483.264 432.936 484.56 432.936 484.56 cv
432.936 484.56 434.088 483.408 433.368 482.328 cv
430.92 478.8 426.744 482.544 428.112 486.288 cv
ef
343.08 488.448 mo
346.392 486.72 343.728 484.128 341.568 483.48 cv
335.376 481.536 338.328 478.944 340.128 474.408 cv
341.064 471.96 340.92 471.024 339.264 470.376 cv
337.536 469.728 336.816 469.728 336.816 469.728 cv
336.816 469.728 338.832 470.232 339.12 471.888 cv
339.624 474.192 335.736 478.512 334.656 476.136 cv
334.152 474.984 335.52 473.904 335.52 473.904 cv
332.424 473.904 332.136 478.224 334.152 479.88 cv
335.88 481.32 333.72 483.48 332.712 482.832 cv
331.776 482.184 331.92 480.888 331.056 479.736 cv
330.192 478.584 329.688 477.936 327.816 478.656 cv
326.016 479.448 325.152 480.528 325.152 480.528 cv
325.152 480.528 327.6 479.304 328.392 479.304 cv
332.136 479.304 330.768 486.72 334.368 485.28 cv
336.24 484.56 336.744 482.688 337.896 483.12 cv
338.256 483.264 346.176 486.576 341.568 487.944 cv
340.56 488.304 339.696 487.944 339.696 487.944 cv
339.696 487.944 340.848 488.808 341.496 488.808 cv
342.144 488.808 343.08 488.448 343.08 488.448 cv
0 0 0 0 cmyk
ef
369.648 496.08 mo
369.36 496.224 365.256 495 363.168 492.48 cv
361.008 489.888 359.928 487.152 357.48 485.568 cv
355.032 483.912 351.288 482.688 348.84 482.688 cv
346.392 482.688 343.44 482.76 343.44 482.76 cv
343.44 482.76 348.84 483.12 351.432 484.272 cv
358.2 487.368 356.688 489.672 360.936 493.416 cv
361.872 494.28 364.536 495.36 364.032 495.36 cv
363.456 495.36 358.272 493.848 355.176 492.336 cv
352.08 490.896 344.952 487.368 344.952 487.368 cv
344.952 487.368 350.928 492.552 353.16 493.632 cv
355.392 494.712 359.208 495.792 361.008 496.44 cv
362.808 497.016 364.824 497.016 364.824 497.016 cv
357.984 498.096 351 498.888 344.52 496.008 cv
340.704 494.28 337.68 491.112 337.68 491.112 cv
337.68 491.112 339.624 494.784 343.224 496.944 cv
350.208 501.048 359.784 499.824 367.056 497.376 cv
367.056 497.376 369.936 496.008 369.648 496.08 cv
ef
373.824 453.816 mo
373.824 453.816 369.504 461.664 368.496 463.392 cv
363.888 470.664 359.496 473.472 351.432 475.56 cv
347.688 476.496 341.496 477 341.496 477 cv
341.496 477 352.296 474.768 355.896 472.68 cv
359.496 470.52 363.168 468.36 364.752 465.624 cv
366.336 462.888 367.272 459.792 367.272 459.792 cv
367.272 459.792 363.672 462.672 361.224 464.112 cv
358.776 465.624 356.544 467.352 353.736 469.224 cv
351 471.024 347.904 472.752 347.904 472.752 cv
347.904 472.752 353.88 468.576 355.896 465.912 cv
357.912 463.248 360.504 459.792 363.24 458.28 cv
366.048 456.768 367.848 456.264 367.056 456.336 cv
357.408 457.704 353.16 460.368 346.824 467.568 cv
344.52 470.232 341.208 472.32 341.208 472.32 cv
341.208 472.32 345.6 467.136 347.4 464.544 cv
351.936 458.064 359.064 453.96 367.272 454.68 cv
369.936 454.896 373.824 453.816 373.824 453.816 cv
ef
340.992 468.288 mo
344.808 463.104 li
352.296 452.952 340.92 447.768 334.584 444.816 cv
331.704 443.52 li
331.704 443.52 332.064 447.624 330.984 449.784 cv
327.816 456.048 327.384 462.024 331.632 468.072 cv
332.352 469.152 333.504 470.088 333.504 470.088 cv
331.056 465.84 329.256 460.08 331.416 455.4 cv
335.376 446.904 336.384 457.128 336.384 460.44 cv
336.384 462.672 337.248 466.128 337.248 466.128 cv
337.248 466.128 337.68 464.256 337.68 460.512 cv
337.68 456.768 338.112 453.456 336.96 450.72 cv
335.736 447.912 335.016 446.76 335.592 447.48 cv
336.096 448.272 340.56 450.504 342.288 451.584 cv
348.84 455.688 345.528 461.304 342.144 465.912 cv
340.992 468.288 li
ef
327.888 483.552 mo
327.888 483.552 325.008 485.64 322.56 487.008 cv
315.144 491.256 312.984 488.736 306.288 486.504 cv
303.696 485.64 299.952 484.92 299.952 484.92 cv
299.952 484.92 302.976 484.056 305.496 480.96 cv
309.888 475.632 315.144 467.496 323.496 469.872 cv
326.52 470.736 332.712 472.68 331.848 472.464 cv
330.984 472.248 326.736 471.816 323.64 471.816 cv
316.44 471.816 315.072 476.064 310.32 480.024 cv
309.024 481.104 308.088 481.68 308.088 481.68 cv
308.088 481.68 310.824 482.904 315.216 481.104 cv
319.608 479.232 322.704 478.08 324.72 477.792 cv
326.736 477.432 327.672 477.216 327.672 477.216 cv
323.28 479.304 318.24 483.84 313.272 483.84 cv
309.96 483.84 307.296 483.84 307.296 483.84 cv
312.408 486.792 317.304 487.152 322.776 485.136 cv
324.792 484.344 327.888 483.552 327.888 483.552 cv
ef
333.216 487.008 mo
333.432 485.64 336.528 504 325.008 506.088 cv
320.76 506.88 315.792 504.864 313.416 508.824 cv
313.416 508.824 314.496 505.152 315.072 503.136 cv
317.232 496.44 320.616 491.256 326.808 487.584 cv
329.472 486 329.904 486 329.904 486 cv
329.904 486 326.952 488.88 324.792 490.68 cv
321.48 493.488 318.744 497.448 320.544 501.84 cv
320.544 501.84 322.488 501.408 324.504 498.24 cv
326.52 495 329.832 491.4 329.832 491.4 cv
329.832 491.4 327.96 495 327.384 496.656 cv
326.736 498.24 327.456 498.96 325.224 500.904 cv
322.992 502.776 320.328 504.504 320.328 504.504 cv
320.328 504.504 324.288 504.432 326.376 502.92 cv
330.84 499.824 331.632 495.936 332.568 490.896 cv
333 488.52 333 488.448 333 488.448 cv
333.216 487.008 li
ef
325.656 467.64 mo
325.656 467.64 325.152 467.064 324.504 466.272 cv
318.384 458.712 309.528 453.456 299.232 458.136 cv
290.088 462.312 292.536 472.104 285.624 477.36 cv
279.936 481.608 276.12 483.336 272.592 484.344 cv
269.064 485.424 266.328 485.208 266.328 485.208 cv
271.872 484.416 284.976 479.736 286.056 473.04 cv
288 461.16 291.888 458.28 299.448 455.112 cv
309.6 450.792 319.104 455.328 323.928 464.472 cv
325.656 467.64 li
0 0 0 1 cmyk
ef
456.48 479.664 mo
462.096 479.232 467.424 477.72 471.816 474.048 cv
474.624 471.528 476.712 468.288 478.728 465.12 cv
479.592 463.608 480.312 462.096 481.032 460.512 cv
481.68 459.072 484.56 450.936 487.152 454.032 cv
488.52 455.616 488.376 458.352 488.088 460.224 cv
486.432 470.016 476.928 475.632 468.216 478.152 cv
464.328 479.16 460.512 479.592 456.48 479.664 cv
ef
456.48 479.664 mo
462.096 479.232 467.424 477.72 471.816 474.048 cv
474.624 471.528 476.712 468.288 478.728 465.12 cv
479.592 463.608 480.312 462.096 481.032 460.512 cv
481.68 459.072 484.56 450.936 487.152 454.032 cv
488.52 455.616 488.376 458.352 488.088 460.224 cv
486.432 470.016 476.928 475.632 468.216 478.152 cv
464.328 479.16 460.512 479.592 456.48 479.664 cv
cp
@
472.536 462.672 mo
467.064 468.648 460.656 472.752 453.528 476.496 cv
452.52 477.072 443.448 481.032 446.184 483.12 cv
448.344 484.92 452.376 485.136 454.968 485.208 cv
474.264 485.568 491.904 472.68 499.896 455.616 cv
506.52 439.992 505.152 422.28 493.2 409.536 cv
484.632 401.328 472.104 397.224 461.232 403.632 cv
456.192 407.088 452.016 413.784 455.04 419.832 cv
455.616 420.84 456.48 422.064 457.56 422.64 cv
458.352 423 457.488 421.848 457.416 421.704 cv
454.464 417.24 455.544 412.416 458.712 408.312 cv
458.712 408.312 457.632 409.68 457.344 410.184 cv
455.904 412.344 455.472 414.432 455.184 416.952 cv
455.04 418.176 454.608 416.448 454.608 416.088 cv
453.744 407.88 461.52 402.408 468.792 401.04 cv
482.976 398.952 495.144 408.672 500.616 421.128 cv
509.976 444.24 497.16 469.584 475.632 480.096 cv
469.512 482.976 462.456 485.064 455.616 484.704 cv
453.24 484.632 444.6 483.408 449.64 479.808 cv
452.592 477.504 456.264 475.92 459.504 473.976 cv
472.392 466.128 481.464 455.04 484.56 439.992 cv
485.064 437.112 485.28 434.16 485.928 431.28 cv
486.288 429.912 487.008 428.4 488.376 430.056 cv
491.472 433.872 490.896 440.208 490.608 444.816 cv
490.392 447.696 491.472 446.112 492.048 444.528 cv
494.352 438.408 493.416 429.408 488.592 424.656 cv
483.264 419.472 484.272 430.416 484.272 432.576 cv
483.984 444.024 480.312 454.104 472.536 462.672 cv
ef
472.536 462.672 mo
467.064 468.648 460.656 472.752 453.528 476.496 cv
452.52 477.072 443.448 481.032 446.184 483.12 cv
448.344 484.92 452.376 485.136 454.968 485.208 cv
474.264 485.568 491.904 472.68 499.896 455.616 cv
506.52 439.992 505.152 422.28 493.2 409.536 cv
484.632 401.328 472.104 397.224 461.232 403.632 cv
456.192 407.088 452.016 413.784 455.04 419.832 cv
455.616 420.84 456.48 422.064 457.56 422.64 cv
458.352 423 457.488 421.848 457.416 421.704 cv
454.464 417.24 455.544 412.416 458.712 408.312 cv
458.712 408.312 457.632 409.68 457.344 410.184 cv
455.904 412.344 455.472 414.432 455.184 416.952 cv
455.04 418.176 454.608 416.448 454.608 416.088 cv
453.744 407.88 461.52 402.408 468.792 401.04 cv
482.976 398.952 495.144 408.672 500.616 421.128 cv
509.976 444.24 497.16 469.584 475.632 480.096 cv
469.512 482.976 462.456 485.064 455.616 484.704 cv
453.24 484.632 444.6 483.408 449.64 479.808 cv
452.592 477.504 456.264 475.92 459.504 473.976 cv
472.392 466.128 481.464 455.04 484.56 439.992 cv
485.064 437.112 485.28 434.16 485.928 431.28 cv
486.288 429.912 487.008 428.4 488.376 430.056 cv
491.472 433.872 490.896 440.208 490.608 444.816 cv
490.392 447.696 491.472 446.112 492.048 444.528 cv
494.352 438.408 493.416 429.408 488.592 424.656 cv
483.264 419.472 484.272 430.416 484.272 432.576 cv
483.984 444.024 480.312 454.104 472.536 462.672 cv
cp
@
386.28 539.28 mo
376.272 544.608 363.312 542.304 357.48 532.152 cv
354.024 525.744 354.312 515.808 361.152 511.704 cv
365.76 509.04 373.608 509.472 375.192 515.592 cv
375.768 517.968 374.184 521.496 371.232 520.128 cv
370.584 519.912 370.728 519.984 371.016 520.416 cv
372.528 523.44 376.56 522 377.496 519.48 cv
378.864 515.592 377.424 512.136 374.76 509.76 cv
367.056 502.776 355.248 506.736 350.784 515.448 cv
348.768 519.336 347.904 524.016 348.408 528.336 cv
349.56 526.464 349.848 528.84 350.208 529.632 cv
354.528 539.928 363.6 547.344 375.12 547.776 cv
392.832 547.992 405.72 532.8 405.792 515.664 cv
405.648 503.64 399.672 492.984 389.952 486 cv
397.944 491.832 403.344 500.328 404.928 510.12 cv
406.728 522.936 401.184 536.256 389.52 542.448 cv
399.672 535.968 404.712 524.232 403.344 512.424 cv
401.112 495.504 387.288 483.624 371.016 481.896 cv
387.504 483.912 401.328 496.296 402.768 513.504 cv
403.704 528.984 393.192 543.672 377.208 544.68 cv
375.696 544.752 373.392 544.968 372.024 544.248 cv
370.368 543.312 373.464 543.24 373.968 543.168 cv
378.36 542.664 382.464 541.584 386.28 539.28 cv
ef
386.28 539.28 mo
376.272 544.608 363.312 542.304 357.48 532.152 cv
354.024 525.744 354.312 515.808 361.152 511.704 cv
365.76 509.04 373.608 509.472 375.192 515.592 cv
375.768 517.968 374.184 521.496 371.232 520.128 cv
370.584 519.912 370.728 519.984 371.016 520.416 cv
372.528 523.44 376.56 522 377.496 519.48 cv
378.864 515.592 377.424 512.136 374.76 509.76 cv
367.056 502.776 355.248 506.736 350.784 515.448 cv
348.768 519.336 347.904 524.016 348.408 528.336 cv
349.56 526.464 349.848 528.84 350.208 529.632 cv
354.528 539.928 363.6 547.344 375.12 547.776 cv
392.832 547.992 405.72 532.8 405.792 515.664 cv
405.648 503.64 399.672 492.984 389.952 486 cv
397.944 491.832 403.344 500.328 404.928 510.12 cv
406.728 522.936 401.184 536.256 389.52 542.448 cv
399.672 535.968 404.712 524.232 403.344 512.424 cv
401.112 495.504 387.288 483.624 371.016 481.896 cv
387.504 483.912 401.328 496.296 402.768 513.504 cv
403.704 528.984 393.192 543.672 377.208 544.68 cv
375.696 544.752 373.392 544.968 372.024 544.248 cv
370.368 543.312 373.464 543.24 373.968 543.168 cv
378.36 542.664 382.464 541.584 386.28 539.28 cv
cp
@
473.184 386.712 mo
465.552 384.984 457.992 385.56 450.504 387.792 cv
450.432 387.792 446.4 389.232 447.84 388.08 cv
448.416 387.576 449.136 387.216 449.784 386.856 cv
458.208 382.536 468.216 382.68 477.072 385.344 cv
478.512 385.488 478.152 385.2 477.072 384.768 cv
459.144 377.352 432.72 388.008 429.336 408.24 cv
429.264 408.6 428.832 411.984 429.552 411.984 cv
430.2 411.984 431.496 408.744 431.784 408.24 cv
443.88 383.904 474.84 381.312 493.776 399.816 cv
511.416 417.528 511.56 445.176 497.736 465.264 cv
481.608 488.16 453.312 495.36 426.888 489.456 cv
426.312 489.312 421.128 487.872 420.84 488.304 cv
420.696 488.376 421.056 488.664 421.128 488.736 cv
422.136 489.672 423.648 490.248 424.872 490.824 cv
421.2 488.736 430.056 490.824 430.344 490.896 cv
455.832 495.432 482.112 487.944 497.808 466.344 cv
511.416 447.192 512.424 421.128 497.304 402.48 cv
489.6 393.048 479.88 388.512 468.144 386.28 cv
467.064 386.064 468.936 386.136 469.08 386.136 cv
470.448 386.28 471.816 386.424 473.184 386.712 cv
ef
473.184 386.712 mo
465.552 384.984 457.992 385.56 450.504 387.792 cv
450.432 387.792 446.4 389.232 447.84 388.08 cv
448.416 387.576 449.136 387.216 449.784 386.856 cv
458.208 382.536 468.216 382.68 477.072 385.344 cv
478.512 385.488 478.152 385.2 477.072 384.768 cv
459.144 377.352 432.72 388.008 429.336 408.24 cv
429.264 408.6 428.832 411.984 429.552 411.984 cv
430.2 411.984 431.496 408.744 431.784 408.24 cv
443.88 383.904 474.84 381.312 493.776 399.816 cv
511.416 417.528 511.56 445.176 497.736 465.264 cv
481.608 488.16 453.312 495.36 426.888 489.456 cv
426.312 489.312 421.128 487.872 420.84 488.304 cv
420.696 488.376 421.056 488.664 421.128 488.736 cv
422.136 489.672 423.648 490.248 424.872 490.824 cv
421.2 488.736 430.056 490.824 430.344 490.896 cv
455.832 495.432 482.112 487.944 497.808 466.344 cv
511.416 447.192 512.424 421.128 497.304 402.48 cv
489.6 393.048 479.88 388.512 468.144 386.28 cv
467.064 386.064 468.936 386.136 469.08 386.136 cv
470.448 386.28 471.816 386.424 473.184 386.712 cv
cp
@
417.816 436.896 mo
422.568 437.688 426.384 440.064 429.048 443.448 cv
428.76 442.368 428.616 441.216 428.616 440.064 cv
428.832 435.456 431.568 431.208 436.176 429.984 cv
438.192 429.552 440.136 429.696 441.936 430.776 cv
444.24 432.216 446.04 435.6 443.88 437.976 cv
442.8 439.056 441.072 438.984 441.216 437.184 cv
441.288 436.176 441 435.312 440.784 434.376 cv
439.704 430.488 435.096 431.064 432.576 433.296 cv
428.976 436.536 428.76 441.72 430.704 445.824 cv
431.64 447.48 432.144 448.704 432.648 450.576 cv
433.296 452.736 433.656 455.04 433.512 457.344 cv
433.08 464.256 429.912 470.088 424.944 474.264 cv
424.584 473.832 li
426.24 472.464 427.752 470.808 429.048 468.936 cv
434.592 460.296 434.304 449.064 426.456 441.936 cv
421.344 437.616 413.568 436.104 408.024 440.568 cv
404.568 443.448 402.696 449.496 407.664 451.8 cv
408.816 452.304 409.968 452.88 411.264 452.952 cv
413.712 453.096 413.424 455.472 411.768 456.624 cv
408.168 458.928 403.992 455.832 402.552 452.448 cv
401.616 449.856 401.76 447.192 402.768 444.672 cv
405.432 438.84 411.696 436.104 417.816 436.896 cv
ef
417.816 436.896 mo
422.568 437.688 426.384 440.064 429.048 443.448 cv
428.76 442.368 428.616 441.216 428.616 440.064 cv
428.832 435.456 431.568 431.208 436.176 429.984 cv
438.192 429.552 440.136 429.696 441.936 430.776 cv
444.24 432.216 446.04 435.6 443.88 437.976 cv
442.8 439.056 441.072 438.984 441.216 437.184 cv
441.288 436.176 441 435.312 440.784 434.376 cv
439.704 430.488 435.096 431.064 432.576 433.296 cv
428.976 436.536 428.76 441.72 430.704 445.824 cv
431.64 447.48 432.144 448.704 432.648 450.576 cv
433.296 452.736 433.656 455.04 433.512 457.344 cv
433.08 464.256 429.912 470.088 424.944 474.264 cv
424.584 473.832 li
426.24 472.464 427.752 470.808 429.048 468.936 cv
434.592 460.296 434.304 449.064 426.456 441.936 cv
421.344 437.616 413.568 436.104 408.024 440.568 cv
404.568 443.448 402.696 449.496 407.664 451.8 cv
408.816 452.304 409.968 452.88 411.264 452.952 cv
413.712 453.096 413.424 455.472 411.768 456.624 cv
408.168 458.928 403.992 455.832 402.552 452.448 cv
401.616 449.856 401.76 447.192 402.768 444.672 cv
405.432 438.84 411.696 436.104 417.816 436.896 cv
cp
@
346.176 465.48 mo
347.328 463.752 348.12 461.664 348.768 459.72 cv
357.408 433.584 337.536 403.992 309.384 404.856 cv
294.12 405.792 280.368 416.304 279.288 432.216 cv
279.144 441.864 284.472 451.656 294.696 453.24 cv
300.168 453.744 306.72 450.864 306.792 444.528 cv
306.72 443.088 306.216 441.864 305.28 440.712 cv
304.488 440.784 305.136 440.928 305.64 441.792 cv
308.16 446.472 304.2 451.152 299.88 452.52 cv
290.952 455.184 283.104 447.984 280.44 439.92 cv
276.768 426.744 284.328 414.288 296.064 408.384 cv
313.128 400.392 332.136 407.304 342.864 422.136 cv
350.064 432.792 352.728 446.832 348.48 459.144 cv
348.336 459.576 347.472 461.808 346.68 462.888 cv
346.176 465.48 li
ef
346.176 465.48 mo
347.328 463.752 348.12 461.664 348.768 459.72 cv
357.408 433.584 337.536 403.992 309.384 404.856 cv
294.12 405.792 280.368 416.304 279.288 432.216 cv
279.144 441.864 284.472 451.656 294.696 453.24 cv
300.168 453.744 306.72 450.864 306.792 444.528 cv
306.72 443.088 306.216 441.864 305.28 440.712 cv
304.488 440.784 305.136 440.928 305.64 441.792 cv
308.16 446.472 304.2 451.152 299.88 452.52 cv
290.952 455.184 283.104 447.984 280.44 439.92 cv
276.768 426.744 284.328 414.288 296.064 408.384 cv
313.128 400.392 332.136 407.304 342.864 422.136 cv
350.064 432.792 352.728 446.832 348.48 459.144 cv
348.336 459.576 347.472 461.808 346.68 462.888 cv
346.176 465.48 li
cp
@
370.584 481.392 mo
371.016 481.392 li
397.8 478.368 422.136 504.432 415.584 532.368 cv
411.552 547.344 398.664 558.864 383.184 556.488 cv
373.896 554.688 365.544 547.272 366.12 536.76 cv
366.768 531.144 370.872 525.168 376.92 526.464 cv
378.36 526.896 379.44 527.616 380.376 528.768 cv
380.088 529.632 380.088 528.912 379.368 528.192 cv
375.408 524.664 370.08 527.616 367.848 531.72 cv
363.456 540.072 368.784 549.432 375.984 553.752 cv
387.864 560.232 401.4 555.264 409.464 544.896 cv
420.552 529.56 417.888 509.112 405.792 495.288 cv
397.08 485.856 384.192 480.168 371.448 481.824 cv
371.376 481.824 371.232 481.824 371.016 481.896 cv
370.584 481.392 li
ef
370.584 481.392 mo
371.016 481.392 li
397.8 478.368 422.136 504.432 415.584 532.368 cv
411.552 547.344 398.664 558.864 383.184 556.488 cv
373.896 554.688 365.544 547.272 366.12 536.76 cv
366.768 531.144 370.872 525.168 376.92 526.464 cv
378.36 526.896 379.44 527.616 380.376 528.768 cv
380.088 529.632 380.088 528.912 379.368 528.192 cv
375.408 524.664 370.08 527.616 367.848 531.72 cv
363.456 540.072 368.784 549.432 375.984 553.752 cv
387.864 560.232 401.4 555.264 409.464 544.896 cv
420.552 529.56 417.888 509.112 405.792 495.288 cv
397.08 485.856 384.192 480.168 371.448 481.824 cv
371.376 481.824 371.232 481.824 371.016 481.896 cv
370.584 481.392 li
cp
@
429.984 471.6 mo
433.008 469.872 435.6 467.568 437.04 464.328 cv
437.976 462.168 438.264 459.72 438.48 457.416 cv
438.552 456.336 438.552 455.256 438.552 454.176 cv
438.48 453.24 437.904 447.912 440.208 448.92 cv
441.432 449.424 442.08 451.008 442.44 452.16 cv
444.168 458.064 440.352 463.824 436.104 467.64 cv
434.232 469.224 432.216 470.52 429.984 471.6 cv
ef
429.984 471.6 mo
433.008 469.872 435.6 467.568 437.04 464.328 cv
437.976 462.168 438.264 459.72 438.48 457.416 cv
438.552 456.336 438.552 455.256 438.552 454.176 cv
438.48 453.24 437.904 447.912 440.208 448.92 cv
441.432 449.424 442.08 451.008 442.44 452.16 cv
444.168 458.064 440.352 463.824 436.104 467.64 cv
434.232 469.224 432.216 470.52 429.984 471.6 cv
cp
@
427.464 440.424 mo
425.304 437.688 422.64 435.456 419.256 434.448 cv
416.952 433.8 414.576 433.872 412.272 433.944 cv
411.192 434.016 410.112 434.16 409.032 434.304 cv
408.096 434.448 402.84 435.816 403.56 433.368 cv
403.92 432.144 405.36 431.208 406.44 430.704 cv
412.128 428.184 418.32 431.208 422.64 434.88 cv
424.512 436.536 426.024 438.408 427.464 440.424 cv
ef
427.464 440.424 mo
425.304 437.688 422.64 435.456 419.256 434.448 cv
416.952 433.8 414.576 433.872 412.272 433.944 cv
411.192 434.016 410.112 434.16 409.032 434.304 cv
408.096 434.448 402.84 435.816 403.56 433.368 cv
403.92 432.144 405.36 431.208 406.44 430.704 cv
412.128 428.184 418.32 431.208 422.64 434.88 cv
424.512 436.536 426.024 438.408 427.464 440.424 cv
cp
@
434.952 469.44 mo
436.896 467.928 439.128 466.992 441.576 466.92 cv
443.232 466.992 444.816 467.424 446.4 467.928 cv
447.12 468.216 447.768 468.504 448.488 468.792 cv
449.064 469.08 452.304 470.952 452.304 469.224 cv
452.304 468.288 451.512 467.424 450.864 466.92 cv
447.552 464.112 442.872 464.976 439.2 466.56 cv
437.688 467.352 436.248 468.288 434.952 469.44 cv
ef
434.952 469.44 mo
436.896 467.928 439.128 466.992 441.576 466.92 cv
443.232 466.992 444.816 467.424 446.4 467.928 cv
447.12 468.216 447.768 468.504 448.488 468.792 cv
449.064 469.08 452.304 470.952 452.304 469.224 cv
452.304 468.288 451.512 467.424 450.864 466.92 cv
447.552 464.112 442.872 464.976 439.2 466.56 cv
437.688 467.352 436.248 468.288 434.952 469.44 cv
cp
@
461.664 423.792 mo
464.328 416.52 471.888 413.424 479.16 414.936 cv
484.128 416.232 487.944 419.328 490.392 423.432 cv
497.376 435.384 497.16 450.72 489.168 462.312 cv
488.16 463.752 487.008 465.264 485.64 466.416 cv
486.648 464.472 li
487.584 463.68 488.808 462.096 489.096 461.808 cv
495.504 452.736 496.656 440.64 493.272 430.2 cv
492.192 426.816 489.744 422.424 487.224 419.976 cv
481.608 414.576 473.112 413.208 466.704 418.032 cv
462.744 421.272 460.512 426.816 463.032 431.568 cv
464.688 434.592 468.936 436.824 471.384 433.512 cv
471.888 432.648 472.464 431.928 472.752 430.992 cv
473.184 429.12 474.912 429.696 475.56 431.136 cv
476.784 434.16 473.832 436.752 471.168 437.328 cv
469.08 437.688 467.136 437.184 465.336 436.104 cv
461.376 433.296 460.224 428.256 461.664 423.792 cv
ef
461.664 423.792 mo
464.328 416.52 471.888 413.424 479.16 414.936 cv
484.128 416.232 487.944 419.328 490.392 423.432 cv
497.376 435.384 497.16 450.72 489.168 462.312 cv
488.16 463.752 487.008 465.264 485.64 466.416 cv
486.648 464.472 li
487.584 463.68 488.808 462.096 489.096 461.808 cv
495.504 452.736 496.656 440.64 493.272 430.2 cv
492.192 426.816 489.744 422.424 487.224 419.976 cv
481.608 414.576 473.112 413.208 466.704 418.032 cv
462.744 421.272 460.512 426.816 463.032 431.568 cv
464.688 434.592 468.936 436.824 471.384 433.512 cv
471.888 432.648 472.464 431.928 472.752 430.992 cv
473.184 429.12 474.912 429.696 475.56 431.136 cv
476.784 434.16 473.832 436.752 471.168 437.328 cv
469.08 437.688 467.136 437.184 465.336 436.104 cv
461.376 433.296 460.224 428.256 461.664 423.792 cv
cp
@
425.016 424.656 mo
414.936 418.248 412.704 405.864 417.456 395.424 cv
420.984 388.44 426.888 383.616 433.8 381.456 cv
454.104 374.688 477.144 380.016 491.976 395.712 cv
493.848 397.728 495.72 399.96 497.016 402.336 cv
494.424 400.176 li
493.56 398.592 491.616 396.144 491.184 395.712 cv
479.592 383.112 461.736 377.496 444.96 379.224 cv
439.488 379.8 432.072 382.032 427.536 384.984 cv
417.6 391.608 412.776 403.992 417.96 415.296 cv
421.56 422.28 429.264 427.392 437.256 425.16 cv
442.296 423.648 447.048 417.96 442.8 413.208 cv
441.72 412.128 440.784 411.048 439.488 410.328 cv
436.824 409.032 438.264 406.656 440.568 406.152 cv
445.536 405.288 448.56 410.544 448.56 414.792 cv
448.416 418.032 447.048 420.84 444.744 423.144 cv
439.272 428.256 431.28 428.328 425.016 424.656 cv
ef
425.016 424.656 mo
414.936 418.248 412.704 405.864 417.456 395.424 cv
420.984 388.44 426.888 383.616 433.8 381.456 cv
454.104 374.688 477.144 380.016 491.976 395.712 cv
493.848 397.728 495.72 399.96 497.016 402.336 cv
494.424 400.176 li
493.56 398.592 491.616 396.144 491.184 395.712 cv
479.592 383.112 461.736 377.496 444.96 379.224 cv
439.488 379.8 432.072 382.032 427.536 384.984 cv
417.6 391.608 412.776 403.992 417.96 415.296 cv
421.56 422.28 429.264 427.392 437.256 425.16 cv
442.296 423.648 447.048 417.96 442.8 413.208 cv
441.72 412.128 440.784 411.048 439.488 410.328 cv
436.824 409.032 438.264 406.656 440.568 406.152 cv
445.536 405.288 448.56 410.544 448.56 414.792 cv
448.416 418.032 447.048 420.84 444.744 423.144 cv
439.272 428.256 431.28 428.328 425.016 424.656 cv
cp
@
281.304 468 mo
281.664 466.92 282.528 464.4 283.104 463.104 cv
283.608 461.88 284.832 459.648 285.48 458.352 cv
285.048 458.064 284.4 457.704 283.752 457.2 cv
276.336 452.088 272.448 444.096 271.872 435.528 cv
271.584 432.144 271.944 428.688 272.664 425.448 cv
275.76 412.272 286.848 402.264 299.52 398.304 cv
321.84 391.248 344.304 405.36 353.448 426.744 cv
356.112 432.864 357.624 439.488 357.768 446.112 cv
357.768 446.184 li
357.768 446.688 357.768 447.048 357.768 447.408 cv
364.68 447.192 372.24 446.976 378.792 445.752 cv
378.864 445.752 li
380.088 445.464 381.528 445.032 382.752 445.032 cv
382.968 445.032 383.184 445.104 383.328 445.176 cv
383.4 445.176 li
384.336 445.752 383.832 446.976 383.616 447.768 cv
382.536 451.656 381.096 455.184 380.52 459.144 cv
381.312 458.856 li
387.648 456.552 390.672 455.4 398.808 457.848 cv
397.224 455.112 396.36 452.664 396.072 450 cv
395.784 446.688 396.504 443.232 398.376 438.84 cv
397.152 436.824 396.936 434.088 397.296 431.856 cv
398.304 425.664 404.208 422.208 410.112 422.064 cv
410.688 422.064 411.336 422.064 411.912 422.136 cv
409.896 419.328 408.24 415.872 407.52 412.488 cv
403.488 394.2 420.696 376.2 437.544 372.528 cv
437.904 372.456 li
455.112 368.712 472.464 372.528 486.432 381.456 cv
530.064 409.536 525.528 477.72 470.664 495 cv
466.92 496.224 459.288 497.376 456.552 497.808 cv
456.552 498.384 456.552 498.888 456.624 499.464 cv
456.624 499.824 456.624 500.184 456.552 500.544 cv
456.264 507.744 450.144 510.768 443.664 510.768 cv
443.448 511.776 443.016 513.432 441.936 515.808 cv
439.056 522.36 431.496 524.808 425.16 522 cv
424.944 521.928 424.656 521.784 424.44 521.64 cv
424.224 521.568 424.008 521.424 423.864 521.352 cv
423.504 526.752 li
423.144 549.36 401.544 568.8 379.152 562.032 cv
376.848 561.312 374.472 560.376 372.096 559.08 cv
365.904 555.696 362.232 551.448 361.368 550.368 cv
360.432 550.008 359.424 549.576 358.488 549.144 cv
358.416 549.072 358.2 549 357.912 548.856 cv
357.768 548.784 357.552 548.712 357.264 548.568 cv
341.64 540.72 336.96 521.856 348.12 508.176 cv
346.392 508.176 344.16 507.96 342.36 507.24 cv
340.776 506.664 339.624 505.944 338.76 505.224 cv
337.464 509.688 334.656 512.136 330.336 513.792 cv
327.168 515.016 322.848 514.944 320.472 514.728 cv
320.832 516.384 320.832 518.976 318.888 521.64 cv
316.224 525.24 310.464 525.168 308.664 525.024 cv
308.304 525.312 307.8 525.744 307.08 526.248 cv
300.96 530.64 288.144 527.472 288.288 518.688 cv
288.288 516.672 289.296 514.8 291.6 513.36 cv
290.592 512.352 li
287.928 509.688 284.544 508.32 281.088 506.952 cv
276.624 505.152 272.16 503.352 268.56 498.672 cv
267.768 497.592 267.552 497.232 267.552 497.232 cv
266.04 495.144 li
268.56 495.432 li
268.632 495.432 272.088 495.936 278.568 495.936 cv
283.104 495.936 289.872 494.136 293.472 493.056 cv
292.464 492.48 li
290.304 491.184 285.192 489.6 279 489.312 cv
276.552 489.24 274.032 489.384 271.512 489.744 cv
261.792 491.256 253.728 486.72 253.728 486.72 cv
249.912 484.56 li
254.304 484.56 li
254.304 484.56 255.168 484.56 258.48 484.128 cv
260.136 483.84 262.008 483.048 263.376 482.328 cv
261.504 481.536 259.632 480.672 257.904 479.592 cv
255.456 478.008 253.368 475.992 252.144 473.184 cv
251.496 471.744 251.208 470.448 250.992 468.864 cv
252.576 469.152 li
262.656 471.096 271.512 471.816 281.304 468 cv
cp
282.6 469.872 mo
272.952 473.832 264.024 473.544 253.944 471.744 cv
254.016 471.888 254.16 472.104 254.232 472.32 cv
255.24 474.624 257.04 476.28 259.128 477.648 cv
261.36 479.016 263.88 480.096 266.184 481.032 cv
268.2 481.824 li
266.472 483.048 li
266.4 483.048 262.44 485.856 258.768 486.36 cv
261.792 487.368 266.184 488.232 271.152 487.512 cv
273.816 487.08 276.48 486.936 279.144 487.08 cv
285.696 487.368 291.24 489.096 293.616 490.536 cv
296.784 492.48 li
298.872 493.776 li
296.568 494.496 li
296.496 494.496 285.264 498.168 278.568 498.168 cv
275.256 498.168 272.664 498.096 270.864 497.952 cv
273.96 501.624 277.992 503.28 281.952 504.864 cv
285.624 506.304 289.152 507.744 292.176 510.696 cv
294.336 512.928 li
295.56 514.08 li
293.976 514.728 li
291.6 515.736 290.592 517.176 290.52 518.688 cv
290.448 525.6 301.176 527.688 305.784 524.448 cv
306.576 523.872 307.224 523.296 307.8 522.648 cv
308.376 522.72 li
308.376 522.72 314.64 523.512 317.088 520.272 cv
319.464 517.032 317.88 514.008 317.88 513.936 cv
316.872 512.064 li
319.032 512.352 li
319.032 512.352 325.512 513.288 329.544 511.704 cv
334.008 509.904 336.024 507.456 337.032 502.848 cv
337.608 500.472 li
339.048 502.416 li
339.048 502.416 340.344 504.072 343.152 505.152 cv
346.032 506.304 350.568 505.8 350.568 505.8 cv
353.736 505.512 li
351.504 507.744 li
351.504 507.744 351.072 508.248 350.424 508.968 cv
339.552 521.496 343.584 539.208 358.272 546.552 cv
358.416 546.552 358.632 546.696 358.848 546.84 cv
358.992 546.84 359.136 546.984 359.424 547.056 cv
360.504 547.56 361.656 548.064 362.736 548.424 cv
362.952 548.712 li
362.952 548.712 366.408 553.464 373.176 557.064 cv
375.408 558.288 377.64 559.224 379.8 559.872 cv
400.464 566.136 420.048 548.424 421.2 527.76 cv
421.2 527.4 421.2 527.04 421.2 526.752 cv
421.2 526.68 li
421.704 519.408 li
421.848 517.608 li
423.432 518.472 li
423.432 518.472 424.296 519.048 425.52 519.624 cv
425.664 519.768 425.88 519.84 426.096 519.912 cv
431.28 522.288 437.472 520.272 439.92 514.944 cv
441.648 510.912 441.576 509.76 441.576 509.76 cv
441.288 508.392 li
442.656 508.464 li
448.128 508.68 454.032 506.808 454.32 500.4 cv
454.392 499.248 454.248 498.024 454.248 496.8 cv
454.248 495.792 li
455.256 495.72 li
455.256 495.648 465.48 494.28 470.016 492.84 cv
522.936 476.136 527.256 410.4 485.208 383.328 cv
471.672 374.688 454.968 371.088 438.408 374.688 cv
438.048 374.76 li
422.352 378.216 406.008 394.992 409.752 411.984 cv
410.328 414.864 411.552 417.672 413.496 420.408 cv
414.576 421.92 415.512 423 415.512 423 cv
417.384 425.232 li
416.952 425.16 416.448 425.088 415.944 425.016 cv
412.848 424.512 410.04 423.936 406.944 424.8 cv
403.344 425.808 400.176 428.256 399.528 432.216 cv
399.168 434.52 399.24 436.752 401.04 438.408 cv
400.68 439.128 li
398.808 443.448 398.016 446.76 398.376 449.784 cv
398.664 452.88 400.032 455.76 402.336 459.288 cv
404.136 462.096 li
400.968 460.944 li
393.84 458.424 389.16 458.424 382.032 461.016 cv
380.664 461.52 379.296 462.024 377.856 462.528 cv
378.072 460.728 li
378.504 456.048 380.016 452.016 381.312 447.552 cv
379.296 447.984 li
379.224 447.984 li
372.096 449.28 363.96 449.496 356.76 449.712 cv
356.688 449.712 li
355.536 449.712 li
355.536 448.56 li
355.536 441.288 354.24 434.376 351.36 427.68 cv
342.648 407.304 321.48 393.768 300.168 400.464 cv
288.216 404.208 277.776 413.568 274.896 425.952 cv
274.176 428.976 273.888 432.216 274.104 435.384 cv
274.608 443.304 278.28 450.576 285.048 455.328 cv
286.488 456.336 287.568 456.984 287.568 456.984 cv
288.576 457.56 li
288 458.496 li
288 458.496 285.84 462.384 285.192 463.968 cv
284.4 465.84 283.752 467.784 283.104 469.656 cv
282.6 469.872 li
f
79.9199 128.232 mo
79.9199 128.232 80.4238 117.576 84.8877 111.024 cv
88.3438 105.912 92.1597 99.936 92.1597 93.4561 cv
92.1597 93.4561 86.1841 98.28 83.8799 104.472 cv
81.5757 110.592 80.1357 120.168 79.9917 123.048 cv
79.9199 125.928 79.9199 128.232 79.9199 128.232 cv
ef
113.688 64.8721 mo
116.856 63.5039 116.568 67.104 119.088 65.448 cv
121.68 63.792 120.024 60.1201 117 59.832 cv
113.904 59.5439 112.104 62.928 112.104 62.928 cv
112.104 62.928 112.248 60.48 112.536 59.616 cv
114.696 54.3599 120.024 56.0879 122.76 58.5361 cv
124.704 60.2639 128.304 58.6799 127.512 55.728 cv
126.648 52.8481 123.192 53.28 121.68 52.9919 cv
120.096 52.6321 120.024 52.2 120.024 52.2 cv
120.024 52.2 124.416 49.104 127.944 51.1919 cv
131.472 53.28 130.536 54.2161 131.112 56.0879 cv
131.616 58.032 134.136 58.896 135.504 57.6001 cv
137.664 55.4399 134.424 51.1201 131.544 50.04 cv
130.824 49.752 130.464 49.752 131.472 49.3201 cv
133.128 48.7441 135.36 49.3201 137.808 52.0559 cv
140.256 54.792 140.256 56.7361 138.744 58.6079 cv
137.304 60.48 138.168 62.4241 140.4 62.136 cv
142.704 61.7759 142.056 56.7361 141.48 55.0801 cv
140.832 53.4961 140.688 52.7041 140.616 52.7041 cv
140.616 52.7759 141.696 53.064 142.848 53.7119 cv
148.032 56.448 149.04 68.616 141.84 68.9761 cv
138.816 69.1201 135.072 66.168 135.36 69.408 cv
135.576 72.5759 140.976 73.8 144.288 71.928 cv
154.08 66.312 149.976 56.7361 141.984 51.408 cv
135.504 46.9438 143.136 45.144 148.32 51.1201 cv
150.48 53.5679 153.288 53.928 155.448 52.272 cv
156.096 51.7681 156.312 51.2639 156.384 50.688 cv
154.44 49.6079 153.36 47.8081 153.936 46.512 cv
154.584 45.144 156.96 44.856 159.192 45.936 cv
159.48 46.0801 159.84 46.2959 160.128 46.512 cv
160.56 46.512 161.064 46.512 161.712 46.3679 cv
164.304 45.864 165.744 43.5601 165.456 41.76 cv
165.168 39.8879 165.816 39.4561 165.816 39.4561 cv
168.552 36.5759 166.464 24.408 163.368 27.2881 cv
160.848 29.6641 169.92 39.5281 159.48 42.408 cv
153.36 44.064 138.816 39.7441 135.36 47.376 cv
135.072 47.9519 134.928 48.4561 134.928 48.4561 cv
135 48.4561 134.568 47.8081 133.632 47.448 cv
124.344 44.5679 115.848 50.1121 111.816 57.6001 cv
108.936 63 108.576 68.832 111.384 74.2319 cv
112.176 75.7441 112.896 76.824 112.896 76.824 cv
112.464 75.5281 li
111.528 72.72 110.232 66.384 113.688 64.8721 cv
ef
77.04 130.104 mo
82.584 122.184 88.6318 114.84 95.04 108 cv
114.552 89.928 136.296 78.1201 162.576 72.6479 cv
188.424 69.0479 212.4 73.0081 232.632 83.0879 cv
259.272 96.48 269.28 128.448 295.632 144.864 cv
325.08 163.296 359.928 166.536 389.736 153.504 cv
390.672 153.072 411.336 144.72 406.08 134.568 cv
404.352 131.256 401.688 130.68 401.616 129.24 cv
401.472 127.8 403.056 127.512 403.992 127.656 cv
404.856 127.8 405.216 124.704 403.416 125.28 cv
401.616 125.856 400.896 128.448 399.744 127.8 cv
399.024 127.368 398.808 125.496 399.96 124.632 cv
406.296 119.664 411.192 126.432 412.416 130.68 cv
412.632 131.328 412.848 131.904 412.848 131.904 cv
412.848 131.904 412.992 130.968 412.992 129.744 cv
413.28 122.472 401.976 114.408 398.232 121.176 cv
397.728 121.968 396.936 122.832 396.144 122.112 cv
395.352 121.392 396.864 118.224 395.568 119.592 cv
394.344 120.96 394.416 123.048 392.904 122.832 cv
391.464 122.688 390.456 120.456 392.616 119.232 cv
394.776 118.008 395.64 116.208 394.056 116.352 cv
393.624 116.352 393.264 117.36 392.904 117.36 cv
391.824 117.504 391.104 116.64 392.112 115.488 cv
396.864 110.16 404.928 112.824 407.664 116.064 cv
408.6 117.288 409.392 117.144 409.392 117.144 cv
409.392 117.144 408.816 116.136 407.808 114.984 cv
405.072 111.6 398.376 108.288 394.128 110.448 cv
393.264 110.88 392.328 111.672 391.248 112.824 cv
390.24 113.904 388.008 116.208 386.568 114.264 cv
386.064 113.544 386.568 112.32 388.224 111.312 cv
390.384 110.088 390.744 109.008 390.744 109.008 cv
390.744 109.008 387.72 109.224 386.136 110.952 cv
384.48 112.68 383.112 114.12 384.408 115.632 cv
385.704 117.144 386.424 118.224 386.28 119.808 cv
386.136 121.464 384.696 122.4 383.256 121.032 cv
381.888 119.664 382.536 116.64 381.888 116.064 cv
381.528 115.776 381.096 116.136 380.736 116.856 cv
378.864 120.24 379.8 124.272 382.968 126.36 cv
384.048 127.152 385.344 127.368 386.352 126.36 cv
391.464 121.68 391.032 128.448 386.568 128.376 cv
380.088 128.304 376.92 120.384 380.088 115.2 cv
385.776 105.84 399.528 104.112 407.232 111.888 cv
424.872 129.888 409.968 150.408 390.744 157.68 cv
359.928 169.416 326.304 166.536 296.64 148.968 cv
267.696 131.832 256.104 96.9121 226.152 83.592 cv
206.928 75.0239 184.32 72.072 160.848 76.104 cv
128.592 81.5759 97.7041 105.12 77.04 130.104 cv
ef
248.616 96.0479 mo
253.944 99.4321 259.56 102.456 265.464 104.832 cv
289.944 114.048 318.096 110.592 338.112 93.312 cv
340.848 90.864 343.368 88.272 345.672 85.4639 cv
345.6 85.6799 345.528 85.824 345.528 86.04 cv
345.384 86.3281 345.24 86.688 345.24 87.1201 cv
345.24 88.2 345.96 89.064 346.968 89.3521 cv
329.688 108.144 305.496 115.344 280.368 111.672 cv
268.56 109.656 258.12 104.688 248.4 98.208 cv
248.616 96.0479 li
ef
74.7358 135.864 mo
83.1597 123.696 95.2559 114.696 110.664 112.536 cv
121.032 111.096 131.256 113.256 140.112 119.448 cv
148.104 124.992 160.488 138.816 155.088 149.184 cv
153.144 153 149.76 155.592 146.88 152.28 cv
145.944 151.2 146.592 149.832 147.096 148.752 cv
144.864 149.472 142.704 149.472 140.76 147.96 cv
139.896 147.312 139.104 146.232 139.104 145.008 cv
139.104 144.36 140.328 144.864 141.696 145.44 cv
145.08 146.952 147.24 146.376 149.76 143.208 cv
152.64 139.392 150.408 134.064 145.296 127.296 cv
138.456 118.08 127.296 113.4 116.136 113.4 cv
98.7119 113.328 84.6719 122.832 75.168 136.296 cv
74.7358 135.864 li
ef
66.5278 65.9519 mo
59.1841 72.6479 56.52 83.8081 63.2158 91.9438 cv
67.104 96.3359 73.9438 98.4241 78.9121 94.3921 cv
81.5757 92.0879 82.0801 89.28 81.2158 86.04 cv
80.4961 83.376 83.0879 84.6001 84.0957 85.752 cv
87.4077 89.928 84.6001 95.76 80.7837 98.4961 cv
72.4316 104.04 62.208 99.072 57.96 90.864 cv
52.7041 79.7041 57.8877 67.4639 68.04 61.272 cv
81.6479 53.6401 97.7041 58.3921 106.848 70.488 cv
117.288 85.176 114.84 104.472 102.6 117.288 cv
97.1279 122.76 89.7119 127.224 81.936 128.448 cv
80.5679 128.664 82.728 128.088 82.9438 128.016 cv
98.9277 123.12 111.024 110.088 111.888 92.8081 cv
112.104 81.2161 106.992 70.5601 97.0557 64.2241 cv
87.3359 58.5361 75.3838 58.5361 66.5278 65.9519 cv
ef
223.632 133.056 mo
227.232 133.776 230.688 135.576 233.28 138.24 cv
236.016 135.72 239.544 134.064 243.216 133.488 cv
250.704 132.624 257.976 136.368 260.856 143.496 cv
263.232 149.832 261.216 157.032 255.168 160.416 cv
250.632 162.72 244.944 162.072 241.92 157.68 cv
238.32 152.424 244.944 156.96 249.48 156.816 cv
259.416 156.384 255.744 138.456 244.656 137.52 cv
244.152 137.52 243.72 137.52 243.216 137.52 cv
243.432 137.592 243.648 137.664 243.864 137.664 cv
248.04 139.176 251.928 142.272 252.72 146.88 cv
252.936 149.04 252.432 151.272 250.848 152.856 cv
249.696 153.936 247.752 154.656 246.6 153.072 cv
246.6 152.208 247.032 151.344 247.392 150.552 cv
247.68 149.832 247.896 149.184 248.112 148.392 cv
248.616 145.296 247.104 141.984 244.8 139.896 cv
243.648 138.888 242.424 138.24 241.056 137.736 cv
240.912 137.808 240.768 137.808 240.624 137.88 cv
243.144 139.104 245.232 141.192 245.736 144.072 cv
245.952 145.656 245.52 147.312 244.368 148.464 cv
243.504 149.328 242.064 149.832 241.2 148.68 cv
241.2 148.032 241.488 147.384 241.776 146.808 cv
241.992 146.232 242.208 145.728 242.28 145.224 cv
242.712 142.848 241.632 140.4 239.904 138.888 cv
239.616 138.672 239.328 138.456 239.112 138.312 cv
237.672 138.744 236.304 139.464 235.08 140.328 cv
236.16 141.84 236.952 143.496 237.384 145.296 cv
237.456 145.512 237.816 146.952 237.528 147.024 cv
237.24 147.096 236.304 145.512 236.16 145.368 cv
235.512 144.432 234.792 143.496 234.072 142.704 cv
234.864 146.16 235.728 148.68 235.728 151.2 cv
235.584 154.944 234.864 158.688 232.848 159.336 cv
230.904 158.544 230.328 154.8 230.4 151.056 cv
230.472 148.536 231.408 146.016 232.416 142.488 cv
231.624 143.352 230.832 144.216 230.112 145.224 cv
229.968 145.368 228.96 146.952 228.672 146.808 cv
228.384 146.736 228.816 145.296 228.888 145.152 cv
229.392 143.352 230.256 141.696 231.408 140.256 cv
230.256 139.32 228.888 138.528 227.52 138.024 cv
227.232 138.168 226.944 138.384 226.656 138.6 cv
224.856 140.04 223.704 142.416 223.992 144.792 cv
224.064 145.368 224.208 145.872 224.424 146.376 cv
224.64 147.024 224.928 147.672 224.928 148.32 cv
223.992 149.4 222.624 148.824 221.76 147.96 cv
220.68 146.736 220.32 145.08 220.608 143.496 cv
221.184 140.688 223.416 138.672 226.008 137.52 cv
225.864 137.52 225.72 137.448 225.576 137.448 cv
224.208 137.808 222.912 138.456 221.688 139.32 cv
219.312 141.336 217.656 144.576 218.016 147.744 cv
218.16 148.464 218.376 149.184 218.664 149.904 cv
218.952 150.696 219.384 151.632 219.312 152.496 cv
218.16 153.936 216.216 153.144 215.064 152.064 cv
213.552 150.408 213.12 148.104 213.552 146.016 cv
214.488 141.48 218.52 138.456 222.768 137.232 cv
222.984 137.16 223.2 137.088 223.416 137.088 cv
222.912 137.016 222.48 137.016 221.976 137.016 cv
210.816 137.448 206.352 155.232 216.288 156.024 cv
220.824 156.384 227.592 152.208 223.776 157.248 cv
220.536 161.496 214.848 161.856 210.384 159.336 cv
204.48 155.736 202.896 148.464 205.488 142.272 cv
208.728 135.288 216.144 131.832 223.632 133.056 cv
ef
221.832 128.664 mo
218.664 124.704 208.296 120.672 208.008 129.168 cv
208.008 130.68 207.504 132.768 205.416 131.04 cv
203.688 129.456 204.264 126.792 205.416 124.992 cv
207.504 122.256 211.176 121.392 214.488 122.112 cv
216.288 122.472 219.024 124.344 219.6 122.112 cv
220.176 120.024 216.288 119.088 214.56 119.448 cv
212.328 119.952 211.824 118.512 213.624 117.072 cv
214.704 116.208 216.216 115.992 217.584 116.28 cv
224.784 117.936 220.176 123.696 224.136 124.488 cv
226.44 124.92 226.224 121.032 223.56 119.376 cv
221.688 118.08 222.264 116.64 224.568 116.856 cv
225.936 117.072 227.16 117.936 227.88 119.088 cv
229.104 120.96 229.176 123.192 228.6 125.28 cv
228.024 127.224 227.376 127.728 228.168 129.744 cv
228.816 131.328 229.968 132.408 231.912 131.688 cv
231.264 130.824 230.832 129.672 230.832 128.664 cv
230.832 128.088 230.976 127.512 231.336 127.008 cv
231.912 126.288 232.704 125.928 233.496 125.928 cv
233.568 125.928 li
233.64 125.928 li
234.432 125.928 235.224 126.36 235.728 127.08 cv
236.088 127.584 236.16 128.16 236.16 128.736 cv
236.16 129.816 235.656 130.896 234.936 131.76 cv
236.88 132.552 238.032 131.544 238.752 129.96 cv
239.616 127.944 239.04 127.44 238.608 125.496 cv
238.104 123.336 238.248 121.176 239.544 119.376 cv
240.336 118.224 241.56 117.432 243 117.288 cv
245.304 117.144 245.808 118.656 243.864 119.808 cv
241.128 121.392 240.696 125.28 243.072 124.92 cv
247.104 124.344 242.712 118.368 249.984 117 cv
251.352 116.784 252.864 117.072 253.872 118.008 cv
255.672 119.52 255.024 120.96 252.792 120.384 cv
251.136 119.88 247.248 120.672 247.68 122.76 cv
248.184 125.064 250.992 123.264 252.792 122.976 cv
256.104 122.4 259.776 123.408 261.72 126.288 cv
262.872 128.088 263.232 130.824 261.432 132.336 cv
259.272 133.992 258.912 131.904 258.984 130.32 cv
259.056 121.896 248.544 125.424 245.16 129.24 cv
242.136 132.552 237.096 135.792 233.424 133.2 cv
229.536 135.576 224.712 132.192 221.832 128.664 cv
ef
224.712 62.064 mo
230.256 65.0879 244.08 64.8721 240.48 55.0081 cv
239.832 53.208 239.328 50.5439 242.496 51.624 cv
245.304 52.6321 245.952 56.0161 245.304 58.6079 cv
245.16 59.4719 244.8 60.1919 244.368 60.9121 cv
245.448 60.7681 246.384 60.408 247.176 59.688 cv
247.896 58.896 248.184 58.104 247.968 57.0959 cv
247.824 56.376 247.536 55.8 247.752 55.0801 cv
247.824 54.72 248.112 54.5759 248.4 54.4321 cv
249.336 54.144 250.2 54.792 250.704 55.584 cv
251.352 56.8799 251.136 58.248 250.488 59.4719 cv
249.336 61.272 247.32 62.208 245.304 62.28 cv
246.096 62.4961 246.888 62.856 247.536 63.4321 cv
248.76 64.512 249.48 65.9519 249.264 67.6079 cv
248.976 68.616 248.328 69.624 247.176 69.696 cv
246.816 69.696 246.456 69.552 246.24 69.2639 cv
245.736 68.5439 245.808 67.752 245.736 66.96 cv
245.592 65.8081 244.944 65.0161 243.936 64.4399 cv
243.216 64.0801 242.424 63.936 241.632 64.0081 cv
240.048 65.0879 238.176 65.8799 236.304 66.168 cv
234.072 66.6001 229.968 65.6641 230.328 68.616 cv
230.688 71.208 235.584 70.488 237.384 69.2639 cv
239.688 67.6799 241.056 69.0479 239.616 71.5679 cv
238.752 73.0801 237.168 74.0161 235.44 74.304 cv
226.368 75.7441 228.96 66.96 224.064 67.968 cv
221.184 68.5439 223.272 72.864 227.088 73.584 cv
229.896 74.1599 229.896 76.176 227.088 76.968 cv
225.432 77.3999 223.632 76.968 222.264 75.96 cv
220.032 74.376 218.88 71.856 218.592 69.1919 cv
217.656 61.9199 211.68 61.344 206.28 66.5281 cv
205.92 66.96 205.704 67.248 205.632 67.5361 cv
206.064 67.5361 206.496 67.5361 206.856 67.6079 cv
208.584 68.04 209.664 69.8398 209.232 71.5679 cv
208.8 73.3679 207 74.448 205.272 73.9438 cv
202.68 73.2959 202.104 70.0559 202.896 67.6079 cv
205.344 60.408 219.168 59.04 224.712 62.064 cv
ef
108.432 70.8481 mo
108.432 70.8481 105.768 63.2161 101.088 59.4719 cv
97.416 56.52 93.3838 52.9919 92.0161 48.312 cv
92.0161 48.312 97.416 50.4719 100.368 54.4321 cv
103.392 58.3921 106.488 65.0161 107.208 67.104 cv
107.928 69.1201 108.432 70.8481 108.432 70.8481 cv
ef
102.384 116.784 mo
104.544 115.92 106.776 115.272 109.152 114.768 cv
116.712 113.616 125.712 114.624 130.824 121.032 cv
133.56 124.776 134.208 129.528 131.04 133.272 cv
131.04 133.272 131.04 133.2 131.04 133.128 cv
130.968 132.84 130.896 132.552 130.896 132.192 cv
129.816 124.992 123.984 118.872 117.144 116.568 cv
111.96 115.128 106.632 115.632 101.736 117.576 cv
102.384 116.784 li
ef
112.608 95.9761 mo
124.848 88.9199 138.096 84.0959 152.208 82.3679 cv
158.976 81.792 165.6 81.72 172.008 82.0801 cv
178.344 82.8721 184.464 84.0959 190.224 85.752 cv
195.84 87.696 201.168 90.072 206.064 92.8081 cv
217.656 100.152 226.656 109.368 231.984 121.68 cv
232.416 121.392 232.92 121.248 233.424 121.248 cv
233.496 121.248 li
234.144 121.32 234.792 121.536 235.224 121.968 cv
221.4 90.5039 186.264 76.968 153.432 80.4241 cv
142.56 81.6479 130.68 84.4561 121.248 90.2161 cv
118.296 92.0161 115.416 93.96 112.608 95.9761 cv
ef
352.728 73.8 mo
355.176 69.624 356.544 69.48 354.384 65.592 cv
354.168 65.2319 353.88 65.0161 353.52 64.656 cv
354.168 64.9438 354.888 65.2319 355.536 65.592 cv
359.208 67.5361 360.216 70.7759 359.28 74.1599 cv
361.224 69.7681 365.112 67.6799 372.456 64.8 cv
368.496 68.9041 366.336 72.144 364.32 74.6641 cv
364.896 72.72 376.776 68.2559 378.144 68.832 cv
378.144 68.832 376.488 71.4241 372.528 74.448 cv
369.864 76.4639 366.768 77.4719 366.264 77.9041 cv
369.36 77.3281 373.248 76.968 378.792 75.4561 cv
372.456 80.4961 368.712 82.656 364.176 82.512 cv
367.632 83.304 370.008 85.824 369.936 89.928 cv
369.936 90.6479 369.864 91.4399 369.72 92.1599 cv
369.648 91.728 369.576 91.2959 369.36 90.936 cv
366.984 87.1201 366.192 88.272 361.368 88.416 cv
357.912 88.488 352.512 85.752 349.488 85.5361 cv
350.784 82.8721 351 76.752 352.728 73.8 cv
ef
347.688 84.96 mo
348.84 84.96 349.704 85.896 349.704 86.9761 cv
349.704 88.1279 348.84 88.9919 347.688 88.9919 cv
346.608 88.9919 345.672 88.1279 345.672 86.9761 cv
345.672 85.896 346.608 84.96 347.688 84.96 cv
ef
167.544 72.2161 mo
172.152 63.072 171.864 56.8081 174.6 52.5601 cv
178.92 46.0801 181.152 46.0801 177.984 39.6719 cv
177.696 39.0959 177.192 38.592 176.76 38.0879 cv
177.768 38.592 178.848 39.0959 179.856 39.7441 cv
187.056 44.064 187.272 51.48 182.88 58.032 cv
180.072 62.28 174.168 64.4399 167.544 72.2161 cv
ef
164.088 72.864 mo
168.048 71.928 172.08 70.5601 176.04 68.76 cv
191.664 60.696 203.904 45.72 201.744 27.2161 cv
199.944 17.28 192.816 7.48804 181.872 7.56006 cv
179.28 7.63208 176.832 8.49609 174.312 8.92798 cv
175.536 8.13599 175.536 6.12012 174.6 5.11206 cv
181.512 4.03198 187.128 4.32007 193.176 8.20801 cv
205.344 17.208 206.208 32.9041 200.808 46.0081 cv
193.824 60.9121 180.216 70.416 164.736 74.1599 cv
164.52 73.728 164.304 73.2959 164.088 72.864 cv
ef
168.912 7.99194 mo
168.48 8.56787 161.28 5.47192 157.248 9.86401 cv
153.216 14.3281 152.064 15.9121 152.064 15.9121 cv
152.064 15.9121 155.736 17.064 160.848 15.0479 cv
165.888 13.104 169.344 7.41602 168.912 7.99194 cv
ef
187.056 59.5439 mo
190.872 53.928 193.032 47.6641 193.248 40.824 cv
193.176 33.1201 190.8 24.408 183.6 20.448 cv
179.496 18.2881 174.672 18.4321 171.504 22.104 cv
171.504 22.104 171.504 22.104 171.576 22.176 cv
171.936 22.176 172.224 22.104 172.512 22.104 cv
179.856 22.032 186.84 26.856 190.152 33.1919 cv
194.112 41.5439 192.168 51.48 187.344 59.1121 cv
187.272 59.1841 183.24 65.1599 187.056 59.5439 cv
ef
176.832 70.344 mo
179.496 70.0559 181.944 69.696 184.248 69.2639 cv
192.888 67.3201 201.168 64.2241 208.152 58.5361 cv
214.992 52.7041 219.744 44.7119 220.968 35.7119 cv
218.016 38.376 215.568 41.4719 213.12 44.5679 cv
208.728 49.896 204.264 55.0801 199.08 59.616 cv
194.472 63.4321 189.72 66.384 184.104 68.4719 cv
181.872 69.1919 179.496 69.8398 176.832 70.344 cv
ef
204.336 28.584 mo
206.064 20.52 204.48 15.624 205.848 11.8081 cv
207.864 5.83203 209.592 5.32813 205.848 1.00806 cv
205.488 .575928 204.984 .359863 204.552 0 cv
205.416 .216064 206.352 .359863 207.288 .647949 cv
213.768 2.59204 215.496 8.35205 213.408 14.3999 cv
212.112 18.2161 207.936 21.168 204.336 28.584 cv
ef
104.904 113.688 mo
114.48 110.088 120.672 111.024 125.136 108.72 cv
132.048 105.12 132.336 102.888 138.384 106.632 cv
138.96 106.992 139.32 107.568 139.824 108.072 cv
139.464 106.992 139.032 105.912 138.528 104.832 cv
134.928 97.272 127.584 96.2639 120.6 99.936 cv
116.064 102.24 113.328 107.928 104.904 113.688 cv
ef
407.448 147.456 mo
417.6 146.52 423.36 149.112 428.328 148.104 cv
435.96 146.448 436.752 144.432 441.576 149.688 cv
442.008 150.12 442.296 150.768 442.584 151.416 cv
442.512 150.264 442.44 149.112 442.224 147.888 cv
440.856 139.68 434.016 136.728 426.24 138.384 cv
421.272 139.464 417.096 144.144 407.448 147.456 cv
ef
335.232 101.088 mo
345.384 100.224 351.144 102.816 356.112 101.736 cv
363.672 100.08 364.536 98.064 369.36 103.32 cv
369.792 103.824 370.08 104.472 370.368 105.048 cv
370.296 103.896 370.224 102.744 370.008 101.592 cv
368.568 93.312 361.728 90.3599 354.024 92.0161 cv
349.056 93.0959 344.88 97.7759 335.232 101.088 cv
ef
320.256 102.24 mo
326.016 93.8159 326.592 87.552 329.976 83.8081 cv
335.088 77.9761 337.32 78.1919 335.088 71.4241 cv
334.872 70.7759 334.44 70.272 334.008 69.696 cv
335.016 70.344 335.952 70.9919 336.888 71.7119 cv
343.44 76.968 342.648 84.384 337.392 90.3599 cv
334.08 94.104 327.888 95.4719 320.256 102.24 cv
ef
284.688 119.952 mo
286.848 123.552 282.456 123.84 284.904 126.648 cv
287.352 129.456 291.528 126.792 291.312 123.048 cv
291.168 119.304 286.776 117.648 286.776 117.648 cv
286.776 117.648 289.728 117.36 290.88 117.648 cv
297.648 119.304 296.424 126.144 293.904 129.816 cv
292.104 132.552 294.768 136.656 298.152 135.072 cv
301.536 133.56 300.384 129.456 300.528 127.512 cv
300.672 125.568 301.176 125.424 301.176 125.424 cv
301.176 125.424 305.712 130.176 303.768 134.856 cv
301.824 139.464 300.528 138.528 298.296 139.536 cv
296.136 140.544 295.416 143.712 297.288 145.152 cv
300.312 147.384 304.992 142.704 305.784 139.032 cv
306 138.024 306 137.664 306.576 138.816 cv
307.584 140.688 307.296 143.568 304.416 146.952 cv
301.536 150.408 299.16 150.768 296.64 149.328 cv
294.12 147.816 291.888 149.184 292.68 151.848 cv
293.472 154.584 299.448 152.928 301.392 151.92 cv
303.264 150.912 304.2 150.552 304.128 150.48 cv
304.056 150.48 303.912 151.848 303.336 153.432 cv
300.888 160.128 286.272 163.512 284.616 154.8 cv
283.896 151.128 286.848 146.16 282.96 147.024 cv
279.144 147.888 278.568 154.656 281.448 158.328 cv
289.944 169.2 300.816 162.504 306 151.92 cv
310.176 143.28 313.776 152.28 307.368 159.624 cv
304.776 162.576 304.848 166.104 307.224 168.408 cv
308.016 169.056 308.664 169.272 309.312 169.272 cv
310.32 166.68 312.264 165.096 313.992 165.6 cv
315.72 166.176 316.512 168.912 315.576 171.792 cv
315.432 172.296 315.288 172.656 315.072 173.088 cv
315.144 173.592 315.216 174.24 315.504 174.96 cv
316.584 178.056 319.608 179.424 321.768 178.704 cv
324 178.056 324.576 178.776 324.576 178.776 cv
328.608 181.584 343.008 176.976 338.976 173.664 cv
335.592 171.072 325.296 183.744 319.968 171.576 cv
316.872 164.448 319.536 146.016 309.744 143.136 cv
308.88 142.92 308.304 142.848 308.304 142.848 cv
308.304 142.92 309.024 142.344 309.24 141.12 cv
311.184 129.312 302.904 119.952 293.184 116.424 cv
286.128 113.832 279 114.408 272.88 118.8 cv
271.152 120.024 270.072 121.104 270.072 121.104 cv
271.512 120.312 li
274.752 118.656 282.24 115.992 284.688 119.952 cv
ef
279.216 80.3521 mo
279.216 78.9839 279.072 77.616 278.784 76.3201 cv
279.648 76.824 280.368 77.5439 280.872 78.2639 cv
281.592 79.272 282.024 80.4241 282.312 81.5759 cv
283.32 77.616 283.536 73.4399 283.896 69.1919 cv
285.336 64.8721 287.352 70.272 287.64 71.928 cv
289.728 81.5759 286.704 90.72 278.856 96.408 cv
280.728 95.3281 282.528 94.176 284.256 92.9519 cv
294.768 85.104 299.52 68.4719 288 58.968 cv
283.896 55.728 278.64 55.2241 274.968 58.248 cv
275.04 58.3201 275.112 58.4639 275.184 58.5361 cv
276.12 60.3359 275.4 62.4961 273.6 63.4321 cv
271.8 64.2959 269.64 63.5759 268.704 61.8481 cv
267.84 60.0479 268.128 58.176 269.064 56.52 cv
275.544 44.7119 291.312 52.1279 295.344 62.3521 cv
299.232 72.072 296.856 83.0879 289.944 90.5759 cv
282.528 98.6401 264.168 107.712 254.736 97.9919 cv
256.608 98.6401 258.696 99.072 260.856 99.072 cv
270.864 99.072 279.216 91.0801 279.216 80.3521 cv
ef
182.376 109.728 mo
181.512 110.304 180.648 111.024 180.288 111.96 cv
180.72 114.192 183.24 114.552 185.184 114.264 cv
186.264 114.048 187.272 113.616 188.136 112.968 cv
186.336 116.208 183.888 118.944 181.44 121.824 cv
179.712 125.496 184.32 123.336 185.544 122.472 cv
192.816 117.576 196.56 109.944 195.12 101.52 cv
195.696 103.32 196.128 105.192 196.416 107.064 cv
198.216 118.512 190.872 132.048 177.696 130.896 cv
173.16 130.392 169.488 127.44 169.056 123.264 cv
169.128 123.264 169.272 123.264 169.416 123.192 cv
171.072 122.616 171.936 120.816 171.36 119.088 cv
170.784 117.432 168.984 116.568 167.328 117.144 cv
165.6 117.72 164.664 119.016 164.232 120.672 cv
161.064 132.192 175.608 137.232 184.536 133.272 cv
192.96 129.528 198.288 121.104 198.576 112.032 cv
198.792 104.04 194.688 90.936 186.48 86.76 cv
188.712 89.3521 190.08 92.8081 190.08 96.624 cv
190.08 102.456 186.912 107.424 182.376 109.728 cv
ef
261.648 104.4 mo
264.24 104.904 266.688 105.192 268.992 105.48 cv
277.848 106.056 286.632 105.48 294.912 102.024 cv
303.192 98.28 310.032 92.0161 313.704 83.7361 cv
310.176 85.4639 306.864 87.7681 303.624 90 cv
298.008 93.8879 292.176 97.5601 285.984 100.44 cv
280.44 102.816 275.04 104.256 269.064 104.688 cv
266.688 104.76 264.312 104.688 261.648 104.4 cv
ef
352.8 161.928 mo
359.568 162.288 366.048 160.92 372.024 157.536 cv
378.504 153.504 384.768 146.952 384.552 138.816 cv
384.192 134.136 381.6 130.104 376.776 129.312 cv
376.776 129.312 376.848 129.312 376.848 129.384 cv
376.992 129.672 377.208 129.96 377.352 130.176 cv
381.24 136.368 380.736 144.864 376.992 150.984 cv
371.808 158.688 362.304 162.144 353.304 161.928 cv
353.232 161.928 346.032 161.568 352.8 161.928 cv
ef
378.36 156.816 mo
382.464 151.92 383.184 148.032 385.488 145.872 cv
389.088 142.56 390.456 142.848 389.52 138.456 cv
389.376 138.096 389.16 137.736 388.944 137.304 cv
389.52 137.736 390.096 138.24 390.6 138.744 cv
394.344 142.488 393.408 147.024 389.808 150.408 cv
387.432 152.64 383.544 153.072 378.36 156.816 cv
ef
388.656 177.624 mo
394.632 175.464 408.24 177.768 403.128 186.984 cv
402.192 188.64 401.328 191.232 404.64 190.584 cv
407.52 190.08 408.744 186.768 408.528 184.176 cv
408.456 183.312 408.24 182.52 407.952 181.728 cv
408.96 182.016 409.824 182.52 410.544 183.384 cv
411.048 184.248 411.264 185.112 410.904 186.048 cv
410.616 186.696 410.256 187.272 410.328 188.064 cv
410.4 188.352 410.616 188.568 410.904 188.712 cv
411.768 189.144 412.776 188.64 413.352 187.92 cv
414.216 186.768 414.216 185.4 413.712 184.032 cv
412.848 182.088 411.048 180.864 409.032 180.576 cv
409.896 180.432 410.688 180.144 411.48 179.712 cv
412.776 178.848 413.712 177.552 413.712 175.896 cv
413.64 174.816 413.136 173.664 411.984 173.52 cv
411.624 173.448 411.264 173.52 411.048 173.736 cv
410.4 174.384 410.4 175.176 410.184 175.968 cv
409.896 177.12 409.104 177.768 408.024 178.128 cv
407.232 178.416 406.44 178.416 405.648 178.272 cv
404.28 176.904 402.552 175.896 400.752 175.32 cv
398.52 174.6 394.416 174.816 395.208 172.008 cv
395.928 169.488 400.68 170.928 402.264 172.44 cv
404.352 174.384 405.864 173.232 404.784 170.496 cv
404.208 168.84 402.768 167.688 401.112 167.112 cv
392.328 164.304 393.624 173.376 388.872 171.72 cv
386.136 170.712 388.872 166.68 392.76 166.536 cv
395.568 166.464 395.928 164.448 393.264 163.296 cv
391.68 162.576 389.808 162.72 388.296 163.512 cv
385.848 164.736 384.408 167.112 383.688 169.704 cv
381.672 176.688 375.624 176.328 371.088 170.352 cv
370.8 169.92 370.656 169.56 370.656 169.272 cv
371.016 169.416 371.448 169.416 371.88 169.416 cv
373.68 169.2 374.976 167.616 374.832 165.816 cv
374.616 164.016 373.032 162.72 371.232 162.864 cv
368.568 163.152 367.488 166.248 367.92 168.84 cv
369.216 176.328 382.68 179.784 388.656 177.624 cv
ef
354.312 138.672 mo
353.304 138.096 352.152 137.376 351.576 136.296 cv
351.864 134.064 354.384 133.488 356.256 133.704 cv
357.408 133.848 358.416 134.136 359.352 134.64 cv
357.264 131.616 354.672 129.096 352.008 126.432 cv
349.92 122.904 354.672 124.704 356.04 125.424 cv
363.672 129.672 367.992 137.016 367.272 145.584 cv
367.632 143.712 367.92 141.84 368.064 139.968 cv
368.928 128.376 360.576 115.488 347.544 117.648 cv
343.008 118.584 339.552 121.752 339.48 125.928 cv
339.624 125.928 339.696 126 339.84 126 cv
341.568 126.432 342.576 128.16 342.144 129.888 cv
341.712 131.616 339.984 132.696 338.256 132.192 cv
336.528 131.76 335.448 130.536 334.872 128.952 cv
330.84 117.72 344.88 111.528 354.096 114.768 cv
362.88 117.792 368.856 125.784 369.792 134.784 cv
370.872 144.432 366.192 162.144 354.096 162.648 cv
358.992 160.704 362.448 156.384 362.448 151.416 cv
362.448 146.016 358.632 141.48 354.312 138.672 cv
ef
347.184 175.608 mo
347.04 176.616 345.312 181.296 345.672 182.232 cv
347.256 183.312 348.984 182.016 349.992 180.72 cv
350.496 179.928 350.856 179.136 351 178.2 cv
351.792 181.224 351.936 184.32 352.152 187.488 cv
353.304 190.728 354.744 186.696 355.032 185.472 cv
356.544 178.272 354.312 171.432 348.48 167.184 cv
349.848 167.976 351.216 168.84 352.512 169.776 cv
360.36 175.68 363.888 188.064 355.248 195.12 cv
352.224 197.568 348.264 197.928 345.6 195.696 cv
345.6 195.624 345.672 195.48 345.744 195.408 cv
346.392 194.112 345.816 192.456 344.52 191.808 cv
343.152 191.16 341.568 191.664 340.92 193.032 cv
340.2 194.328 340.416 195.696 341.136 196.992 cv
345.96 205.776 357.696 200.232 360.792 192.6 cv
363.672 185.328 361.944 177.12 356.76 171.504 cv
353.088 167.544 345.672 163.152 339.12 162.864 cv
339.84 163.224 340.56 163.728 341.208 164.232 cv
346.752 168.696 347.688 172.152 347.184 175.608 cv
ef
115.056 96.7681 mo
121.392 92.376 128.448 89.856 136.152 89.5679 cv
144.864 89.6401 154.728 92.2319 159.336 100.296 cv
161.784 104.904 161.712 110.376 157.536 113.976 cv
157.536 113.976 157.536 113.976 157.536 113.832 cv
157.464 113.544 157.536 113.184 157.536 112.824 cv
157.608 104.544 152.064 96.696 144.864 92.9519 cv
135.36 88.5601 124.128 90.936 115.632 96.408 cv
115.488 96.48 108.792 101.088 115.056 96.7681 cv
ef
145.152 83.52 mo
149.976 85.104 152.064 87.48 154.584 87.9839 cv
158.4 88.7041 159.192 87.9839 160.344 91.3679 cv
160.488 91.656 160.416 92.0161 160.488 92.376 cv
160.632 91.8 160.848 91.2241 160.992 90.6479 cv
162 86.616 159.48 83.8799 155.592 83.0879 cv
153.072 82.584 150.192 83.8799 145.152 83.52 cv
ef
292.608 111.96 mo
292.608 111.96 304.704 115.92 313.848 113.76 cv
321.12 112.032 329.4 110.376 336.6 113.112 cv
336.6 113.112 328.608 117.792 320.832 117.72 cv
312.984 117.576 301.68 115.128 298.44 114.048 cv
295.128 112.896 292.608 111.96 292.608 111.96 cv
ef
322.992 157.752 mo
330.264 154.944 333.36 151.272 337.104 150.336 cv
342.864 148.896 344.088 149.976 345.672 144.792 cv
345.816 144.288 345.744 143.784 345.744 143.208 cv
346.104 144.072 346.392 144.864 346.68 145.8 cv
348.48 151.92 344.808 156.168 338.904 157.68 cv
335.16 158.616 330.696 156.816 322.992 157.752 cv
ef
340.776 162.648 mo
347.544 162.288 354.024 163.656 359.928 167.04 cv
366.48 171.072 372.744 177.552 372.456 185.76 cv
372.168 190.44 369.576 194.472 364.752 195.264 cv
364.752 195.264 364.752 195.264 364.824 195.192 cv
364.968 194.904 365.112 194.616 365.328 194.4 cv
369.216 188.208 368.64 179.712 364.968 173.592 cv
359.784 165.888 350.28 162.432 341.28 162.648 cv
341.208 162.648 333.936 163.008 340.776 162.648 cv
ef
217.728 80.28 mo
223.704 88.5601 224.424 94.824 227.88 98.5679 cv
233.136 104.256 235.296 103.968 233.28 110.808 cv
233.064 111.384 232.632 111.96 232.272 112.536 cv
233.208 111.888 234.144 111.168 235.08 110.448 cv
241.488 105.048 240.48 97.6321 235.152 91.8 cv
231.696 88.1279 225.504 86.9041 217.728 80.28 cv
ef
207.072 76.968 mo
210.528 81.792 210.96 85.4639 212.976 87.624 cv
216 90.936 217.296 90.72 216.072 94.752 cv
216 95.04 215.784 95.3999 215.496 95.76 cv
216.072 95.3281 216.648 94.968 217.152 94.5361 cv
220.896 91.3679 220.32 87.0479 217.224 83.6641 cv
215.208 81.5039 211.608 80.856 207.072 76.968 cv
ef
199.008 75.384 mo
201.384 78.696 201.672 81.2161 203.112 82.728 cv
205.2 85.104 206.136 84.96 205.272 87.696 cv
205.2 87.9839 205.056 88.2 204.912 88.416 cv
205.272 88.2 205.632 87.9121 205.992 87.552 cv
208.584 85.3921 208.224 82.3679 206.064 80.064 cv
204.624 78.552 202.176 78.0479 199.008 75.384 cv
ef
171.72 5.11206 mo
172.944 5.11206 174.024 6.19189 174.024 7.48804 cv
174.024 8.78394 172.944 9.79199 171.72 9.79199 cv
170.424 9.79199 169.344 8.78394 169.344 7.48804 cv
169.344 6.19189 170.424 5.11206 171.72 5.11206 cv
ef
111.312 75.7441 mo
112.968 75.7441 114.336 77.1121 114.336 78.8398 cv
114.336 80.4961 112.968 81.864 111.312 81.864 cv
109.584 81.864 108.216 80.4961 108.216 78.8398 cv
108.216 77.1121 109.584 75.7441 111.312 75.7441 cv
ef
80.1357 125.784 mo
81.936 125.784 83.3037 127.152 83.3037 128.88 cv
83.3037 130.68 81.936 132.048 80.1357 132.048 cv
78.4077 132.048 76.9678 130.68 76.9678 128.88 cv
76.9678 127.152 78.4077 125.784 80.1357 125.784 cv
ef
269.496 119.736 mo
271.656 119.736 273.384 121.464 273.384 123.552 cv
273.384 125.712 271.656 127.44 269.496 127.44 cv
267.408 127.44 265.68 125.712 265.68 123.552 cv
265.68 121.464 267.408 119.736 269.496 119.736 cv
ef
183.672 80.928 mo
185.76 80.928 187.488 82.656 187.488 84.7441 cv
187.488 86.9041 185.76 88.5601 183.672 88.5601 cv
181.512 88.5601 179.784 86.9041 179.784 84.7441 cv
179.784 82.656 181.512 80.928 183.672 80.928 cv
ef
251.64 94.104 mo
254.664 94.104 257.112 96.48 257.112 99.5039 cv
257.112 102.528 254.664 104.976 251.64 104.976 cv
248.616 104.976 246.24 102.528 246.24 99.5039 cv
246.24 96.48 248.616 94.104 251.64 94.104 cv
ef
80.4961 130.104 mo
80.4961 130.104 91.0078 130.176 97.7041 126.144 cv
102.96 122.904 109.08 119.52 115.416 119.88 cv
115.416 119.88 110.376 125.568 104.184 127.44 cv
97.9917 129.384 88.4878 130.32 85.6079 130.248 cv
82.728 130.248 80.4961 130.104 80.4961 130.104 cv
ef
305.784 59.3281 mo
302.256 66.0239 303.264 74.8081 310.248 78.9121 cv
314.208 81 319.68 80.7839 322.2 76.5361 cv
323.496 74.1599 323.136 72 321.696 69.9121 cv
320.472 68.1841 322.632 68.3281 323.64 68.9761 cv
327.168 71.064 326.664 76.032 324.648 78.9839 cv
320.112 85.176 311.4 84.312 306.216 79.5601 cv
299.448 72.864 300.024 62.6401 305.64 55.512 cv
313.488 46.4399 326.304 45.6479 336.096 51.9121 cv
347.472 59.76 350.712 74.304 345.312 86.76 cv
342.864 92.1599 338.688 97.344 333.36 100.296 cv
332.496 100.8 333.864 99.864 333.936 99.72 cv
344.232 92.0161 349.488 79.416 345.528 66.7441 cv
342.648 58.3201 336.168 51.9839 327.384 50.04 cv
318.816 48.4561 310.248 51.624 305.784 59.3281 cv
ef
444.312 178.992 mo
436.968 180.864 428.616 177.84 426.312 170.136 cv
425.16 165.744 426.672 160.488 431.352 159.048 cv
433.944 158.328 435.96 159.192 437.688 161.136 cv
439.056 162.72 439.416 160.56 439.056 159.408 cv
437.832 155.448 432.864 154.8 429.48 156.096 cv
422.424 159.048 421.272 167.76 424.728 173.952 cv
429.696 182.016 439.704 183.888 447.984 180 cv
458.64 174.528 462.384 162.216 458.496 151.272 cv
453.456 138.384 440.064 131.76 426.744 134.208 cv
420.912 135.36 414.864 138.24 410.832 142.704 cv
410.112 143.496 411.336 142.344 411.48 142.272 cv
421.416 134.064 434.88 131.832 446.256 138.6 cv
453.816 143.352 458.496 151.128 458.352 160.128 cv
457.92 168.84 452.808 176.472 444.312 178.992 cv
ef
175.032 321.696 mo
175.176 321.696 175.536 321.048 176.184 320.04 cv
181.44 311.832 192.816 307.008 201.888 312.408 cv
203.904 313.632 204.84 315.432 204.912 317.736 cv
205.056 322.776 204.768 325.368 206.712 325.8 cv
208.584 326.304 209.304 324.216 209.304 322.992 cv
209.304 321.768 213.624 321.984 212.4 324.288 cv
211.248 326.52 207.576 326.952 208.224 328.608 cv
208.656 329.688 211.104 330.336 212.544 329.04 cv
220.608 321.624 212.616 313.56 207.144 310.968 cv
206.28 310.536 205.632 310.104 205.632 310.104 cv
205.632 310.104 206.856 310.176 208.512 310.392 cv
218.376 311.688 226.656 328.536 216.72 332.136 cv
215.568 332.568 214.272 333.504 215.064 334.656 cv
215.856 335.88 220.464 334.656 218.304 336.024 cv
216.216 337.392 213.408 336.816 213.336 338.904 cv
213.264 340.92 216.072 342.72 218.16 340.128 cv
220.32 337.536 222.84 336.744 222.336 338.832 cv
222.192 339.336 220.824 339.696 220.68 340.128 cv
220.248 341.568 221.256 342.648 223.056 341.568 cv
231.264 336.456 229.464 324.936 225.72 320.616 cv
224.28 319.032 224.64 318.096 224.64 318.096 cv
224.64 318.096 225.864 319.032 227.232 320.616 cv
231.192 325.08 234.144 334.728 230.256 339.984 cv
229.464 341.136 228.24 342.144 226.512 343.368 cv
224.784 344.52 221.184 346.968 223.416 349.272 cv
224.352 350.208 226.152 349.704 227.808 347.76 cv
229.896 345.168 231.48 344.808 231.48 344.808 cv
231.48 344.808 230.472 348.84 227.808 350.64 cv
225.144 352.44 222.984 353.952 221.184 351.936 cv
219.384 349.848 218.16 348.624 215.928 348.48 cv
213.696 348.336 212.112 350.064 213.624 352.224 cv
215.136 354.384 219.456 354.24 220.032 355.248 cv
220.32 355.68 219.744 356.184 218.664 356.616 cv
213.768 358.272 208.584 356.184 206.424 351.504 cv
205.632 349.848 205.632 348.12 207.144 346.896 cv
214.632 341.064 205.416 340.2 204.48 346.248 cv
203.184 354.888 213.12 360.864 220.824 357.768 cv
234.648 352.296 240.048 334.152 231.264 322.128 cv
225.576 314.28 214.992 309.384 204.912 308.016 cv
193.104 306.36 181.584 309.672 175.392 320.4 cv
175.032 321.12 174.816 321.624 175.032 321.696 cv
ef
413.424 309.384 mo
413.136 302.472 410.904 298.872 411.192 295.488 cv
411.624 290.232 412.848 289.512 408.96 286.704 cv
408.6 286.488 408.168 286.344 407.664 286.2 cv
408.456 286.128 409.248 286.128 410.04 286.128 cv
415.728 286.344 418.248 290.664 417.888 295.992 cv
417.6 299.376 414.792 302.616 413.424 309.384 cv
ef
201.168 272.016 mo
202.32 265.68 203.976 264.888 199.512 261 cv
199.08 260.64 198.576 260.496 198.072 260.208 cv
199.008 260.28 200.016 260.28 200.952 260.424 cv
206.352 261.216 209.16 264.816 209.52 269.496 cv
209.88 263.088 213.84 258.696 221.688 251.784 cv
218.664 258.768 217.368 263.736 216 267.768 cv
215.856 265.176 228.672 254.16 230.616 254.232 cv
230.616 254.232 229.68 258.264 226.152 263.808 cv
223.704 267.552 220.32 270.216 219.888 270.936 cv
223.56 268.848 228.168 266.616 234.432 262.296 cv
228.816 271.368 225.072 275.832 219.384 277.632 cv
224.064 277.128 228.168 279.144 229.896 284.328 cv
230.256 285.264 230.472 286.2 230.688 287.136 cv
230.328 286.632 230.04 286.128 229.68 285.84 cv
225 282.168 224.568 283.968 218.52 286.272 cv
214.272 287.928 206.28 286.992 202.464 288.072 cv
202.824 284.112 200.376 276.48 201.168 272.016 cv
ef
247.752 298.08 mo
219.528 288.936 193.968 300.672 175.032 321.48 cv
192.528 300.816 217.008 288.144 244.656 294.12 cv
264.168 298.656 279.216 311.904 296.28 321.552 cv
309.384 329.04 335.016 340.992 349.272 334.08 cv
353.736 331.56 357.192 328.104 358.704 323.136 cv
359.928 317.952 358.416 312.48 353.016 310.68 cv
351 310.176 348.912 310.464 347.04 309.384 cv
343.008 306.792 343.728 301.32 346.824 298.368 cv
351.936 293.76 358.272 296.064 362.664 300.24 cv
363.744 297.072 368.568 299.592 370.152 300.816 cv
379.512 308.16 378.792 323.064 371.736 331.704 cv
342 367.776 274.968 307.656 247.752 298.08 cv
f
236.232 298.944 mo
239.184 295.704 234.792 294.552 237.816 292.176 cv
240.912 289.8 244.584 293.328 243.648 297.144 cv
242.712 300.888 237.888 301.68 237.888 301.68 cv
237.888 301.68 240.912 302.616 242.064 302.544 cv
249.336 302.256 249.48 294.984 247.68 290.664 cv
246.456 287.568 249.984 283.896 253.08 286.2 cv
256.248 288.432 254.232 292.32 254.016 294.408 cv
253.728 296.424 254.232 296.64 254.232 296.64 cv
254.232 296.64 259.848 292.752 258.84 287.568 cv
257.76 282.456 256.248 283.104 254.16 281.664 cv
252.144 280.152 252.072 276.768 254.304 275.688 cv
257.76 274.032 261.648 279.72 261.72 283.68 cv
261.72 284.688 261.648 285.12 262.512 284.04 cv
263.952 282.312 264.24 279.36 261.936 275.256 cv
259.704 271.224 257.328 270.288 254.448 271.296 cv
251.568 272.304 249.552 270.432 250.92 267.84 cv
252.288 265.248 258.12 268.128 259.848 269.568 cv
261.576 271.008 262.44 271.512 262.368 271.584 cv
262.296 271.656 262.368 270.144 262.152 268.416 cv
261 261.072 246.744 254.664 243.216 263.16 cv
241.776 266.832 243.72 272.52 239.976 270.864 cv
236.232 269.208 237.024 262.152 240.696 258.984 cv
251.64 249.552 261.432 258.624 264.456 270.504 cv
267.048 280.224 272.52 271.728 267.48 262.944 cv
265.392 259.344 266.184 255.744 269.136 253.872 cv
272.088 252 273.384 255.672 276.048 254.304 cv
278.784 252.936 277.2 251.712 278.928 248.832 cv
280.656 245.952 284.04 245.16 286.128 246.24 cv
288.216 247.392 289.008 246.816 289.008 246.816 cv
293.616 244.728 307.512 252.432 302.688 254.88 cv
298.728 256.968 290.664 241.776 282.744 253.224 cv
278.136 259.848 277.2 279.288 266.544 280.224 cv
265.68 280.296 265.032 280.224 265.032 280.224 cv
265.032 280.224 265.68 280.944 265.608 282.24 cv
265.248 294.768 254.952 302.616 244.224 304.272 cv
236.448 305.496 229.32 303.408 223.92 297.72 cv
222.408 296.136 221.472 294.84 221.472 294.84 cv
222.84 295.848 li
225.864 298.224 232.92 302.472 236.232 298.944 cv
ef
125.568 321.336 mo
110.232 311.976 102.096 292.608 112.464 276.48 cv
118.872 267.48 132.12 262.224 141.264 270.576 cv
144.648 273.96 146.448 279.36 143.208 283.464 cv
140.112 286.992 137.088 284.544 133.344 284.904 cv
129.384 285.408 129.672 283.608 126.792 281.88 cv
122.04 279.36 118.008 286.632 117.072 290.16 cv
113.472 306 128.304 318.312 142.56 320.4 cv
166.464 323.064 184.968 304.416 188.568 281.88 cv
192.24 251.712 171.216 226.512 142.56 219.6 cv
103.752 211.536 68.3999 237.6 58.9678 274.824 cv
57.8877 279.432 57.2397 283.968 56.7358 288.648 cv
56.52 290.52 56.5918 287.208 56.5918 286.92 cv
58.248 245.592 94.4639 212.328 136.152 215.784 cv
167.472 219.456 192.456 243.36 193.176 275.688 cv
192.816 294.696 183.96 311.4 167.328 321.048 cv
153.936 328.032 139.032 328.608 125.568 321.336 cv
ef
350.208 345.024 mo
362.952 347.112 375.12 345.384 386.352 338.904 cv
399.384 330.624 408.024 316.944 406.728 301.176 cv
405.288 289.008 397.152 277.632 384.192 276.552 cv
377.712 276.264 366.84 281.304 368.28 289.224 cv
368.856 292.176 371.736 294.12 374.688 293.616 cv
377.64 293.04 379.584 290.16 379.008 287.208 cv
379.008 286.992 378.936 286.848 378.864 286.632 cv
385.416 283.752 392.832 286.776 397.44 293.112 cv
403.776 302.328 403.272 313.776 398.376 323.496 cv
390.096 338.832 373.608 346.032 356.688 345.672 cv
354.6 345.528 352.44 345.312 350.208 345.024 cv
ef
424.296 325.512 mo
425.304 326.664 426.024 327.888 426.816 329.184 cv
427.536 330.408 428.328 331.776 429.48 332.496 cv
432.144 332.208 432.864 329.328 432.72 327.096 cv
432.576 325.8 432.216 324.576 431.64 323.496 cv
435.096 326.016 437.976 329.112 441 332.28 cv
445.032 334.728 443.088 329.184 442.296 327.672 cv
437.544 318.6 429.192 313.416 419.256 313.992 cv
421.416 313.632 423.576 313.344 425.808 313.2 cv
439.272 312.552 453.96 322.632 451.08 337.68 cv
449.856 342.936 446.04 346.824 441.216 346.824 cv
441.216 346.68 441.144 346.536 441.144 346.392 cv
440.712 344.376 438.696 343.152 436.68 343.584 cv
434.664 344.088 433.44 346.104 433.872 348.048 cv
434.304 350.064 435.744 351.36 437.616 352.08 cv
450.504 357.12 458.136 340.92 454.608 330.12 cv
451.296 319.896 442.224 312.696 431.784 311.328 cv
422.136 310.032 405.216 313.56 400.32 323.712 cv
400.896 323.28 401.472 322.92 402.12 322.56 cv
409.68 318.024 418.32 319.104 424.296 325.512 cv
ef
426.744 276.84 mo
429.336 277.848 432.288 278.136 435.096 277.56 cv
435.744 280.296 437.256 282.888 439.344 284.76 cv
443.736 288.504 449.928 289.152 454.752 285.84 cv
458.856 282.816 460.656 277.416 458.208 272.736 cv
456.264 269.352 452.448 267.408 448.704 268.92 cv
444.24 270.72 450.288 270.648 453.096 272.592 cv
459.216 277.056 449.352 286.848 441.936 282.816 cv
441.648 282.6 441.36 282.456 441.072 282.24 cv
441.216 282.24 441.36 282.312 441.504 282.384 cv
444.744 283.176 448.56 282.816 450.936 280.224 cv
452.016 279 452.664 277.344 452.304 275.688 cv
452.016 274.536 451.08 273.24 449.712 273.744 cv
449.352 274.32 449.28 275.04 449.136 275.688 cv
449.064 276.264 448.92 276.84 448.704 277.344 cv
447.696 279.576 445.392 281.016 443.016 281.376 cv
441.936 281.52 440.784 281.448 439.776 281.16 cv
439.704 281.088 439.632 281.016 439.56 280.872 cv
441.648 281.16 443.88 280.728 445.392 279.144 cv
446.184 278.208 446.616 276.984 446.4 275.76 cv
446.184 274.896 445.464 273.96 444.456 274.32 cv
444.168 274.68 444.096 275.256 444.024 275.76 cv
443.952 276.192 443.808 276.552 443.664 276.984 cv
442.944 278.64 441.216 279.72 439.488 279.936 cv
439.272 280.008 438.984 280.008 438.768 280.008 cv
438.048 279.072 437.472 278.064 437.04 276.984 cv
438.336 276.48 439.56 275.76 440.64 274.824 cv
440.712 274.752 441.576 273.96 441.432 273.816 cv
441.288 273.6 439.992 274.248 439.848 274.32 cv
439.056 274.608 438.192 274.896 437.4 275.112 cv
439.344 273.24 441 272.016 442.008 270.432 cv
443.52 267.984 444.6 265.32 443.592 264.096 cv
442.08 263.736 440.136 265.824 438.624 268.272 cv
437.544 269.856 437.112 271.944 436.32 274.536 cv
436.104 273.672 436.032 272.736 435.96 271.8 cv
435.96 271.656 435.96 270.288 435.744 270.216 cv
435.528 270.144 435.168 271.224 435.168 271.368 cv
434.736 272.736 434.592 274.176 434.736 275.544 cv
433.584 275.616 432.432 275.544 431.28 275.328 cv
431.208 275.112 431.064 274.824 430.992 274.608 cv
430.488 272.952 430.704 270.936 431.928 269.568 cv
432.216 269.208 432.504 268.992 432.864 268.704 cv
433.224 268.416 433.728 268.128 433.944 267.696 cv
433.872 266.616 432.72 266.4 431.856 266.616 cv
430.632 266.904 429.696 267.84 429.264 268.92 cv
428.4 271.008 428.976 273.24 430.128 274.968 cv
430.056 274.968 429.912 274.896 429.84 274.896 cv
429.12 274.032 428.544 273.096 428.184 272.016 cv
427.464 269.784 427.824 267.048 429.408 265.176 cv
429.768 264.744 430.2 264.456 430.704 264.096 cv
431.208 263.736 431.856 263.304 432.216 262.728 cv
432.072 261.288 430.488 261 429.336 261.216 cv
427.68 261.648 426.456 262.872 425.808 264.384 cv
424.512 267.696 425.808 271.224 427.968 273.816 cv
428.04 273.96 428.184 274.104 428.328 274.176 cv
427.968 274.032 427.68 273.816 427.392 273.6 cv
420.48 268.704 425.088 255.528 431.784 259.2 cv
434.736 260.856 437.328 266.328 436.968 261.576 cv
436.752 257.544 433.296 254.88 429.408 254.592 cv
424.152 254.448 420.048 258.336 419.112 263.376 cv
418.248 269.208 421.488 274.464 426.744 276.84 cv
ef
438.408 288.864 mo
438.984 292.68 444.168 299.376 447.624 293.976 cv
448.272 292.968 449.352 291.816 450 293.688 cv
450.576 295.416 449.136 297 447.696 297.648 cv
445.248 298.656 442.512 297.792 440.64 296.064 cv
439.632 295.128 438.552 292.824 437.328 294.048 cv
436.176 295.128 438.264 297.288 439.56 297.72 cv
441.216 298.224 441 299.448 439.272 299.664 cv
438.192 299.808 437.112 299.376 436.392 298.656 cv
432.288 294.696 437.544 292.752 435.312 290.736 cv
433.944 289.512 432.576 292.176 433.656 294.264 cv
434.448 295.848 433.44 296.568 432 295.488 cv
431.208 294.84 430.776 293.832 430.704 292.752 cv
430.704 291.096 431.496 289.656 432.72 288.504 cv
433.8 287.424 434.376 287.352 434.664 285.696 cv
434.88 284.4 434.592 283.248 433.008 282.96 cv
433.08 283.824 432.936 284.76 432.504 285.408 cv
432.288 285.768 432 286.056 431.568 286.272 cv
430.92 286.56 430.272 286.488 429.696 286.128 cv
429.12 285.768 428.76 285.192 428.76 284.544 cv
428.76 284.04 428.904 283.608 429.12 283.248 cv
429.552 282.6 430.272 282.024 431.064 281.736 cv
430.128 280.512 428.976 280.656 427.896 281.448 cv
426.528 282.384 426.744 282.96 426.24 284.472 cv
425.736 285.984 424.8 287.352 423.216 288.072 cv
422.28 288.504 421.2 288.504 420.192 288.072 cv
418.608 287.208 418.896 286.056 420.624 286.056 cv
423 286.128 424.8 283.752 423.144 283.032 cv
420.264 281.88 420.768 287.496 415.512 285.48 cv
414.504 285.12 413.712 284.4 413.352 283.32 cv
412.776 281.664 413.784 281.016 415.008 282.24 cv
415.872 283.176 418.752 284.184 419.256 282.672 cv
419.832 281.016 417.312 281.016 416.016 280.512 cv
413.64 279.576 411.624 277.56 411.48 274.896 cv
411.48 273.312 412.272 271.368 414.072 271.08 cv
416.088 270.792 415.512 272.376 414.864 273.312 cv
411.48 278.784 419.76 280.584 423.432 279.432 cv
426.672 278.424 431.208 278.28 432.648 281.448 cv
436.104 281.376 437.904 285.48 438.408 288.864 cv
ef
413.496 309.384 mo
419.976 307.08 424.152 307.8 427.248 306.288 cv
431.928 303.984 432.144 302.544 436.176 305.136 cv
436.536 305.424 436.824 305.784 437.112 306.144 cv
436.896 305.424 436.608 304.632 436.32 303.912 cv
434.016 298.728 429.048 297.936 424.296 300.312 cv
421.2 301.824 419.256 305.568 413.496 309.384 cv
ef
414.648 307.008 mo
419.256 300.168 420.84 296.28 423.288 292.968 cv
425.736 289.656 427.464 288.072 429.192 287.064 cv
428.76 289.224 427.824 291.168 425.376 294.48 cv
423 297.792 419.76 300.6 414.648 307.008 cv
ef
349.704 345.456 mo
352.008 345.456 354.096 345.456 356.112 345.384 cv
363.744 344.664 371.16 342.936 377.712 338.832 cv
384.264 334.584 389.232 328.248 391.248 320.688 cv
388.44 322.704 385.92 325.08 383.544 327.456 cv
379.224 331.488 374.832 335.448 369.864 338.76 cv
365.544 341.496 361.08 343.44 356.112 344.664 cv
354.096 345.024 352.008 345.312 349.704 345.456 cv
ef
349.704 345.24 mo
352.08 345.096 354.168 345.096 356.184 345.096 cv
363.816 345.528 371.304 347.04 378 350.856 cv
384.624 354.888 389.808 361.008 392.112 368.496 cv
389.232 366.624 386.712 364.32 384.192 362.016 cv
379.728 358.128 375.192 354.384 370.152 351.216 cv
365.76 348.624 361.224 346.824 356.184 345.816 cv
354.168 345.528 352.08 345.312 349.704 345.24 cv
ef
370.728 346.032 mo
377.28 348.12 380.16 351.216 383.472 351.864 cv
388.656 352.872 389.736 351.864 391.32 356.4 cv
391.464 356.76 391.464 357.264 391.536 357.696 cv
391.752 356.976 392.04 356.256 392.184 355.464 cv
393.48 349.992 390.024 346.32 384.768 345.312 cv
381.456 344.664 377.568 346.464 370.728 346.032 cv
ef
181.224 263.88 mo
183.6 260.136 185.832 264.168 187.344 260.64 cv
188.928 257.04 184.536 254.376 181.08 256.176 cv
177.624 258.048 178.128 262.944 178.128 262.944 cv
178.128 262.944 176.472 260.28 176.256 259.128 cv
174.744 252 181.656 250.056 186.336 250.704 cv
189.648 251.136 192.312 246.816 189.36 244.296 cv
186.336 241.848 183.024 244.8 181.152 245.52 cv
179.208 246.312 178.848 245.88 178.848 245.88 cv
178.848 245.88 181.296 239.472 186.552 239.184 cv
191.808 238.824 191.52 240.552 193.464 242.136 cv
195.408 243.792 198.648 242.928 199.152 240.552 cv
199.872 236.736 193.392 234.432 189.576 235.368 cv
188.568 235.584 188.208 235.8 189 234.72 cv
190.296 232.848 193.104 231.84 197.64 232.992 cv
202.176 234.216 203.616 236.232 203.4 239.328 cv
203.112 242.352 205.416 243.864 207.648 241.848 cv
209.808 239.904 205.56 234.936 203.688 233.64 cv
201.888 232.344 201.168 231.624 201.096 231.768 cv
201.096 231.768 202.464 231.336 204.192 231.192 cv
211.68 230.4 221.4 242.568 214.056 248.112 cv
210.888 250.488 204.84 249.984 207.432 253.224 cv
210.024 256.392 216.576 253.872 218.736 249.48 cv
225.144 236.52 213.912 229.392 201.6 229.32 cv
191.52 229.32 198.36 221.832 208.224 224.496 cv
212.184 225.576 215.424 223.992 216.504 220.68 cv
217.584 217.296 213.768 217.008 214.416 214.056 cv
214.992 211.032 216.648 212.328 219.024 209.88 cv
221.328 207.504 221.256 204.048 219.672 202.248 cv
218.016 200.52 218.448 199.656 218.448 199.656 cv
219.24 194.616 208.296 183.096 207.144 188.424 cv
206.136 192.744 222.84 196.704 213.768 207.288 cv
208.512 213.408 189.936 219.24 191.664 229.752 cv
191.808 230.616 192.096 231.264 192.096 231.264 cv
192.096 231.192 191.16 230.76 189.936 231.12 cv
177.984 234.648 172.944 246.672 174.024 257.472 cv
174.744 265.32 178.56 271.728 185.4 275.472 cv
187.344 276.552 188.928 277.128 188.928 277.128 cv
187.56 276.048 li
184.536 273.744 178.56 267.912 181.224 263.88 cv
ef
195.84 291.816 mo
198.288 291.816 200.16 293.76 200.16 296.136 cv
200.16 298.512 198.288 300.456 195.84 300.456 cv
193.464 300.456 191.592 298.512 191.592 296.136 cv
191.592 293.76 193.464 291.816 195.84 291.816 cv
ef
200.016 289.152 mo
201.024 289.152 201.816 289.944 201.816 290.952 cv
201.816 291.96 201.024 292.824 200.016 292.824 cv
199.008 292.824 198.144 291.96 198.144 290.952 cv
198.144 289.944 199.008 289.152 200.016 289.152 cv
ef
191.088 299.52 mo
192.096 299.52 192.888 300.384 192.888 301.32 cv
192.888 302.328 192.096 303.192 191.088 303.192 cv
190.08 303.192 189.288 302.328 189.288 301.32 cv
189.288 300.384 190.08 299.52 191.088 299.52 cv
ef
413.784 304.56 mo
415.512 304.56 416.88 306 416.88 307.728 cv
416.88 309.456 415.512 310.824 413.784 310.824 cv
412.056 310.824 410.616 309.456 410.616 307.728 cv
410.616 306 412.056 304.56 413.784 304.56 cv
ef
445.176 259.848 mo
446.184 259.848 447.048 260.64 447.048 261.648 cv
447.048 262.656 446.184 263.448 445.176 263.448 cv
444.168 263.448 443.376 262.656 443.376 261.648 cv
443.376 260.64 444.168 259.848 445.176 259.848 cv
ef
409.608 310.32 mo
410.616 310.32 411.408 311.112 411.408 312.12 cv
411.408 313.128 410.616 313.92 409.608 313.92 cv
408.6 313.92 407.808 313.128 407.808 312.12 cv
407.808 311.112 408.6 310.32 409.608 310.32 cv
ef
102.096 240.12 mo
103.104 241.2 103.824 242.28 104.688 243.504 cv
105.336 244.656 106.128 245.952 107.352 246.528 cv
109.8 246.168 110.448 243.432 110.232 241.272 cv
110.016 240.048 109.656 238.896 109.008 237.888 cv
112.464 240.12 115.344 243 118.368 245.952 cv
122.256 248.184 120.168 242.928 119.376 241.488 cv
114.48 232.992 106.272 228.312 96.8398 229.248 cv
98.856 228.816 100.944 228.456 103.032 228.312 cv
115.92 227.16 130.32 236.232 128.16 250.776 cv
127.224 255.816 123.696 259.704 119.088 259.848 cv
119.016 259.704 119.016 259.56 119.016 259.416 cv
118.44 257.544 116.496 256.392 114.624 256.968 cv
112.68 257.472 111.6 259.416 112.104 261.288 cv
112.608 263.232 114.048 264.384 115.848 265.032 cv
128.376 269.352 135 253.584 131.256 243.36 cv
127.728 233.712 118.8 227.16 108.72 226.224 cv
99.4316 225.36 83.376 229.392 79.0557 239.256 cv
79.6318 238.896 80.1357 238.464 80.7837 238.104 cv
87.8398 233.496 96.1201 234.216 102.096 240.12 cv
ef
107.784 223.272 mo
110.376 223.2 112.68 223.272 114.912 223.344 cv
123.264 224.136 131.472 226.008 138.672 230.472 cv
145.8 235.152 151.272 242.064 153.504 250.344 cv
150.48 248.184 147.744 245.592 145.08 243 cv
140.328 238.536 135.432 234.216 130.032 230.616 cv
125.28 227.592 120.384 225.432 114.84 224.136 cv
112.68 223.704 110.304 223.416 107.784 223.272 cv
ef
209.592 306.144 mo
211.968 306.072 214.056 306 216.072 306 cv
223.704 306.504 231.192 307.944 237.888 311.76 cv
244.512 315.792 249.696 321.984 252 329.4 cv
249.12 327.6 246.6 325.224 244.08 322.992 cv
239.616 319.032 235.08 315.288 230.04 312.12 cv
225.648 309.528 221.112 307.728 216.072 306.72 cv
214.056 306.432 211.968 306.216 209.592 306.144 cv
ef
255.024 303.048 mo
261.72 312.12 262.584 318.96 266.4 323.064 cv
272.304 329.256 274.68 328.896 272.52 336.456 cv
272.304 337.176 271.872 337.752 271.44 338.4 cv
272.448 337.68 273.528 336.888 274.536 336.024 cv
281.52 329.976 280.296 321.84 274.32 315.504 cv
270.432 311.472 263.736 310.248 255.024 303.048 cv
ef
259.992 298.08 mo
271.152 298.944 277.488 295.992 282.96 297.072 cv
291.384 298.728 292.32 300.96 297.576 295.128 cv
298.08 294.624 298.368 293.904 298.656 293.184 cv
298.584 294.408 298.512 295.776 298.296 297.072 cv
296.856 306.144 289.368 309.528 280.8 307.8 cv
275.328 306.72 270.648 301.608 259.992 298.08 cv
ef
282.888 317.376 mo
284.904 318.528 286.776 319.608 288.432 320.76 cv
294.624 325.224 300.168 330.48 303.696 337.32 cv
307.152 344.304 308.232 352.224 306.144 359.784 cv
304.704 356.688 303.84 353.376 302.904 350.064 cv
301.32 344.376 299.448 338.76 296.928 333.432 cv
294.552 328.824 291.744 324.864 288 321.336 cv
286.488 319.968 284.832 318.672 282.888 317.376 cv
ef
284.184 314.928 mo
286.2 316.152 288.072 317.232 289.8 318.168 cv
296.712 321.408 303.984 323.712 311.688 323.568 cv
319.464 323.28 326.952 320.328 332.568 314.928 cv
329.184 315.144 325.8 315.936 322.488 316.728 cv
316.728 318.024 310.968 319.176 304.992 319.536 cv
299.88 319.68 295.056 319.104 290.16 317.52 cv
288.216 316.872 286.272 316.008 284.184 314.928 cv
ef
305.856 330.984 mo
309.312 336.96 309.312 341.208 311.4 343.944 cv
314.568 348.192 316.08 348.12 314.208 352.584 cv
314.064 352.944 313.704 353.304 313.416 353.664 cv
314.136 353.304 314.784 352.872 315.432 352.44 cv
320.112 349.2 319.968 344.232 316.728 339.912 cv
314.712 337.176 310.608 335.952 305.856 330.984 cv
ef
308.376 326.808 mo
315.288 326.376 318.888 324.144 322.272 324.36 cv
327.528 324.72 328.248 325.944 330.984 321.984 cv
331.272 321.624 331.344 321.192 331.488 320.76 cv
331.56 321.48 331.632 322.344 331.56 323.136 cv
331.416 328.752 327.168 331.416 321.84 331.056 cv
318.384 330.84 315.144 328.104 308.376 326.808 cv
ef
66.4561 245.808 mo
70.4878 245.088 74.376 247.752 75.0957 251.856 cv
75.8877 255.888 73.1519 259.776 69.1201 260.496 cv
65.0879 261.288 61.1997 258.552 60.4077 254.52 cv
59.688 250.488 62.3521 246.6 66.4561 245.808 cv
ef
73.8721 239.76 mo
75.5278 239.4 77.1841 240.552 77.4717 242.28 cv
77.832 244.008 76.6797 245.664 74.9517 245.952 cv
73.2236 246.24 71.6396 245.088 71.2798 243.432 cv
70.9917 241.704 72.144 240.048 73.8721 239.76 cv
ef
61.1279 260.496 mo
62.856 260.208 64.4399 261.36 64.7998 263.016 cv
65.0879 264.744 63.936 266.4 62.2798 266.688 cv
60.5518 267.048 58.896 265.896 58.6079 264.168 cv
58.248 262.44 59.3999 260.856 61.1279 260.496 cv
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 11.0.0
%%For: (pingwin pingwin) (home)
%%Title: (Page decoration III [Converted].eps)
%%CreationDate: 4/2/2015 8:38 AM
%AI9_DataStream
%Gb!R&HZLQ-OX7Me@s5V>bgomKfg]L?`Zp]H$e15G7_gmS)6f\j9NS';Y6Lt*VG[`#5Q/TA5K=up<Sa\CmG5e%\q0^g+uA9<iSfjX
%*oI"scgKZ'IWbVcS"JO8jX2GAHBQnYUmCsi>KRc>qu6?ilh.HbhEG^rRduWgn8rG=)6LBsI;`sbZC\54iN^/0]6ngLp%mXjqn(%P
%[r9U\DXQrMroE-Q2]%g1)LqeOcg)\QiVM^%+7AQ80-3mBl!hU(O4NfmhHkSNoog'd2sEPVI<kGPe^^#Hq5[R]^E%fRCObSuZld&n
%H?^;*)dc/2qUmP$nDB:6rlN8ks-HK0nB\k`qW@YA_u7Qlp"eq`q&rrAo]OK6qjXWF(]K3[^@<\[++HEK];r+ghVC;=LJDH^n]ut4
%T&:@`pW9VqJF_9_C?&7G*adpEp4$9XoRB(tq#B%6jhL<RI'T=Xs3?s<rZ/_8]g5jt8f`E,Hm$,t!$;)iFV<0ugT0'f2]!!+[ZGe'
%-Y9rHs/RJV=mXIKnT@Uk[#@H1RfD0ojg=]/BCi[\=-(s7J,[R3J%`F<F`l"frosC!Dm'+_XC^5Ra]:1=^OCBJFoP7@Y918^5Q1EG
%/+AJ/='%>Tg#N*OF+ImccAMQZ>Q"3SrgTsD_4l-4n#udV),.!DrUSe3q8N63qnkpQp#bQ4Dsr-f*W8hclcEI]@J2V!gY5;;re^#Q
%bD2A3/+G`nepBIojibJj^Uh2Zk5+aHe?T"nJ%WOF27^$UPKj-N3e+^]rj1oTm,JrQ_o(#?ZLZnfIW]gXM\u`:J,a/6HX@<7^:F,q
%J"8gjDr[>UhQXIYpu=$r`WOhrd??5tpIkP@p;\h)hMjc!j8IfG2a;fjp"^GAqnZ'8h0jEgo&[j.[ptn6]mfYJLF8nncP(e=:sZ<e
%76J8nIe1HQ^[g@Krq3I$qn)=S^&@Zc[s*$TnU<CSTAhY:p&1<)q+*@Acj.Q4s'NJ;m,I0iqO@A?2r@qKId$_Ppj7DP,L:haB7Fu:
%'D%nN55eE-m,\o<r>eSIf@R4HL->@W]Bb6Q3MO.?2\>g5^\RT_%EN5Y%u6ICe,LRMLO;>1\P`D+p#FTIh4(H:&'Dldi;^<sJ+Hg,
%oD\Ha]:8,q[rY:SPkb"9]P?fCqa5SokP3r<n\=\kqT#kqNk=OG5PjG)qtE4ZqqiMW+5Yo5SGVi+Isq(SfCnOk-_o;nbQI*:IX(GD
%?XDMoSc$`Go:,%hg976uEq1aYfCAY3r<4Ua(0P:hmsb[:r-FE2s)%]"Igt,(:Wgd4:B(&rQBPBWN5(?bm7"4upV+9WrBC&30>;Z$
%j3\nF_tlR:Hg(:'Vr5aVRis)]]Mi0dot5@lcYNF,n,F,dnE^Zm?@MFX07PlE))(uu:&"I.kE@?D3A,7@mp+\Up`H%mnZ)UVo^T6M
%e;o$/S^ucsG8Cd"D86+k+,^+/^sD=>bg+3+HP1f-Mt:;9,M%ACi;\2Dk(A_Do.[oJc,gLqEdRD([.k74lh02<++h&;s2PX/GeCP3
%V\]0OO+0>Wr8d;Wn)*?T5Q9pGrPaQ(EI7@tnS4$@5GAtYhqa42Mu2guYAU"*^AY+sa^7P.rr8RN^R_JZ^V.@,Fas'fXe'V+U$4Q4
%m]XBOpOM]2NW8Ba4uB41]Y/ik`1Hd#=R1ISfUd4*O*sK9J+.s$If%1/GAeSkDZBDTXcHc6rs?lCTmUO!lq]ikr60-j%Xn6+4\?.E
%Da'@`s8BSbk$dcM05Ykr3H8D3Rk^Q7>3G94Qk-ICc/%KRY$QOr5[WE^rn)VrV[l[Xq#?pEr[i0NYCAcbres"0L::Oiq*4U1I=$$`
%q7kNYC*WT"h7NR-/+X>O'bB_8cej5`Vr?M1nZT,KDZ7ee_Y]B6St@'i]XNBMU\`/h8+l9"of(cWL+6H_H<O6aJ!FNm+?hWt5@;0O
%q"?M`Qg3hd>Q(TB+33lEiI,kC0U0uVX03W#9D[n8%efhRh;)Gm&7:IXYNt[!-f"_SBD6oBZ1T1tN.]0h8.4VOVa!uA,b-OMK0MB2
%Gl>n!Mf5an^:\gam`fgu[O8f%^Nt6Ls*/\WgT/(OSG`>dl\CD%Y&CHb,i2b-CQ2-V-PuLf?eo#C^H/p485qX\%i+Z!9u"6RMID"?
%nQ1o[C+af/Gh[W0_^Copqs__I?bOqq?FG4#dqJ5iJ+<C&Ru=PmQg_s2Y@!j5^&HWa\R:m+rT)5BS#cGVf@tL.k!dc3\L\AuB_AEM
%%r^;fSG`6CmDIKQotPh6Dap8H`VSYh?X1;Cp/@#':O#0qF`KX6>s)AOnR%]Tp>)kNoQh>eGGBZF^o]2.nB\kZH?K2Sp@-=V3Cnl8
%E@[eZ@m5i#+&7jifCN9G38J'NZiXN+nES9kl16N7gg%UB::n2aq^5*_*8,6_?6*jVTDncLVsb\p@NL.BQG^F@:;2akhcmu?4^MDX
%$l8^)io]7njTeicaYRGpDQ[>RSNMi_pmFk652>&o.E"RL8F+HglSjGfiG8;5fHf>s4T(%+hFJ^C4^QsZJ]i8[ShWU!GPA;D?@?3U
%:4E,a]8(mjh^:A\GRD#(hnQaPHg8nO(CL%tFr.>hh`]0qq$OiLV9uu)qb1V9D#*Mljepgk6Z;=L=.dOra/At.k4EV!Id$a*`SI"b
%mlo:]m3ge2H1t!K4_k)<pdC%Pf7O)FSBnqHF)60\?B[c!C-&0Z1C:E@+)-'$U1peQDY\C<I?4op3"p[k"\,O9G+LQRLuRT7^BMj>
%l4\*K8_AP0c]@C)Xi;>ER&fG_)r4tM^3q3?5Lf2qeMfkR5<_<DT!eF[)I$.Xr(-:[*j9Iqj'uH2IQ2cQm]3hS2*A6kFn=bplanT>
%51ClsG<6K\km/B$pht'MFF&:Rs/3>M?[mLh$M!;g^H\)NT@*Sqm`joR^):\]S;**3*hq][eVg#K7f-]A5GS&@q.DO5g@LYYJB"JP
%I!'H/Sa;AkpP5F*VqSj&b3ATbYO=[Nnb_?c52=.IUIM/lIWX5GY.hmnH8HF&/?l8Ls18*miVMNqV>'1b-gf:WqYK>9[kV(#71Aoh
%NLl^t+)5tEs6B5b.-mS"I:u]UdG)jffAF,-^!W==98S;n@B&GW/oIge+$[6n\)5/ZBQeV"9t]jT)sL'=3X3snc/%.?:G<fXNQ$D=
%mG7`UI\PNOrUiu]5K1U.2ts5D.=DA5i?oQ0>^^\fn6J*^9b3EV_d#-&o2?P2RXB8VE-q-;`GtaZju/H^\,On?[(Z>>b=BIRkb7t#
%QERIJ?@VSCPOne9c2FW0=l7=]B_CbSE,Vqo;fl3T5C[:W-Z6<[Gho::b@l$#5+ig0rh.aZ%Bk=;I<oSVXe3IZrN6BcVaa:NCd(XS
%cY.\c27AZCpQ,%Hac+c`Sus/PHCVARW\(!j/'#VVQi%i*5/W%uqf'GbDr//'NfTnT5<9a4r0=#d[dMBF@h(.1@q/d"5P7-fB+Ook
%0L$%4X:K_h*8<DRAqh>-l+[\j%ffQn<U1;8C`bFB5@D-PD#<4=(D!,N#PUTf]RP9^pYC>>YgN+1T<@&[_>="(T+luU-AFq`k/3tl
%Dg,OhEH`D_o]_<8J,eVK:4Dlkk'c6E@A@nrhgfbL.VN.pn+O]hZ%'F$G_HgM*cp5_7h(u5aP@=jrgeBLIeHWW!kV7k^i'aLfLHnZ
%k+`t#Dg)EC_&7Y+^OG0(p`/0$?L_;2STOLU]tU!(L6LrTk-Dd25$.;$"!5g<cS0$_,eq,;)dM+%KBWBqme]QoE\>rN_?0<(='p@D
%#QJkil$ojY*WKj65N@kJSt*R(NA6au6QYiKqYB$.NUl)F5E5u>&Jnis8#m`Wrr3R46c2+erm+r!n"'FW!AtaFaF>^TEi?aP4[Dgi
%6VcdNS1_mcaBLfE\X_H,Q;6&=O#bk$e(S"i1!4C4r%q0E55pc^raRUZ\WqP_jps([*pr^pZu)9qf9S.d+Ja!&$q_RuGQfCcp2RTJ
%ij!O8Q-J3X)BRYQs";t1bDm(nn[Z'(q'%qfdqS(?\\d]oSGA4cUu\,<YU=h$S[Pin\a3VIqf]QZ%F)n:b/r;jUUtbuFC;:^]V)?_
%^$MYD=Z<+$00>f_GBS0m<m'PXY$:G:paXW[[mjHII_'DIVQQQb4W@g&2CIOEFl,'d>-K\!b%Sa3c_l-U:HFScGrV5CHqtYRXPGr:
%1#ALgn\&N*=k`W:CH%&p:#:`'Vt'Up)r98^T3F[<QSAYZZ_?#Yn@b[Q"S`h#l77]Og.0&WSCX,_B.6l.r2K*R/#Q#\Mjq`?$u.[m
%fuD+](_EQh?.NC9cuQBlA,OO6c8g]]1Dj;uA+%@3FY"gfp2.IV[O"Y*ojY;SRhNtWF0["?@]nge<PitYTg@Ek9_cu@[b>PT[Z5oW
%.li(f_>5nCIG,SWFj[AF(8&)nVR/6tN%Or+)uGWD4uT-]$"?XE`-,>("pVn'"?dT/2hLSHpq>kIrMeV_05nJoa*c,qG5DIM2s+Xe
%Mr!*K;q'Af2C7#LAI,CO:n.bL:+Bk">>6qn_"M0K%-+_@g%-%uX)1#9RQGR"MJWEaQ*K$NB!^q?1LiIE:&Z>LW9</S4?%q5Dl9RE
%4M@2R)+(Bb]i<CanW+F>Zu<CUj4uV%j/:-O?>Y%2Ygf?=[Wt)]5-o1.GB8^i4>i]_O;*>O/DV'FCREJjd<`HS42FlAaJSKA@pdHG
%0nWZfWQIqnO5f]7U+Nc8HT5'Qk1JfE46LG9#,+5AT.\C.-c)"6PRYhtI[bTS&,F7)DN1c[OU!$=.5u]cCC\?72'0m5RI&@Fr-!oO
%^>%9)h_?iL#\0(PWfR.k+NNb!X+)MmTM&URX*!(%&(k"?VloAE;k*taGWKjP<t3KA0a59^c6X;<#!3*\K]5-3dr+^V4CZ`gHtb8=
%74P-.gUYmF453k@nKiol1aX;?[?^<"osG[PMp"LQcbR^$kNH'l@pg5Z.lP\`d@<3bj!3.&n[c+[:Cj_=iT*;.N2-8"R@@I8%9DZA
%2j`']`p5?eA!tHofnDUno]GbVCn-[6m6+ci>i(CBDBAhnqY.8)[cr,.o,ld-VaA:](pnmE[)RsA*lKgQ!*H,3Bh3%-`YnR;R*!Gq
%j*cAA%g&W^57s@p%"fmR$>D9POD@L1'B#"hHc<O8aQusTcFu1pRE:LE<ZH_Je@Dm\<4-V5!0SQQn:b2061YNP$ftO;/r%C'\AQAH
%GOXuU!T[^Hmp<U:jOP_=p=:s%>Lm,+L5hJa6XE'%\=s!)O'RBD1+$P5UsX#A5Q_#dX;_\:+lJ-;``(r98Duss=W7N:8j(tNWk.gp
%35BM(YA9>.".Gd*lWSO</3GlB27rcY&Bn^E$k<Rt)U@A/CNe&+]f#eFj*3\#RgSU>)2>V1NUT4I2oub(qe\j&oq;*:>g)Pm5T3h#
%c"(%,9]O/QG;,0F.FKF1e3X2EK!@%c4/M>Un[KU[QR`:[2'3W=[bKCW97-@AAth(^@'&3siu0IcC<r`YA&2TVmqW`@XgnENHO%U]
%3qbdm$RR?Pe;gBpSUiA#C.R1I/0DR46Q+2e&"n-g:Vq6F-^3OL#fei+)qd)t2ckt9)=-Ee1B5_Z&j%n/@$8#\[p!]/(Nj6_Y*m7q
%.]7Z64_0?]>=!A_qMd5s@OO=)`l*N*n]TR*E&X-k:RGV3c&MP8/=:m</oWq7JBtZ_mis57VH0gUCB#lA;X=U/:pJ4C]gT"&EO<S\
%)f;jNQStGWcrj'Ui]YlH1r!T0'ul\."Z>rR)Og-3V)hhoG886PE3sXTh>L"VJp!c.QD,,D79>C]%*Yk-cD'UAi!UKa$,E5lRDd!Q
%2'96jc$>4.WN4/s##aKq*:IT'K[c(cFssJ,o8Q$t_:^PEg*KD`I0>ELN=4"72&GFKlD2_#K8=r:If&@"lMP6Mjn^DE)4-,u)rH#7
%G8WL*h(:XoZ<';ii%LHGmfK<oH8#JtD-b41W8X-$[UN^s7$@]=mA'!@jrB3;`(9[Y[^fCOh1S0bf=,Vje6-BACG%gn]pU[tpo);T
%ZX^RjebWp9Z#RVtT+65W&Y6pXfk3!,4&jd>jC1@4c"Y.aLWO0J(QUjn>-K(leM/jib:IM7hH4\4[:AAh$ePT,C<.1Fc"LZ<DDIbp
%G@gj8?msZei1][(;mAU'/fcjKBA5@[+mAPj=U!fN9:h?6Ciaf-Fd#B%9(`i/-cam3I\)P<6&n$kKQ3SnQ:u)1ctnTZEFXU>`h.C\
%/CljJ,;K"dGFu=HZZNi<c5$\%47U5pTU9-lMORq#oeU?aY"Ua$c:-+D\51mnKnCn#a0___.Aj`2A(8Ti0"83\M>Ad.=/igCNIEP+
%d,S,TS6uO:qcFHb09ER93"P8mcUrO8)=tD\4=8H,1HdH>flYl?o1]hGVuqWbS-=cj/Ei[FTe3;sIQ+,`o9JI:aN%[";pb(5"P#"[
%l:BQlo!FA5VgU(u>M/3eS0iFY%Z8SJD0(K%W5+%ncF;K#Q>1EE@3^LU4:%h6@),\;;ruTJ!)6fhZW;)@N>8]I`!<j18?iE334uf$
%MOnjk\p"^&9LZ=b9]XAh7:o:DhS1U*ahF<\'<<,6_!%0Q#Rne8SFM%iMJX\V6WNEgTS*<"h6F'YP`^sgmc9'k%bj=J`BrUX$?eUN
%BqOAS)K)K1%n;2TUJGT_\Na4_*&QT#N.f5o$gTtkDKn\spElu,#=n&aM9Ib+":lQljSI/+aD?.n:J3r>A?D)/;q.$G;?UY)3%Xj8
%Pmb]?3B)oJ53g!F=pp+H,G8QSm_[q\ZM;]RMKPXk\jeL"3(+'ZJ>LA0@')uT=P]hmqN10Md4pu3A,'Ym5q=kE5p+*SI5qW\FtsTd
%:o+rb?rQ*@ISVII%<]WbI1Uh'iFhC3"%ZQS$\RJKlO83qL!Y)E(g.s*BQ:/NgQ[^A6c[3O5/q4n#0q#J/?t\bX1<O=deRW>?U=sX
%0)9>C=NI?oQj./`fj_cVg8iC'o*OeF]Z81RE#A'"WS>D?6"bi/[LP$"*4++m>9RNNf']]6gW6Y+TM(Yi<,!2ja0J`ILgBE@K6>Cs
%M6fr="Wt/t"IedkC<P\G@1kC]Y`eb'Xk"%20E_4mWo<EG4@qnW_?Z`3jMd2(0mL%,6'+Yo=DKY5#Ud1+<bf-iEMqH9CZMNXR)fD?
%=^?!!?on!`h)`+U`e6\tB9nCi`?g*R%RWXOE',2,j/=_cDOoAGpfK6Y_?G&?;2"10[b`\C^dib#A@jTQIbTF'>\&uJc/5hUOq2+7
%/l4W?%O^)HRgLuJ2)su=Eh*<Lo"FQKot8Q2mWc(mTmG+]fo$E2itt,__EJnpM]Dg=^ug8A)5[MqXLK#rJ&Id,^@9ua$e^!_hAAk>
%3J>8pH*lh3dSG@BV_B2b^\Qa'#TNWOm*fD9\,[DYheg/(\MFM'GE$OYWFcb\(<r4oYdJ>Q@0i:BGdRI<nI%RkN=<C%nJHe9]QSA0
%*5X.drln"mBIm__Z%_`,_++D6q8@Y9bmam5"5hACk8)0il`'>.gSu?US$]:DKl]jMeZe,=R5^-E,CFEQY)>[Bi)cNg`Wm?s_BKeM
%<Z58TeMdfiE$e^GWfceWLS&1D;nG*JCfF9jWeBp<hRZ5gD0$@Zr<[u1UH*_WBo#d,kBC,,nAO&^ZdY]Yf=X]*7DT3i.aj[hG;AUp
%&*nqcKVOki%9([@$QC^M#_PCGATuZ+']UF^P"@/fk73e$cYY207Aeu;#PQo!Dri<N6us-);;a1p"-1[#"#*4&!JglR#spQ0:H6_c
%ZJEFR`Mr8+OI^#rK%%fB$#t\?i9T_o9T1sFE>1^<YiC)*eFj_UJcj5lI[u5N.No,=QH[F8Rha]5fF8O=YZUB(%^R>-Bu5#]VEL<G
%U(:ts7e&J,>t!sXO$5t$RPh4m1XKlRd%K#73#1cL+SLtd!t2_ZVS1Y()g?P$l3.jRA1%.!V\9J8=6?32/IW0#6&e\ip*Gq*[piBd
%&(*Z2eY&<a5]E(0"O0>29Z;Rj.?uoS;/dS6nK6aSY1lUh_:@KL"*fUm#ChP6DTbe7*))HT02bb&OdhANVO0MC9N@=TjZQcrF?*Mj
%V#c-G7;;aW<fA*<r0]Xb[..8q(Z)3$6@Jg+\jt6>WH#i%Po'YAj%r#!`cX-D%NSZckqG^CNng/m%]H`T&n?>gF!&F4c-0uk1uG?h
%iMRTRO)-Xg4]XRL7(^$a#9KICG7TFNZtLXOH10&?lIIYZEG:OZ?gP:MFLSXq0;D=glleU57,T^018\PZqkoVC*!B8fh>Jes2e?(!
%9G/)F,DctncGjR>7=2a?%MI'`qg5Pc>TVJ<6gI[QH;G<C_>?SV\;n9O5`Im/(XfSCq@m^4G59@X9ce3`DV2s[IC\gPT!ja%Td0^H
%0H0EP7Y`/\hD?CuNp`s'F2OeX:`d=5S=+%;s17uEX91CL3h.MAQ_nSL"Xpp=9F.!Qa8H:4Rr0Co&ci43'JtNci<r@EZDnT^A#:O9
%br5%(N@t9:UrdF'`nH%84#C1+a,O-GGN*u(ZT*SBq](f3X*3gI:a)?eekUDmE=Os#b_%3c1;uJm6,bDb%FuN_@n']r*S-9e3ABhM
%/a;V7/#M!F*AZ81]UJ!,NWeJ7M',[%<2K3`WBi>(O)g*HH8cr,BEs%&Wns\?\d^#c(YT!UKCP@/4o3^\<S.\NrAa@QE59%A&'\;B
%ZOu<I9l#fM6o4VXR\N*kB[3,:dk`Ds7b9Z><-qQ<U)O!=0iNRi*r9-;aK0h94LuoW2p0!Y%0sRLmL+S@LG^A_`;7dNGNpSdd,lDM
%`Uq7G5,H7s#,fRFfBfH8h-i5*]?)lXH?(qj6@J!L7a,_CS,`FQWfE+.7L04m8@tEf3sXu0#UnBo_-R4c1o>0H'LUa[11=K)f;I<$
%QWrO5>DJ5:q*MT4kROS6Ntsd%i63t06,/;40Z&aZ-Fo)7=\LHm.7.J4OLXf`o/L[&rV]%W=Bm5oULqc*=c8QBPL*eXeqs04F-.$'
%>&H2KCQXHlI!"UVAb\&u).B/L>EAcspHCt]Q1AjDQ!ARWJbnTAVK%*5!S`V]\7-cjf@YY2;(VA%OI,$9_9C9l?!P(OM5\l)G2Hk)
%"?7F=L3qeuVV'.:*3NFnaf^V"bsIJ4@AVhmNWo-<bXt)%-nb54@%bFJhDKXA+\0lobc*BcaH!F@%"s_l?@eu)Lc@;M]<R:gq7R^f
%FK[B/OD%cbV#/Qm_c[s#LQ/q&cGl#A'$h:5"L-(5NFBVHLn<cKJ4Ia]YdPG)9FUSam-"Wo+[?MY5cS:>[LfEk6eMs:[3g/AE0eu=
%[6!L-37/GRLp8T?3u.>q5FSV1.`PR$P6V**=kLJK'B-oEGK2JtHj:rJ>V251*![:)i4Z`&)),0_c(Tm%)DKamre/m-0GV=Tr(O45
%h)59sTa89VpE[*pJV0iE"cG[_!ZY,,T7@Y3mA3BoGf8XI<A<u10F*o_[&aRf-qunCBgJ([.Vb`e7VC>[Vm.R3Chu&s$8F];p6=^'
%&!?!4<M@1pdZ8Bh@:8YNfQWp[CNY&>V$X6*IJ+gr4?"UXb3!G%]/;gCoCk4J9OdIElI[.eIqr#a-s*jo79@9.\0NJKo&=bF*VA?_
%'Wt3fj7h[NF7GN?i-*'NV,ol"&q\..j-Jt+30ieDl*>d"d>jt+.bd]C`T#XGeE7J6gpqbG)W*JFiTdLV=Y3jH"LsCK.U]!1*h%jB
%>d`NI9eA'-gEL."RSnCu;@R%u*gEO=iY)5:>AcUrB\lh"ZNkCWQ3csS&?*$4E8`C-`sCK=irX$79/[4d$?R+&Kq:8RE?LWVr^0?c
%PSaPDXgm(4g)(Rl$PM<cB?nm6VYhUum]K?W839[_?koF,(e5G3Yb=2BA.%9$5_sc*h5[:192<FF-?.P\A8MB-f]8>8Ir`p17_=DJ
%bro3rM7q#K\Y<KFiSXa_mLB=&M[EM[BKY;;SQ&48/EGOp^\+nYrBCuZHD5[eJ`8Y);;C8-D4"^ScINP$<."==IT?NM!ME[uf)k=n
%!?Tr\OX8Qk!.5aI@!\@(o'6YhIu#)d68D6A%uQa:I@k\5:%llr)?KSnP8X%"*`.DaQN:pZkHq:.mXj7D2ZY?^1nU;_pi[rk;Gd4<
%PE1r;o?fK[rP\YFT!A`$iF"-],3oAA_q279h"OSM@p/j$+`9D,G`7YC+$7<`&P.)]m!9nARY[pKXG;(*GTL`',P/6-8!kE[&S1ud
%.hN&bi-d-Hq%OXP[1gNdLZ'!l,hd/B*A2B5_2D=SACV/1%i+,$gNP8rBpOOP@B<:V1\CHIKm(iRI[&RJhHKjX6$I]OE!G%ld8kf6
%WN11^Qd(Ob4bLj2/TI;j*Z&#8!1.#t=2$Kr)!8fSBE^VfUQb9r4.i3cUtlI0cccd<:i'ANqfC9p3$?.=asn33p&b<_bsK)kieZ8S
%gA=&Eoir;fC"%0^Ng4YP6b&%Z"W!iH#D*D4U.$k;9#l[0DQCqTeBgZI3MI/9/Thql[=rU1a%>:"Bdm-hcf(j&nF3[_WE!E@"*fO)
%\QtCI@Fe`Ig_SI:L0m*+2f.;+'`@&Pj"K$BbeT"ELs+E0k.e%C7Q9So.tON5r4pc>Z5aVeeY4/=rR*GbJ])&#TJH2<:L@5*9Ql1q
%kWa<Oqf_q&b>>:HX('ea?iroIb&rs'3__f%P))X2Yb>(4@nKT`r7_^UhWPO<9)`Li0EAnii&On\Q[LsAUhhC#(tcPYm:`?BFku:Z
%Z'!EK]l*J$jNMTGUPjuR<.!1[na:YGAEVYsja/O"5jXg2Of=q&&fG/Z`?Kle[HZ#Ue"I4`Fsm9Ri)9GUUYi./O(Ndrcdkf./*eBF
%[CM:;O1@b_7-g%2'0l_'JLn]Y4/Sd88*B1o3HEr#6D70r;\5+^*T^NT:CjT8gRXhOY!I#dDd-g7;O6bPWWosDU;sfPG@+N+"sUtU
%Rc\="c?+V[-U9%<Wn3`gFuhLG:(.IN;[s,\-T7FoWYONnC^kIM>e8F<!mW*+^TL6?>b-ehhct/@L%)i@[MdWs'\4S@@QHLuE^GP`
%2Q7-l)D8PCpJPVU0X"'".!p.j>uEYWd&;V:F@'D\/qd`2T$P[AmK=M)(,r:Sc"`Z`WY/DC6l%L6TXj;4a>npK>@bTr6`QTFBIuK$
%O93_?Jskdk90n@M&=c=V-Xb83NFd='A\P,n"0)Z4=`Zi1^_M<5!BjoIeH@IJY`Kk02W<J35rLhLC"?%S(t7PmV%E`[2MN5*OcWWJ
%6`aE<Q6/3Aq!,C8^N=]\VUE?Biu^/]k*dP$"G\%NZh4Gpn'M\ljrk1.EPHVq),n?a"3.Ph44DD9ZCmlZ0fo]uZ0Fo-*^D?p?uO8#
%8>Wkm`/AH_/bi'<PiY^*6/TMLVJSTM+NTs*#F_ha-guRp9-J![Jqr61S!_qs3"kdg//20Aj=mR&/b\VpN3_m@<*a+9SO4j$foU._
%*%4MpT]l'[aW"RIq!64b1M[SB92cUnq/^h3a[Po/\2kdnN'5S.dtk8-d,rQCh`d?[!Rn,\jjlFbnrL6^9F_]c[3]^#\8iUQ:^m&.
%9BWn/*et*\Yo']*K7F!j'_SR6KH-t?JP#7QWsG@lZ4sFs+ZmDU/LaXj.h>!_42^eH/GAFtA(+XimhtJs/,^###Y!nP7]ohs<@2/d
%>Lm(j/STPIQbI):6me:rd8PVJH`hA7k'YVO[h>pQ$*dfa-%IPCGDNJ]i(=-Rbb@.>DPm0GrUEE@$D;2<ai51Q[4@bC!619eBmigX
%A*]T1689ot%]20;W&ZUEE+2sFV,V&C6pCdS,M.H2i=V/!FE_i_>TA"!@lfO4p-CDQN"E!3fKZmB4?'W&WsG(sIZI7>QVq\cZaPSl
%EEmIFl*EL!9+o;m]8?rI-c[`1^+@_N'FFJ!N*Q=eaD=_JH<IbS%m"P^T>bCKrPku_po[Q4HSJk<:SH!^QR#ERI300PWQO?n.sc)[
%l3mp8ip$W%^5!$r\=hJ_4eKo[Y*<#.obEG%c:.mjfhadHL<-!X;qk"95LOp6(Pb.iN%4"EiA_GEPc<2ekJO#be](9/:o6RYEWXec
%4*p9cMM:b%8W5Ud]QLF1hWK0ElsJ@mM;6H95if_ga2Ue1R#+H2!ZM>%a2Md/l?QfLJXI.H,U>_lD/.W.No%*OaG2T#pKDo;T4"H#
%lU/ZfFHW08p7B2T8W,q_QA9&eNe[Saj-#C!X'#_$:2+1f'^!TD/Gra/fTW4W9ns5.:=_'p@>29"=@jdT@4"^0f).0Ba=u9U;<X-<
%C!1bDe@0jX#'-IpU*+p6Ws]aX`Sa<\D4NatM>/"u<o78@Nb,0]i-Q#?ns;d,@QBg<fhB;.Qh_W*[\.mEn-ag,Jd,plm[[1WT4RE3
%-O'loEJ`T]j@R.U?'LSRE7Gi,6pO1Ao(p3cdNS&6V%JB5B$H+NS9ZShCoOZaI*@M1-ERFmhs+X;<SBK,D'Wl[NGpmCedU<[g9_NE
%q)'gLA"G-NH*b]!BXYmC!j$O6Aj^+c%70C@_*D,7j7-Cl"E$sm_PQ;T*;>$5f^#j,_=9tOqh_NWW;?X3@6?.R6Bt"kb!HH;EY2En
%"Y$q>IL3eqUQ.00&rDXh%UlGYM*3_)G\*f4\I`]^/_^c@!9KI]3Gosc@(m?B7e\9+K5.C0Z.l[kQD2;FL@ML%R=IYhq@budc+WLl
%Kh_d^Z[sCUN:R%kkHVcqJ(!E.6]N$2PFaU#W6n9#O0C0(Pi)O37rm>/+rZ'NVbJn@[^_qbog=0p"M9$0VW*W(a`)qO?HL>^0X&Gj
%-TnodR?%Z_m+A+UR$IId)m.&73SS&/mLD3b/`gUi65^0k#0W*Hm(q](Rrrgc,%%7N*;ORSjR,^:Z_Odi-nSj6H"P_GV@S9q<"rqA
%VbYGo9Ks3ce<iCN"(fR5j2_J6irlB]-"Xe%;mZl6KVj-u>6gBH%rJ/;QR"-5W[oKN?Ip7GhgdH*%!DXuGOAU9LaEB$'`-,-NQtil
%!CkEh/,_Cb!>X6Cj,am"5H64c@'+F5<Of5KZ)[O!Ri_9P=f"Q/5SSUr9gA-I)r\Wpc\#)u+rjuMoB&F`f>$"pJPfVk#c`uj<eBsj
%GWi&Ie1bd!Vu.!jSmCd;3s7<_\+cR.>LA/coesT815XsFn`W)27E_]P6"@28ggLdrqDT"'fMjh\5fh*p0ALDNjFUq^$uO>%!D:am
%e>U6IRKBsFG[8GE]`_"dHQXhZm"+A.`Y+Ip^c]i/l%]s4<kVYf:-@U?oZo#&i[-nfl>1h@+Vm7ces?7F\$L5VQ=cB0L!=qUEQcbU
%VSl%]]df@9Of>_XP\fHC>3ue$1P$@K*4^g.2"ihK"JKr@>RLfT\-)i-1#666V\SZ?oY]CZ;CtC?JW&2NBnETLZ5Yo8<YSIc_n(>,
%75aN2+ZJK:U&_>i9kfh6R+9@WDK>pHQ5Y(B\>PuT(C;,eWQq^\h<faZ(.YtKY)Mgh`!iB`8ToBp5%`8\4SdA&*ebK1GdZoFW+RGG
%0&6dkb@VIn8iAB9WU:_YUm]`nb)95:/7)i7OGQNW0/b/35d3^$08U^F*'<p-#]UO,f\6mG<c0;eN"uGn4sd7+lL(XWrQZK,[.L!]
%Xn/k>n.*1*omH(OJ@e/PmXVSZE%_`Y/<7)rXC>poY2lZQeZ)`s/C862A7=:=An_FcP+Q9VWY>T5QKG!V?)A"f5]h!.^L'qK.If[=
%@;_MsPs7Le$3fTdUF7U8P`##EbOkK1+B(GXe-uH2]>YEVVE0)q9K)"OejXgMBQ$SrCs((K^&hqE\\l,#L_)i_\TL?!AOF<=&B72>
%HJ4&WRh\n!#JkO)\ZXE4Unn9,Fe<WE3:SRnSX9?e0aKS^jC(h'6b4kmmd/(:6O0Dc\JdIhl/cuN\_kseq)W;$R2',HW%5aoKo$54
%M]eLk$[guT,U0)/CWL<A"Ml9l@BM_\VoVVhEd?$S<EmB<cI+I$Q[ulD7;1mY#F94s:#K+,N)o+:oa!)sR$>Ta!mMRfM&J5t7hT\C
%hiJq]HLmsL7&11'a_][rGePU,UP(+nB$uCo0j)O]Kgh9+1'nU"4)$5OJ;Bsr?Z\(;k8r_$XID;8lEcYCA@AUs&LeB??@P3@:6lJ#
%E%WKhf/-t,0@kYhZa+laU6RY!>6_B=2-IH\M@^1GC'7n10>s/gN`Do.B-j97]^G?uG6Nnl1lh#nogkWHdtWm%S^7p-M+p<(?q0Xl
%8pQ%kWB(mW8:jXc%3%8p_FZ,W;F$+\J!#VeGU,_\k:*%bAI`RuHEOpJYT;IFBWOI#N+BDRN*$5+A4>\<K>YZ\UV1>iKkKUd)Y&B2
%fGpIhYDCAhNQ'r9JoT8LDh3OCQ.soUR(7Nth<_pL%9=d</tEI,r+Q4>d@2q&^siB-Q\<fn2Ap"Jm"g7%K4+-66<"IZUcg<]%NHSY
%V(*s\@5/>B,s$`fPWj^MeK'ne_1ZE5:,;.-Qg(bI=N'm,s3;h=SR19Z!l<.V[B#<&9t*dQ,p)'ARj)'[4_@Z&o]8Q:J[[RT!=q9O
%B\J,SmEAm0RimEs?sT7SbfZ)\*=:9_0dkbbDUShoE):$PRI=U[@od1ES>UPiQ;!hcP=PA<6@On`(;=JUP]<_KR=/-jX*]esGqe0#
%O,G]JIs)7?mM*t0r[M-gSZ)beTF$sj/.-q_2Y3^PQ*rl2k]'Bm2>lQ88m$MAU`OMR-o<9r61hl1)LZf_^?7iM[#a1<O%L;E0(3Fq
%/FH!.2lu4G$qaOWkZG)%#)6\d%O4*B(91PKg%Rk-eg/1^VmdYDQ,=D;%1[71L=8ViG)#I&Slc=7Mk59-f#/8)RCQ-WRE2V;&9'%h
%]1NKEMTnGSZe=G3TIu7gd/arNB0kVFH$#De\#fa2"BgslX-a!iXM:-kACDHoW6Vp*>RQH#8%#lDgWF`p5CN(8rT"2J4SesUYSu)h
%Vl/WuDaDQ5Ahl"K'EdX!=;r;kaFGb^R6MM/993P)PseZm<U#[`JuuoZn!ou?[JpRF4r1KY45"dU9%4m^hm-h01V!j(oAs<B-cU)$
%^.B',1r`qn)HZ&:/n!?J`B%T[#P?-s^.k/odA$OkZu?H]]7S^bLNbJ<%2;8e(f.s*S-bn9-U7/4U[t2>3=#-BS/ppH=!cZh%5!3N
%R'=o8f3CJE0ifr"2Cg%UH=V"OcNY*XDD79X1_lYt3Z-aiRpt96kEHbT#eKDud`BQ3[^G;(J8pLR>H'(gk@HYG>nr(I-^,_O\hJ-N
%rd#'KE:++_+c"q>E-$amX(q[2-/@4N&b1d<Cn+!4E%E,u1b%$oQI[rX2g'ACZQ'L]jM^Jt&;JCI``p7M0]]02m1L@!%!8p+l!EX-
%>^)LoTieOmn$Bql-mk@*am6r-.d3)=<0ro(W2AfmDso53iUKO5J\2J=RnO4fNnL3iPO1XZ&=ZFB9W>RlAu4egY0HQcn2V<1/;oK/
%q8V9gc?>SU7X<H^.9j.L>YM[^K-S/XmH1R7>L6?lG%9&3:ftuP.[;Y8VWNYPgrbH>oTgHW6KLHVpF:)54A![Ob8]bC_H@@n+%gqs
%;pF.,fh*)8&IC^@gj"b89D#DUETIsdiou3ucPE_/LY6=g'+;e`.`WTEW\I9RKhoSE4Q=l3?NNZ0/.br+L$''sDM3V8"iGNBcDp1M
%S;"('jeU5k'kKlM!dtTp/(G@9NJ3*&7]=BgLF&],3qKak.2%VYV6<UY<^>T>!\$qV((p&KLe[q6@?",k#KA8k0XK2"eB!R^0'Y5T
%U%iWP3ss>1A@C2M=-i;8Lk7%5(lq-I1+9l_kHS[nZ0?@n8J1O?bm!Sc/`fQD)9`1K98^Tg;;bS`$+\HX.ZQY?s-/D/,Fi@LOK.H\
%:@os-$F\]1"CDLU\)o9bR>2T2Yd'&U>n-8.+6r6sX5(T*%uf@LnboT]CPhpgB2<n]@;VfK33m9,fBdUUWD<Kc;TAIm&&8=Pa>%@=
%lTC(4;A:Fn]6E[sj.nB$2%"83m?jcX#Sm//W);.1"+eD'p"=Ai_PSN^WslmO3bhM([%5$KFJK8K[`a0BYWl)jdju="mp5E4BTbP]
%iP!-E&_2]b-Ch,1I"a'=<bIOfKQW!Ne=J*L:&/0*em[/Y%MUq"k>(Yt$(-B+5e<'$$CcV+)bMFQX:sTbWlgq>?@)BpTBH@naU7@m
%_7%Kt,Bmp'n5k\of!3-J.AglU@M=!5U$&4u?qSTRbQ)F3H.M,?Zfi,3ZtqRde5a&mT][gtb"U7Q@R^oQD:4>7QJ5gYQhOq&(7bX"
%T#g[f:i\P#,!.73q3/jFLj@OUlt]RMMtC\1d4DAn.c9ms6mOiDC\)Xe/lTP<ZI#j9HTQ2[0HZMc2XubQ$o_`AV!7,k\tseT5tbY7
%*`JG6'hP1UWDTt^]]HVEY=qec&Wmq*;WO\o3jbmJHB2]6Rb";"Lrl]"5\jgUk=i8%A'UMEPX=VG;&`E7#J8DNe]a2D=l%6no@`dX
%TN:]:Fd@gn`%3T2b`.!KitKVW#lFbK/F&J04k8Xt'lLeY/f@n]`ION=9Ide/lj!:s'49:C6W6!LC;X)B)A:onPc@t+'e4\$\u9N]
%<TYka;JY1,<"0/S:b>Ufn;KBG'KX*)\HcAsL4)9\Z/k2";?#n(C:+:=$)la4kg@UP(F=5:nmrhKXIFD4*a5etfV>hsJ#K@n(=-iG
%6udRF>!58@fZS6m-5M__ZtS!=;U1'fO"%jq:gs<7q>t']2D&]B,=6jsCBfYME[=4Z*36f=XGXC3CRG$)14bT#`@>#I-OM;egf:P(
%O#*k&3#W&idg$69faOr#AS3^uRuoLVd-Jos;dM5%Tu_7)&C)6dhRHDpddN,Z]&.=h2h,Bb@8K'K;<$Xc/'E0q(I3dS,];M4KSa%9
%0oIW98>VV\;,A)1,mUPP,s\b6a3(F1d5idCiC'qPAQ@jU[DkoUAS"bui)4e]fq/:HFML]C[7>0;;oP1SVKS8j+Q)usQFL7:5X]E'
%[Ond'n_9UU\tn>iS?0H@`T-I/g0bD7T*VJp16j=F#3GX%X-.7^:L;at<fs$5#EA[7B.*VlIT6RW!P^@IZ1rS*7uiHEp/I;Tc!Uh6
%'=G1&]9"okB0#Oncmr-T2,["FLbT3XiA0Xp(PC@=3nuQ]WVaNQ#rfW&X8N9[OIA/QFVDEBHA5h\R9:b)r"u<Z7'K;'?k9T&LegV1
%PJ7e=HEn>9&%&I8j5WR*[Tc$!LlEf4D4EMN/i,l?<lqR[64Mqj72^]F=RpuK>;EK)2B1Is.PM@W@GCI\VW9di#UCf?;7`+N//]PF
%!rH&.#;)2S<?_oZ(+L'GL'"a.(^h"jE"4EkaB%-[!_hd'X9<C2OEXepFP^Sc0R7\gLHE;+-k%^p67..?^Z>tUQuOaY'6!I5$5`rc
%e4!26.GM'6E9,/V<*1We7LEeI]dj@\q0kS67@&3L_Pbd$&Qg.u`u&p2<'HEEo#=uG]KdJ*eE+4K<2I;t*Fg-%(j>:e'F?`DLkPST
%(>cemcd3Hc'-fP=:/Tdr]OtHU:mL7N*2;$lA(rCh(GO4[1GK/a<iGKr6GU1a5b]g4H9q;\LT9]l&5(kH'j$5?DWH(u,ogC6W_MqU
%:6uJ`78#tJ$EnBDK#=S3g*qGF]Wus[$7-[WNHM^5pfRnn!UGHfbaUnC,le]f=\)Ea1<S*BKjG&Fj*?O$jQX4u[@f#N'LWIi&a[N9
%#o:S[i2oa:\A+[l>mh@4R6#@Uf*+dr!;q;;:_UYYmXCVF@Xutg(^ptd.[RjC*AE-EQ8L-CMk!(ooJQ'Wne'@5bAl$3q()$PS\hCF
%CK=0KXI9bqZZtpC(*3*@bgf!"QIDVTH_A]0-L,h`Wn=]J<0"h_>M#KX=d`LDLFq?b3>3Y7=?6"'=o!;]\sQ\d.["_/Cp<KiVQdoU
%363N"#pLl]Z9if#>"0mXIM#roKbkGmgrI=&7^Qd=0GrdU81c#5VJ7.m`Y#,ahKDU_UUI-uR@],#?bqUs2u1iKQ'"/IQV(b$:!O0t
%YDUIRQTik,aXPA6W"-_s$3f\-pQ^b/*\QeY\0<$NpI*%LZO\8?=Y`:!KSVkF`h5T+@Q#1q=S.9P5'G_WV:md">h%lWrj`dJC_Tof
%2#J+Yan_;cGuW&o'O&p92Z)@#H$'\5Wj\t"]kS^#^]^)oL^!VOrf;lC/ODZNoOOCW<8]%33DtI':_5JfQNbOqR[V+!`Pk@J..F5;
%n^/Bo:oW0d/qKKqfWBsBDnL87hl6[#jPe.EGfNumiV:R>AVBWn]FDU>Ob:"k!TGS_U:Xm%a##[J4>W^>KQ8lTWYk)%eJe-,_nre?
%j#pPLH&5tiR50DIK#8`eaF[s7^bgjg\o4-)BnWd;F=P\=o,^.6c_6bNB#^d4(kPsANburD^P[rW)OP2rNp`u>i`^hA#.!YV5UW<r
%R8QjRM[I[s]GBU[R4AT0BfufrGX/OuU,<8T7h:^8h)&]_-4*=F(S3_2c9>-(HgLl)C=M`Z_[5atfFX>g:bHi`8.gp1mbrL/_BFe1
%_kG-AU1HY;FOQ7j32-D0e9)=9Bt8uLQ/]<bEYWK>:l1WG:F*Ssk;K^T^Bnb'^u^5oFP"'=@H"JXi.qY:;q5R7(t>=OHN[MfET\47
%-ROM&BFQ.6jC$Z7nYS0o/n7!Kdn$H^U%h2hcSL&J.(-#FK1=&#2`)7o<M-2CmFG2BGV;4a17\GP>ha?/?+Q%`V\6m[VW@A3X*rXQ
%'rXqkD<acg4Sfb36HV^Xq+2FYf5u#WTpBn-gDTm$L'q,Z*%\l:fA)3*3olMEd1Ui?b$WYR&TcR64X*-T;+!$"n'UL82e-D`(,`Oe
%-.^$ob4!\N1$70Uq*t#!HT3dZd!+s@XV8l9F*Gmgm4E@/@=5ABb7`QN&!`$P*(!?KSlB3GO5e_A6Y7*JeAZ%QZ7*@!'CE</6cJjM
%6=MO29WYRPAh9R4$X6ndV`4Y':V!EIj!o'dd`:C13gRGQ+@YZbQe8obodUCh'Ij8B0fkDGLLs-QWEgj]/mrYc_Ifc^rHrInig]5A
%NONT@<?cWc0'&]WBG<jl*:at(,]m\%k"n>XcJ,DlNM[hmb%6G#hBu8og'i$;h=)kl?LP5gTajc.bLQG/1YNRW<^lo[7u7S[T(sYD
%&kA9(26.1HSS=B&ZPUD,hE)6m-1P&kcCB>'FmJ/WGiZ$TF_C9QE7_V3Ksg4Hetg'KDJ%ofH(s@07)sO0TPCA.T,qmYK*R.JZO%nZ
%Xe/g2if#;jRNL<YpYun<$I)B;b0IPmjg^5S;D?g,>SsJO,aGs5*FK+T"^mkpcJbAd\'47"$RAQgj$C:^Q/!1$5H:4XXAJT5b`ksc
%GpuMW:"::s.H,Dj".9/YR"4VqKjUb::\Q33Pp2@)"2s9CgZ/LIYDc?(Z7IdjaRu]D.^t9$W@.s%4"n&(N5b&tL:'e()#GS#N%tJU
%`iAKAB"2nOpDPfE]Pb;.%Vu`m*'9=-?G$@MFsgn',jSPqfb()ZT=j635=J8dP&jrl;tSr."f#!T#PLOh`6?$%V5d#=:7m!D^fs,%
%&/ZE=ET7;9%j:dbNi\#j`oP"3.gbX!m5'lo):qIZ\O*KG%?+a1qE"C\(oPqbORJ5o9-H6Y/2[OkapJVX^_9-P+^s!VKF0.:`D"-:
%;bWYR<F9A.a%XfMa@tRO-3^o/Q=`;l,@3$o^?cN76!n5qSk#c`<CKX97Vs`)@UVPY[@!Lt^-.C8Kt^JcG,X_%(Sl+uIYJ>O_TTaZ
%/F9LeR%`_WF.[l:)nl)\,`]itHFN=RV;@pZq,L#VM<4UU*Pt($.LU+@=;J2UPO9pPgnkm#e^`aNqXD<NVt[k`UYViZM;c&+m6H_&
%jG%VEZWkmgX_#lH!*#rNa2!g6ak*LG0dE\(0=Ul=34X"o]1bsLR\>VlLE\T3!YN[L<">`h0c[?O.u]1_e2:=deB9E*s5)ph5p=d&
%7"*UNpF+uTo/1)KG?C[q^cqk];f*&W6.gai0fn.5C.?47VpE.`Y\b.$BB9hYW`4R3+tc.nm`$pV3F'8U=,bJRh(p[9r&sZ@8lUN`
%c$^=n':g.2(TJ5LP1qFd,P!#O^3(VWA$K_Un1at5g*lI%a^5W=HU]<f$!5rZAI@dF`$iYPPQ=jX/0[W]XeRLGUE1<g&*?%aQh\4+
%4(9bPM93U`N]QX&.Q)c.O@%q.3@6IV?)a-H4En[T28pR5.?1j;[d,(YH_+r_ou3X/\]dHma5ba8EMZoDK)lS8@Z.c[Br-GUGmTN:
%rmgn@16%t);$7MHZ"dE2SVXd@$0-#IikDrO@s#q'U>a1RR,5][IueL>>6Up)E@W*79:lN.DZ48!N0sr0`<D8)S)HSZLiGX[Q5cU[
%D7'du;p[TIc`8G6@M!fU%s?B3+V%6I\i:ElnN:(N@,YeM;cX5V>tDo.$!e9#/rMMV]*_>JpmeZlb$Dk_4,^hlSV_@N?/,^]9B7\'
%-3H,BV\Bnq_T5"Vf@_87FUtZ*7S`,^e\/3g?cb)4)aP.&q,CeUW)jTkpU)Ia>O]t^&$=B+QKg*W0&S=FhI(Wr;=)uTI9gsfXqm`a
%KoW#nZ3KWh;cN7j]'MNoWArCl<!I[W(Jdc2g]S.g8TD)RHAj_\(p1.tHVcVWWpA0aV]'*XUZR8Ch]@TRRT3?conu)/\7IZD:n.^@
%Ya0$]J1"c92(^VeB4J,<Ra,^!QRR9RSlMs5^TT-?6ib3LPrLQ6AR4:jDsF=2+ND)m`2W+(QCW0F[Pfe,$I$Fhjn0<WX@L3[Lbh]N
%EmVhB+24_mQBWr5b%FDGB%`CYcWro(E*oh3<&N9[I>KbR6@hesYSqb*Po+G@E)]o])]5Ms_/s;/`O`7(1'.P[S]?H#:/%:TTGC!k
%b:Z3(^/(9H`dE"KmMK<h5WhbW;a>;kq#DQ6q76$1^:B8n=%+Z%'=2(9#%VCK"I,aaXd(sbR-4j6X#4+=m)ZK[TsQNYL(;SnA:Sa6
%fX;bdIU5hT0<u7$=-ROQ[9NO@%M&I2KomsJ=8Su#6JA(lDes9&Y0D6c:CWjOD%To8(7GQH<-?!LId3uT3Yo_dG4G]B1RS:VOZ6QS
%lLkM9q3B0,>5M':0R,(5Ko&R4#Qc3*G[4=KH1garF\s1W21WnnakE_qM@T.nG?*?(#87B]bjgD)gQB:b/#odld2!R[e[H\\WJa.*
%c5:X!*=,%PPb#NC-*^^dTHLtbbu]]k7u($:T@-T+b,05Y,_aTY:fs$9<b>&-*qgT!)\Cgh'<3+Zf$,,Lf;Dm@CYX_FZd=ag_*JA9
%'1>?E%((rBVq2!WEIROo:sKj`6j;i7#a&8OY[Z&W&]P@'6,<=HMCrJ'o7r:ee#nW59H\*l=BWndmj7NC6$1-R+\RU>b_n]u'^:qo
%R#a(F6jtfpjp'XALJqb3KN1Ao#M*"PU58qK3cq)GIoeht(7.pC$@RYpj16<'Y,TS,c7j';]P`/Q'bdE(<T)V`m$j.nl$!+mc[c9>
%o1/q@G:6=)Kg-C)CGd^G`=%cDXPABi]U6L#"X77icUA$L'G2k&l`#%K0Ud\\B>+t@n!U6,"Ue<Rd%/:kAPl%%I3u`O>h`0@2c_>b
%'[Yd$8:mSVL"#%A3Or44=$01I5$JeY)5!BRa&UK6h37rsjT1Q4*n@=op9ud&)^Q#"iRhki7(mjsPf$DCSmiI$Xssh(%$\'g?8n)c
%,IfcI-i:h_XP:D,ggS,ODcKANJ-'mZ]?kE61IiJLaq(\5]J@M`0LB>N3i>e.p:4JAYm>qUeM!qi"%;T(D;))EWEr_-$0+cGFmVL,
%QG66$!5fD_DaMJJ,Q`ubmLXG.UF<^20XZ7QT9>:=SQX9,0fco"(J(3n!5Tn@;!ot.b0re+d;6D)'btY!iEBNST\X8ff@@-4fY_#]
%<E3a4Ern!%5k;coUWV!;@s4nAJ7lL:cRaX3:GtnI>N9sEf"GkeG^LskUtJ?H9nXCQmD1$sT\)0^SM`HY]s^5+p4,>Kl/`15#Xt34
%50-Sj)d31Fbbi"03j!16M$92a*"tCY9T,nUJDrj6FN:^V1=IO9jgS5JPr>mZ;F&^WE%WOX-*as0.$eJ.GX(GVkELIMZegg"=U?uQ
%VkE2o=DPLmH9]nQBEDX./[G;;-BNpjUhIY.a##RaRP)IIbnM(KNb3oW]%$'@7Hf&SfEpd@R.BT((-$CF)o&KG81u.2GWe2<1uJYX
%KT`26DouTH__6AThp&,pn81UFOd8CZh)^,RFe:U;Hg2/\Gs!ErnU<,;[t5m`^r_6mTaSm-nVT[l<u"=o+`HG4Z'ZYB[te,oXNu%O
%W%(9_V$f3s2HM\2BT(!k!sR3+<Hts@WZX_u4('*9Fm\/bQj]Q2;RHc46d6LpGnHPm^^1_^953inp^A0U(;%D;E/mpaSBHQ,$6g`4
%'Pf@ZO9j>:Kk9X!FJg`jNT4U@4^_(>W*]lE(GNr"1+.cg0&HHAkis&`Dj6(iZj-ED(!(fp*DLg`EWLeZYAU51R$9!s20W87C1<FM
%?nE7(fU)\#Mj.A,L?**W_s"[>TF15i%*([uH(NtC3GTO%-c?HLOGI[]U9HocmWlq@6$'rOU*RW#7$:<8JE+$qZ[fV@,mJq,O"$=K
%2W%_eNML*7,V*;jofI[-F?`^MSGfI6<QiU*$k/bi<DOB`F[?4S&>]6JEHf?h]7V3/G<<&b_),n==F`bm8\cqeWcAX8C0Oh=TX[`K
%`&jS9G+>g(FGlPYN,p2<comhEe.S?eLRHaLS@b_/Fs>s:OD%#ncsIX6HH_Of<6c[M!Xb.7]bY`i03PCoS4'+ZK*e)UMGcqanQ(NF
%.<7i+bK<AM[YniSM7's$kq=N!Vc4!c<t`C]ZsZMRI3o6GQoCZl;'c9%p)NP^WjLPIE,h^`U3M^/2GHFEI#c0(W-6GP^=&j/$;@*j
%mo09)`*?$-=N_*\\ho?#7@7_pje05?Zefh`U&rN,c)7kh%D[g;@j9U.j&@3/cZI6&AVUDI3M[In1U7uKM<76E-4Y*`3rt%>:&=7g
%T-?Oa^oQ\9?.K*Vp9AM6$oqh3pT2f>64GE^_;`e$/CY,pb-A7&m]*,2XZjmq1XC8SRekM*,^WA4<4tM2EuZqu_NU,B?oXsA.&nS+
%FPJ>WeN3%sN+U3KNO@qLdn6hRhu((>kZ#SK6CJLF3sH]Cd\K'K/A!rQ@pO[5ab@Cl;YP^W$9MmkFMn8$Arbd[^ujKcN8OX\7_3\h
%(U*.48HEO9O]>e,8C-iULD7KK#a9-4!E`rHm<i@hUU\S^pJ\b5Fg$35mJtm7f#uf\#*fd=YfB]G6NNJ!\g!dOj>sLC8r*=a$NFfQ
%$NlFkOcK?@)C,YXl95<VIB3pCDX#r!B1sUp@?53R>5/RY@DE;`cK^]4,VLn,i]7_5HcXu,(ffD1"0TOM"`R&rUth?_;@PTWP/kha
%-SPjkmNiHQN#/JmB!LZ9N491/a#o7T4o&XKRa'"Xq!q6j;3uT0iX4V2nHti!b*'V:E]6ZpBmdto@;b<E?D^g`Bt,Y$@$c)*&Qk7b
%:ZL7PiLl"]DD%JSib$]/6i0i=Yq/66idrLWr*%7]`Y7+*TYZc]_XN'#]O^<9#408"Lg*pr=G:Bf]skeJ&[F;Fa0"s525l;SAFp.-
%'_Mgt5Dr*t.XtT&7;I\+*I]McG#ELU0g4Y2CcML,n:<nW6-jU+=Ig2uTa`cbDcO2-+`<(>FJBR>@NG*(B"!.i<HBAMAq#Qa%8CV]
%Bm[q;DI'(W(b(,U(Fc<pa=ij1<^NS"'2ZL2"C2BWL4XF]6^OtZV]@8.bW6E;%o\>u)Wg9;7=nmS3[p8O.ts.A5/_e"l%@$J?j=J3
%D:>3n2Y@.JLa='`VNaT-!`e0Tg1I!4@aqW'b/#W3KfA:B`\RtFW^:ZlO.oO!N5t'#D35blWtC*[??b[s77f;](-q2kc(Z4TQ)pkF
%,4I$S'9o)`g4DC=]*dXMHec-r:tLQK3ce,tpiAYGDG_^<i&"mM8sMVS;5K/EfF4r`<!K<bQY1Ek%QTH5)F#BXhlQ'6R;gp`OTG'Z
%'kp,%-euqGYn?$N()=(+Pu\WB@Aj8s]u@e6?2B5[@R`>D<1Pf@n9cCh54C%i@aBscDi]HeJrLB-Lb&Nbel.fKRb*VM`2_">=Webq
%As*`#1\`2&0:l>`-)o@[1*_+^=Me'(H'/jQ[FfpUW"Wgl$s^or<0J"]Y?Q&0nLg.+-J[T#Y7c(Z`O52U_K:K;aE^h1:m;JF9@)"]
%O]bPdX]#N`WFc2!SS;3+[YY9VHO#q2J[]R"XL"]&qW+:pePJKAbViM6K@@ab%'/oa?0)_r4]'+1Fr#1S43.ae"`QaJ.!o2ISYfi*
%G@fe*0%Y(:"?$a=*'.I#M<P;#@;Re.CMm]qVh%*dCS"Bs\UY6;1aN^<>dqE.2$&E*0H](Cq^e<#_9Sn!D;uaMo[?t,E'7D"WcUSC
%^I9B!DA'Ib>rSY*GNkTO!E"/&0VQ3aSV8%jCb/$\X,t/T;.@ED$tQ]UWQ9#j1il_:CK1LMkqf\D*Jt3%SN50[09&:I`GT.>huH9j
%K=^_Y<5sZ`PfK2GM9/cfq&ZB1_94It'tD-cnFL&XgT.T').Q2GKHYH\9/EQ.T)5SD$at#G&-lf9E>C#)L&1#,&&K2Ms7AMDNfP]Y
%BO<:$AZLt);V@RV<`MS2L76E'baXDBI2:7jYQ`PXYApXZ88W@JGTBNJ=TqGUn@1AEN)8,qY'_+*&DV^Pq4TK[B/W$Le6&4Jjr\&u
%_"@?fOk,NPd`q"3X%#dlSW]@Lr/lPBqN_aFP`7Hkcoju_YI'MiKL0fea0BPDiY"bnHXcdrb_nb3=;/Pc%Sjg/Y1m9kAQD<Y@bS*!
%RP#UXe\.:gb;\4+GmD:Cmsk;TZ!I[#FZ=!!2G7L7L<MEO\h\s55=^9[1L-0tq(\_R*boO=Q3%OrQ<>[1SE`K)NFf&"*6_;'</"Fq
%$r?90C\BKRI.VB0>G?:c@)$*90?W19TnAO).[=if)"<37H'2!"J4]3YrV%qJP]!8*%Qu22HS:3hDR/NV2&=F=r6g.g2=:Qn5s+g0
%0stoMS.H[`lG)fbb^PI.GZSFP7bXU!%&"Nh`G6,;D0lHt7ZnX12phpHhM[GeHUHNr\j]W+`8jA<p=N@-]J?lWnM1&\j&Z")Rm]E"
%8.f+&,HAVj4k>=4k.PU\9q667ag7cG_<.7+?<nWF#;]d5<R<."n@fRHE9=;k^W1/g#Lc/DS'*_dJ'Pa(F7@2&'\;r"jMIdq/HI*f
%-:b\P[s%@(MbjdR"l'J/Ojq6hBCn\$*;gh7nq7''CWar^ai`C9iDlr3Rp#AepL.q2YF[fqhokJ3,ro%fQg:C$hg&+RQfhDdANeOS
%edpfo1J\'lVpXr&TlY\cbE^O+5Bd77?Z)SNf(7`2iI(.f\FF*:BA/Rn!`\=[:kaP9j>3Yo=hXeS>-KQneXT$&=Tt_M:.E6F59qZT
%cCKLP^K>:C,K!-9i2?fUS[JZ7Z-RP-KijEn4-ejCKg9BBM>?%SBAJgu>S=X1DSkPdMB_Hta.BH)In;bHU*jH,#`?ae.`5I,@"Mj)
%q6HndHWatNE=kKVQY)L7Yk,!uUEg0i-<o338;VPdn2b.B-i,]7\7&Z$G'J[+2#]IYDl*=4b:`--`FLS24o*p]@p!7ecAS(OJ!jA_
%o?]<)j`;VT>q>B$Meh(J_Z6I@&Jqo./5Xo[BQ1ikKt.Xg.%$a8-dT1KL^YI8ZP+!s]FY+:2H/Om8Ga^Ud@\%?_[C)neIp[`RTAI(
%hmis;!oGQk>HAH$$\ClWd=B*)IIY";`,guU3hcfcU.p,EF<c=Z([,1`fBkIDe![7_`+ikomcZ/-XP4g,Tj9aGl,C$q0T;]I<hI!%
%Au3Rm^'<-hpG67>AQ+o;_K*n6DF?0eSn[_f`0D0gV8K+Ua34c[o]Xf8@itV*llgh=1e5T)1ZsQ2!a]Ai@p>Gn-1UnC`2[Q+MO2j_
%I9^?_%7Me;OQi2,"g?])lR=OZ;(!)^[)9Z3jNP<A:MAod1TOeM=?f9Ube5T25-1$"YIN?oY!ogu-0"FA+pamb)pGV3)t-8$&@(IQ
%_C+&iEd9,m"='0;<1fsN\8C<)D"gRTcB%Bl))\7h6=K&"$)!Y\h7'>E<!k;;NE_@gGup"f:XH&SgUA&S%a\W3+;U+g8ohPSYUX-S
%d7t*)WnK4V[oaEp^5(#7&Ih&[b++l"0s]r/+d7=p(X3M;HBnRo$O&$sqs95.iMMEuYH)\S\fOi4=kt!?k0@=7'r-EHg]QB6VTC<p
%L0ADb/hAHAjgkglP\2S<!(NZpB=s8AJkiu@S2Y79.N-FXD.ap[iY?YtZp529MuYZZj8Q=)&qpQ8.RNF)N__.KHL<WT=e?ljF^A]%
%eOZ(?XXj'&>rSHf73&:(lU4.i94[UBQq1c''4T.r(f?qIe/6opRd2g\$K0eB$>9&`o.(7^]eI=ACW<['mP@X4@hgcM@%dHRLCaVh
%F?9M?O/Kp;[k,%)A6U^8hBB\XO*%LjI'ke&9UD9KUIj'LB@SKb=<_2^.;G+LD.F^3MP;t#'E3WFO-M!VSDT`o=/HSLKYFDYc`E/J
%5DRPJ-LIm.TTo'sr&b)YLEanpr<DF,+X3%.Q0J4%Pe;,WCUqpI+,.q_M!=76'*CDJbs(KUrE7-?\W%B&cT\NE,;dl#VOgS,SQ.02
%U!?+9]C>gk1WLtif;_Y*E7m.H\'lI"p13KoiM2_=XHg"h$L&0m00Q"W)JUp]kK]F.)c\L<Eboj:hlPkOd)nNCCujCu'JienQJ0=A
%;3OdP%.83*1%[(sATh?L(A4nR_d[/SS2i(^.Im<Rd6unkik/,6#]X]&.5_U'eLn$K9Z8/I$a5nW<-uf@8?>!+XnXo9db"F'7iHGi
%Q/#XRWbSTZA8%J?c6f:<qk"PJ5>'G-Yk*S>mPF)E"BS>$'0c$Nl@EKL;L):Q+>BRG\S-aZ'`k+,L5s&B(aXeoRkWPgr"U9m*n4Ut
%%+7E-5Kh[,7"cZ8/,HK-a]&=@Xl.Ec$[si[/K"0<Mn9Vca(AIt*%]76aLV_5CkG3i8sNM:W9dbUo/2b#5K%/!@'iCI<3@dT@*5E)
%&/Lf[jq+PHF!cfQcS.8@+fST?!M]e>6JT@%</,:D:uZ!?OGjL3U,ilj=)=GD[+H7/Y2upu&/2DQd2aP%j46DQ1),lf7-`DG-PcXE
%UVq"JFIhR%6<Wim819K0$Z(JC.$jF-CK6pkR=6_&MnVG[02H9E+/:P,^+1:+GeU#"p1gKR2R-n,<tODt`rj:2=)GS7Lom@]]Hj(5
%,PpVb']3-dr>lX1bBS:QI6Ipjo27>4B]."cNg)=1rjtZS0&>hf$"]')"JRqtj3Bc3i:i`*nu]ucJEP92#2P`B]X'E'o:OCTSRrZ=
%D[^+olITskj0_XT365k[R/G/K$Zn]j\dAd_fh:mr1o7VA36OTET+E"boN_0=<T[KiCZ8N0hX=+pDFk)\rJY><1='$,J*a.$`-^XP
%SqI/^pG0q4^,*Yd(Zh@Y[.\M6m[cA`0Cbu3ASiL"\(p!Vf2>BtQqXNN3"1a?deMak@luHf',njVF_3^f:rC\),TRD*,OJ+6F;//O
%$/!OqQ+)kE]RNO1k9toG\;-FT>NoQSAiL&[n@HoS.+/sN\8]Q)3LaujL)O$Fj>6PKH<og5'\>JGq(2-+Pk)oLOnA76;f5qE##5\j
%nAbU3lL)eN0*5Y(`Jdki2[NPb=L$iQ2aqQ5KlO[RE`1%:$9UFmfH=&D!F(_2$dbG8FJ[rl9doWc0!C+0kocG?)8?'jQS"+\OPFgk
%-7E,u:7)6E$K"j&6e]oq7,YqXcNm1>_d/Lb$H8LXO<05rn^s06R*D;EdD`<S_Qc)"bJUO-&EkX&ZbeQUG-/E7"O2`7Y?XG6-u-=t
%5OC`cRPWG=^_+^=%(5(**Y>-La-5uIj,&.*;j0aO%3$(q<%(E-_?bM])$(%2-X,Jl&d?ukkbZBB>Gcb;-)lnJ\u],cU&"/iJBVjO
%<RQ\\85'fZ%+5b$qD4#?lJaEi*$O)&1`0O1T>j%#/mF=Pbq,`MH/4]RU*/R.a,rB4,>jebME%f=A0pHsiNpZS;Osm,0U]c42A*1!
%]B<H5X;IN&b^'RuQR*"[Wj3r[?'E*mXr(58*\N/*_K/D%Zj2k=VuV.Rf3unn`nr1>=!D13[h/_`JqGu9<UmjeX\sc:<*/It%=Vod
%q1&4<V`0&h]D[*SIkmNZ9'156h1O:f:9fGO!De3.&heBC43J[.N]*<E<SG`mHRX#?p4[)6%[9,l3%6SjemZtcPQaCV!WB`WC"eg8
%RE,%_<!7<a(;F^(a+7V3fJ]o2fjQ!-k<!rI/h_U<$?%EYaEA^T+r/r_e5p6:K7]ZL=-*BXl;qfp("U"SB4"f^#7k7<VWt\\?J*q1
%H.<f]WkFQ&01GsS8n'9Op!SaeSC(3\N9<6lggfr.@&=s9l;e-$0='E^$Yu6W%M4Vi.M5"\PUJGR;"G/$*F>#8O]1;>Jn>I!CV31B
%Dpk0^W=heT/*!Y/H>!`j?c\TI<,?Ua$p%rl'keVO&Db8V2ssa;T57<tlKALq$.>kUJl4>]7P/5$%la@[X<8brNbd.>@Lb$h5s+^"
%VKI8H2*-pU?uS_Z=<mgJgMTo%"rQ2"E!@Ah77<bqI2eHM%LnJQ?I1&]*C.P95lc8Uh_>NRPh&d)!<\e84M"K%D9s<P2)/ksDba'`
%/a-L\E\r9`l%A6a/5h7Sl4-1oMT\`Vl?%T."*Y^mGYuH,TeuR$<D5d-%#UGjLQBi<Ms`!#*H*]]#YS^@#`A)db0q1A?QW/?i$A.8
%l#ScN)LR;mR$*2J$SRiS`)kuLAm7-0b]`AEMei$T0kgItbS1_@,mK>Z96U^9]?)!E#I),V5r5*`OQs'.mB,Mln%_qG>;6n1kc5Rs
%hDs_hik=:=['@9i@2?O7.b=Fj.BmGr^3B]/_>(K;B>LN@j9B\Zf2aI/^#KDhR.[HF/gE;YKXMc3;K:E6m9!O>Bd;j![\J\<NGoP-
%W%=g*Q680CR*@gMpWtB[$e+]$P-#HnM4MM)/3D)`:^.`54]BSsJ6o.E.E!>IYCV::XUKKNIH?L[:SED&0t!aPS[Up*$'<:&(4q.e
%:7VR,$F\\,YNqI?WdnQi6>ookgE31kdp[3S)$7XAX>.,4aSEI[g<u*r0Uhc.dXgn%pe?aCpD1;*(km$ZQ]c498*n26K_:iTe.No8
%Bdn4CSJ7W?.W:b8cM8Q5=<()/Qpq79V!_GC45`M[OL0'bQFqK,.gU-6;IRB;3a3BVe,dk:VFqU.pcah]Kii/I.>YN6P."b<d>Z,9
%/b?-'X6k9<L\+7R#s*SWQlUKs2>dGXg!h8&P@6Sdbt^K>nY+Qp#?do>C;Gr+H)XPD\seb;F)4C"n(G)u#,'_jQm$Q"9MX>eF]lkg
%9%J1;jJXalO/1>#D"D,l4Yq.5m<+:1hV4JTCXe`A1Zd9%[+8hH^JaZdff_!.;TAZ1IIXlb<]D1!Z9`5//R8U%[VG>TbGUQi\eQC6
%"M&BMdV#ju1UV6O'17OqK/a,26QT7?]30NM3F/b(:Qi0r)UNe2Ya\Ap:nYNjr\HU+eu"sN4*@5,RXBjFeIF902S2bMg!q2VpqG2.
%I<^XkoW>1Tb=^D#.#Z6TbV""6?lR:'*YE`X+VJ_-oE[Ui[UHe;f1[f?]Z.55.hh"6[B=h)X)eEN@s;WC1CGjF:2*]UI?"RuYbg\h
%Y%aK*%9X&U)f?$59s\:Mf96;fZK'>:3M.Fd@pt8*SSV^%^%oX`[Wrd+F=>>[lpbdsHaWeGG`+rQ1Ga[1`$E6s7gkgj2F`#P$==W$
%mN3e>`27(oEtgb#JO.I8e]tBCU0::`^n1-C.F:1:5t!lm_dil3oX1elmbm3Z6KjSL\<<8Ndf;@BLV%=fct/&RRq`M:GS86F[S^o_
%HJ&ceXR`)b1YTM.'CA=Ij))=XY_&3[8iD[N_ia0n<XS_YFF:<ras#\''acAu10Gt5%TJhl%Z5\sr>/<f!Dao(<EQ.!Cgj%Bgp?R]
%BfhLu,MiMgkV(8RC^$;i#K`L'4mnPG*h9pbfJ)og>RcC=a1Qd/H;/$AKXh_)C!ocMfj3RQ@u72N+<'<JNSm%*$;='n5_i=Z;AWcr
%lrm(t:jhRR#m$RdhW&H".7#3lEMq'>d:Ke<i[/"@a(1`YnO9?X#-,:\L9ZDb8A*b0Q3ON')a?O-4aa3o(qnR$ePZRQCo^b_OI%5&
%402ul`.Y'<OqaFVbW+?NVG^M31llr2KII*DVkBS+>L^)Z]GKHtCRZ0dep!u!O[C9]A%s9rC</qA%at<r;uEXFe<B&^)C/Yj-/F5f
%(L-Oshf4td"T?cTdcO8I-mEGV7n(k_@^R=>G06_uF#E%D2[0^sR\D,ZDlHZT-:haqU-;/Lfk#-,*rH>U`$c+2Y9Kh?(ZXuhi84]>
%23=Xt"m;n*6)UGcfQd!t/1O7n]lIXREY`5*0#SLu9Xf1?<9ms?5nB=iDN5,^p]HJ73kT\bC$!l7E#Z=toN^?q+'A<nqnaKEXa;59
%\ZjF[Ns(!IaIU&W7?.&^ok,ZZfS]&QVN*Hn3W)j-$0c/d!/PZd4dgOO8;:pQ8_7AFm=ILoM0)Wr%u=>e\Fot,#dPf\;b?bO/&4_f
%[KS\XWQ"fR6'rIS"gJs^,&H:/=CRHf7U/+_!PM?1*JeE9-;G7&fQgWk/B&5Gq=<HNLJVM1:\06L^(![&&LFpmYt*,([#tna8gn]c
%H-k>-1I[cLlX9`Oo/Ylk&o&Ybd*i@_3^%!,aT/P`k,GV`G5CaePG#-c_j]7\]G(\jHsUDr_J3tJpM%Lc[N/[IPbNamk))m00sbHC
%n/ASdbiuYij0'nRb1%G"MTq[8Og4eTBU/#)KH)aWaBF7YJK)J&,9g'Rs7#+i."hi6l4H&Q?X.(EC)FC!B=XC14^m\Bf_c_qa+>_C
%A1&X(-:@QJn06_)PIbQ9pc-LUKM#j3FR=k*BorLb2C@k$`k3Ji48e/TZ>qnUMp6X8cR_Y5UKn.DVeaWN!lOiW1N/<^Hd_1*Wkf+P
%YnDq;mg!,U/[Y;hMY=TeQgEs1]C.L+]8q,SmEQYgA]/Ge,nB0RVt&(!J;tg(/A[F0^["5<5_]!'MmbrJ*pufn(oEANm1dFr@)o>'
%;k+\p[GC4Fq4c4.l.es#g^heS@bV;Tn\jGcQk=N^V66gI.FVE>en\_XC%N7V'"lZpOQa#c^*`n@&3S!aB4$E[N*VKF3$n8Dq35HH
%DXpY:Q<i0HCo*m8J[qlu!^#B;Pe/Hn2%#tC8XMJCi&,Z&>)=3^0\bZEWN<+W$%O,T.RurN,H^X,IV`9M2cH1pJ\bthML\'XY89R"
%dO$g:S"$amiR,^UVd?c[^.CU%^c\a+lgQVn,`>kSTo-_QiA6-D!H$d$8E<IJHJp`I2LP+@XXl&_i.k3jZ.<O&8%8S(_N,p=??!XU
%9AU*Y?Q78;`?!_nWLL8b`gfHHm-t_oQqT#5j>nfSS%Zs3DQK(_-L`6&k\]`rab<9m!C=nC'phWGp4^&Wb[\*[]NBQDG@EqLM,j/m
%.NK[eUBYjn<EqYY`?dlK.;1$[^h7+";ap<ti$uq(<E]-jWM,-1BhC?@Cj43\)Pclqr.1MeV9j,8at<6hTg,[a[PHeD[YHSuX94d#
%X'[&Zf%`YR&3,YE^uT]KnNaEj$l%H'7PTC(-h8W5Q[ZZ\!f%>IKiXaiRldK5n?:FZF]o?>p"`M+j_3f6YF3^6rG!+Vnu'RJn4))a
%+q)gmk(_So?=2C[/q$YVZCj3O&.c=_:eeqJ_<p,p73hb8XKat"6a3Xg#=*::U6^ngU$ppl,g(kI*`M&YI@XqtRe`>!d:0PBf`5D)
%\+@*s:fY]P%]BCoPQHYa9Rt2P<$Hpd:u!kSGkV6jg\$rRWpG><[)UH5.!>_o$iG<(=UbWd!$AMa:<Ec1k#u7H;-ckg0[Le1U2jX_
%E]^Vg9EX"<`^ZDPs.]9*#ehInhe\7t9+9Ot'Dpu>l$3D_d.DaQ5'75^#bm1J[\uBXhgL.a1$O7GFS?6raIXS0#;fJ2@p-Ra-=nVa
%/-)pq\bkK!B]NQR-M+>O]pP:2X0tc&6mKbnbiE`#^1^4hgoQ=C\M!.uo+72;0ajI&Q.LZtbmae7<bmUth*@bsLV$.gh:-576hhLh
%^$*%e$:Hi')Ju;'b=;7e-JXW0)d[3kh0iIOQ(OK*Mut6Hn-7-CoOZKg"aX$c<#"-M/l,)J_%3RXT%V+U.&`4j?=V8d:oXm-"`KB2
%*pLhR&as`<[5*49+*5hh19-h0Y%Smire+A?Q'7C/6!5[-c>;GLi"ThIf\sR9`FJ`8-Te"JnH"9,T_OsK2Dp*A5Z-&?&7$=u4),NG
%iaeV!eZ#jXDI]5_5J7eaht-6F"15:o]*jQu"!)U4(*&^<K(-4$CnK<ba'=J2;Qb'22hpiI/\5'bm0#!h$DOtad5G/m5+/fSq-`dt
%MT]<Z)iENpUbkA.j_:h*%R$N<kg0#Ymf53VUe!Q\!8CWsj8%Jb$_6Hd\@P:d@#WsrjMS.0k6O2(a>0VoCA3rf._pNrqs-/dFjJh!
%VT&UI2QH_6^p3^B`Bg73QW*G]LDh^P]k#P5HARh,!#&RAI+HZTXp.oNYO.`'.Dp31'_aH)EEn@5`+0\$&b%MIa%Y'd=h>lgT65;_
%`Deopf(`]&)hfUJRb9$q&sCO58Y/c>Xd_/2mk,D_m#1BnYW5nZ;#1Wt]MNN%"Dple.5@5j-[Sdr6FB'EEcJ'HIA7W;G4GV^BDrm;
%MAHN:"W^Aee>(clT3dd73+J5S[<Q:8B$%,)pd=$T;16`hb3Jt\d)r@Y0%!!E7,Tfo4VqO]buj:,Yp,e1d^rK!6`XJZQr7.u[8"oj
%R:k@<Ct"sYhV?GB`\_B<`HA!GPs2["g^8q]!Fb6K3WhB(.cQ7;\ALW5`hMrk0=p'#5kBdR4KkVFFl(f*c::Q)(-]aZ?n,RlQj8\X
%FC)"&TA,%iMO/8*<=B.]`98O\*^Y-nPnc6r-Lr#;mRhWH18>A@eQ$O#7/l["eiaDRrkV`m(q:[3W(UO]?&>L_EBU*cr2k[a>.UFU
%*]'0f(nlkIZ=d%aDEf*l$R9[\in+&ZcQq5SY6eC<9[V!\Q684j]b3!$(eYS.BKD/!+m%:495u06Jo>p29;*$3Q2t&/XBgosdOMhE
%iR'D(!_j.g##UAa1EPTaIoBnI&.o.EZ#-\Qd$OhDT*=]`Tf4GFbC%S<Kqd'qMs67>JWf(LW$c#9TN@4hZQG7%,'@2I1as`R/j'^0
%=c)HO";:dO@1"]<6Uckr`)SVaZ4`09eWiS-cS^#lS94a-P,f$^)QsR:Y@lQt`2]\dgKWV+9[.0+b-)SDg5Q.1@mMQm5(#XYImR['
%E7:HH#k%MQSYA'dJPg<if[=W&k*$K@9>&n*d1Gb^BJEp6Fl!IgHWIAK)KXgk;dolnTXTT5au\(0O^Q'K9W&F\:hO**`'_dCoI\(P
%TOEA>F?@)+@(WurUX3`iBYqLJq;C^$"BP&9pB4)PW^_*s)Z-%-2A-+6-nsLC!@`@/*g;::OP*dN2.;;k2^`&9R0N(c@@+LoQ,"#O
%KhKJ%]8PERY4uj\=Bg9M?T!G'r)R45UW-9W4KhJC=+l$!3]p[3m(0-t9T42d41sR"97SrGmMPJ-34qog5h4EIQ!R])e`OMd?p0.=
%g?IS;PK_BRe_j2o"9M,^/("uhne=9b/:q?[%kD"elCN_%n,hj1*?4UdK-O/uCbT=aYd-A1Zs=C'Bq:SjZ-5@7Ue^Y3e$J6]XdpNq
%7-XV9a`-A%Ql_oUJG*83W$\8J5W>=<*`uH(H,7;t!"L(8XH*e>Y+;-SCB-E,Ob#Zo:m:=]LeSV_nSfB=,3(Z:*5KfRO$L1d66R_E
%iS?Fj49/T+PUq^I8.]&k;G"9&W.AIE)3V566_7QK=@.e+#8[KQk]IJ?lj*l(C*?taK8>jX$a=&EmOOATnqa&)4QGA0E#O<^"/]Xf
%6Gmb`dN-ZHJ%M1(m99S1_rm#?o@ihu($I@GD\66g.Z'?DcC!^khimAkfA2";I-G.[(tPKieY>Tf<g-OdZ`$8HQgL<;F[(hFW]\q[
%c=Qgc,I@H..058)"G:O'R"oYM88SO=]CTgPb3S=R)BG-(&1>_i_]Z_[b.Yn@k]h"QO/9HP6$$)iaabFXSuWd:H/.pN",qkm=828q
%UuZp^W7O`Ue8WE;P+ln<+eZ,'l%oOOA\'QR/_9'gYEQu`\c20M#n;CKq?IW']OiSa1:2'd^YE4eC:^'oQhB?biGjds>'M'[:1Vps
%*Y&K0p;FF49`U2AB[P0S&67hn&FKm]0V*$mXqd1tLLTTo6D3:VQ"d57!JE';'bcUk=E%9U_tOb?e.%*+Q8VuP"\7FGJd&!C*hR0<
%6bKH)+CI6`#de3=;#g'GK0RFu,I2SFCoY^',]q:7idQl+VdQjB&Q4kM;],"+M&=.#Cs3R8G4!2;VNo4Y&6sI])nE1B5uKfZPNgB>
%PuU;G:me)%fZke"Is>r7;S,)3B4Zq2>d@bl#L4_K?@\;\]r<Dc$e6ZL-UEP4(.Jo1]N1kW.JnBj]G)0`S+/"!_3:InKU9Yt;R=eh
%'YJa8ls;GYNAYRX7EemAN6BA5CEXoc8@uJ#+!UO._p+cS<P05]!oi&-2EX>7.=+A;E.C+a9CjUBSii=PlGVcZ@P?p3S57#_IOn#f
%+`cpXHR@13q03k\(?m_17`],RPntE4D7+q=l0YR8K!.5^G-bZ`Glebjgu`aDJ98;a]NYl-3@;EG=>>uI%M6Y0A79Zt*C=e!HRcW_
%/R"8[Z36cW#n7t<&tneOQS".uL]4bJLqBs:+JdYS#r*^3L']c<S[puu*rnnU@(HNF>F=='r!5[mKX'r=4<R$+bi>Wo,^c23@-WTW
%.UJt)5Zl\7\":o3J/^(M9.4j(aDO8C:#HKAj[NR9%cZia<?XZJOWc`qMR-.8!$N&M`4T%0/\'N&>T)\EEb9%^!t$>eX-Np.S"JOf
%*?%2>R/%Edk5^1&&eKcP1VMX_h[\+c&X:EA8.fd!TM:es<eB4rb9^Ppm@qrDn<>>>5U+_U'?%&-c\e/><447I3ICr4gn4D)"_!p'
%9eiPOkCt'(5cX@Qa_n.aH9RuH-F6q5fKh,*;4,R*JLZf6R,]Gc8p/`3J4C:bF=&2#(k6hI@:rnZ9K.;eIbh,-SdSQC;S"e6!h*/%
%FlBorM&mL5&:O4Q[q>qSMCb";Eo>J_=Fd_j%sTsfD%j9IY@%sT-Qc5@qDc@m[\]9ZD:R@m)62.-+&mN3dl4st4gX1E!23L$'i;me
%cVWLEl-Lu!NM:fW/*3hSQ0lHCjt6L;;)h7K:8jD_=dl-Y8gY=4Lh*PBYGX^<T:@k"V?@p6!3PQj2mAO5%aaTPVS6/<M*9LoHI'q8
%_;_!K#qEG<_cVf/)<JW+jJWd?S=,miKtD\u+>UNp7:\m?U>/#h'W,[p6YS3dnQ'U5&7"BFOR;Usmi?)p9=Di2;rRuL/@o^i40C2l
%N]9D>#Tm.a+HK^'L5q.Q]'OJ-1F@(Q2J5R>'TQ:,BHW*7mUfH9O>a;eaCpsZUYX\=E26>R?J!&LPdNR&XrTA`pO#J;Ei8JK*_6A!
%kZbf@cfD9.n4D4<Jc4Gc^K^JU%Rf14UmDcWq@;C3$:F"eM.dRDC0^q<hhUY?d+?i:Y>ASu%>UXGAW`c[0&>G1=kr/K"@\h1$PfFC
%<6T%gqQVYmSP`,t^Pl.CS/b.B+F%u7fp[LhkJS0Y!,mU.:S&8[T8pNe(sqZPc?NW(9pF<^Z)2`XLFAEY%CPe+E'NKGK&EYKAXG3[
%8?]MZYpNLRqA=M!;"NASQpI)2aLCh?$]>#@GtGA?4d4U^fj.BAEac27j=Q-r0$<*RaECSNKh>n6b0-Eh73uX5YE&5CE:R2aZ[8*%
%b)r0MRTNG2.#1fE6&q*KKe))aYFVro]WcVm.#J$V3]V_a#LgV0L5%&(i"2!b.M;1!+U&Dhb-#%0\"E\gDL]<dT]p0DCsDA9Q,sFT
%<<:<n\ZVqhd&.[52n>RE1;aI>8VSDj]*"Ub`u&K=P\.crB/6lrVru6O`pG))12t!W9p[/!RtG?dX:+:HSFTEBAZ)T>U\^:G:f(Q4
%V].97KKe\ThStL>,Vs@\`GAl2@]#i8XGQm;N+hCb^O,?6FOV[[[k$fOFI_>72@up<?p'jbGEe&I8Ts^<$7VBci3fZQ[CNB0Y[2[=
%RBk$Uc\Zl!oIZ6f^n.\ICs8h6[Y!Gl(]oE$Z8r(l;VoZ>P5VhA$3V@:fSb1_)?i?2F,;8dhAkAj1'ZT5n?1;)[9X&^7.q<9$o#=+
%R?o0B`SN^-R8PU^&CAIW=Q9Z$LR]h\GGHQMh*u>+o<j^6fBuqHP*%>!9OaCcWR<^Qa'`AapF#C0gnZP\DU,IO"JF$dnaMpR>2jGI
%W/LbT!K.K,26Jb^Hg=PW3P[:8prCX_Qo]GJ$VD$Lpm26@!g<&hNJdUg)`k184cDgC\1Ct17'>45V=>s(*]$._8=@c_&>=,)4dfOK
%gH8gDb(c19J+$^1rq>P?g-!bFcl:Wsk13g<@pkr'ftle1#P:ceQ?eP8't+d2'b>3'L"CqYIXpXR+rnta6H>XF*pWt:9/6Zg!]3F3
%$1p!F/'KHXH^2aWgO(sDW",Y3OqiWYM\A"G=`"+6A`'e.bAo2d(S#tO8'MG;Y,\?^\H[]%`jfHbN0lfM"u"(h]%`aipPogt,BL!;
%Ec8/:Z`:=:nhD0t1%(j=!:@QZ'.M1]F%hLWH:Hf3;J.Zh^a'b\bP35$!`Dh=*ge/@>8@QS'iA"%S?EO0i8M#1H;!hs+PVT(`asB<
%`;V<OF;^L&XP?OY&Wpji$I,<!5oXXJ7;SkKhVPt=PV0"9?.Dos:$p^#(54^rE.Sp-KMkuM7qO\uV/I67iFrN)"X66BR=ICkGPO:_
%*+7,P@hJtK\^GlLb%lOnK`q>_d13sO8GZTA<2u@oq:;kqS3]AFP#t9!C_k4pTM9^4E@J>J2Y)T&LFiLDPU3_D77bg&>BCdE/+'8d
%LV#Wnkl_87U7^!q`%o!WFd]#0j8r&0itJNi<m_SX>6SWY(l@7LUt5:6<5`/NLjg)X=[,Z1A9$:R>D8G!*@[muR;@9#V(WkNi?!Gr
%WlDrb#rA]^jKC[(BG)f^S'pt;1"hC/'\b14W$=iZjIJVL/hVt'#&=\=9J+]Sg>488#q^'l#_+T''^d)&oU6uB7'^It7;`l:5L`(0
%(F`[I_23)?W3MV0Z_orUG)CEp5`Q0sMk::DlOGX^M]J56p?$!sEau\tS[4&F<a,L@6&%<+60\;d+N;<PEE\#Wlrm832S]#HG#N$G
%(+.%\kVG9sfP@KZA_g0Q*jUGb`4J?ndA#ndh!-5Ibjn<*g75MoPP+6DC4tna4BG=9@*6@hfaoB3($\&:2#b2G>g!?XoFXN%n#eim
%R_:D'BHVEI8f2I^1F!qKimgo4mR]tXh"s&.VHLf(3KG485lT[HUdl^VSi:ZJ6!tcOO_U6[glo,[e_,b"@6>OE9%`FZZLAuEQGVlP
%3)S$-.5PPCK)Ou%%"._^%B?@Un.;"a]#$oi)P;T?$scF,Y^fl;R,&(6WZQUN%j^UEqdB]37fc%0mFB\._hdg7>XUtFA;:cXWH]aZ
%Omp?m?]Vf,D_)r&<WZ#K6ro:7&*08TW24Qek<H@NDqB^)P/W@fLJa)KKqj33L<FMFejL,X5(+24R8_9ac^IWB"0U4CAW#&\OiD"T
%#_TO[Ca:1l.Q8%X8l%>.>gTQB?AW:t2&9,7':0S?Q"@DO/XG%?%:%H2R"S`p,a/e7\B69RC-r(H61.Y%_#O\p!/Ak]NHZ7>.dNeC
%J^91+<YS%.=#Q.Yk)m<e1C/]iniAM\`-$oWOL>ISS^%S*5*rBP/'])56od_H*hP]d#@6S;=4:KN\<_rKc8h'*37fIU`[E&C%'/ZJ
%U4[B+UOFn;`,5r(L'G@q-PnM<)ko^i5B!PGe!T?.HDPk,oG_Fo$O"$!`D4jUlt][.i<8ARCBg2OdB=gSTX4aiA6lf/jIBp#+mpC-
%B:.r1X!o9,,G)!KIP,;'Z)k3'<n'-PTa%n!`6DHm$d42lMC_-F*pZ<p,]L.";kd>uY#0XP"i^Wlft%P`%..M@V"A+1oS?;SY>]SF
%p_ch2D#I#"b=9WN^QdY`D>>S]MD+g3CEE7=m,PkbdhMpnZ&;S@,*#''7o:o(d4XZ]P5%!d5%UOZ#nZmU,.879=*Du9<)KZa**4oC
%r2EOX'*`kbg'FhpKmbU#1PSIVf20<=<+XL?NI?UI!P6^FM_pFP&B$Sr3m(LG6:lf#k^'tBA8HkRZf458=YJ?qZn*n[L$knX&R>D=
%;.2(JpkZ0ImoG0Ppf37Q;!I#25!CjH.SgpsQtd0A5qKPPF(4PMIRHh#C3uocJu`c\K[?$;`E0`Y%4f/+$*1"BVBO@&?tsAl]Vr6/
%VW5(m*];r</?jI]c)%AVMtM^e,*R)0##gtR9m%Wj/^LeOq"V(QR')6Jah`cU(TR?bFg12#,)7s),DC[c*=QG^Q@4/7n-PY:X6l?@
%),SEf;1V&u6;P=r7=<K-^;[Tf,5!iREGi&VEa'eT%()6g&#;]42WZj@EC['-cQ)JK.+WAOP:0ZX<7gA$+#q!5c9WGqj%@)2KDf1c
%OhA$mCnC-tfnp#3MPm\WA"YI7%WoktH[54b,hB#GUs4f',"k`[6Dp\%>OMfAW#+%,k'+4PU(>AeTl]GhUIk_%<=<J46`VrYG.6Jm
%KlQ)gOj$LIk>bMB*f44!!.c*K`?]rm[_5G:Ql4eJZU11)>%LEOlGo#h5U-\\7/CW643iHo*a9/WfbZG.4;@8)!PRUNjsEL%hVJaO
%W`nBk;H>5V[K>b[b#2*5P,O*2(p,G\:;&2*VQ\^R$s.s"-AuEAC:OfD"B'Wi,_:7\>uZ!K;Y_Dd@p5,8Q?Ek4e8EP.;NhLADL]7W
%FH#ql7q=h@crPTrZMo/-Yt/s^-OG;)ipbGshJ+D9QP;P[rY]DUP-)ri.#C2*R/Y&UMq(?(YV1a?T.MLSR)/PQI/]B*6I#Vi4<b@_
%.dVO0%[Fc]:s(`(,V$_]KTr.n=e\g,.ASHqfVAj)C5#ND:rU`-P1#LgOJ]PV7_Y4Y#)d_eq"UWgDY-stlD^s9N#+[7Qt7`qe#VTp
%CZ[^*h2rafq:arCYl^8o9#Dp=\?p">O9l]QMVJGjGSJ`_/S-4jI^`Ia%(M"13fo,SI)<A3Xml-B]UT]d`hIrn6(q.4L<%_KR]ius
%L+W=.l272$Af0aA5uYm[J<oFifMj.^<4=O/V&\q:!3jG1qJp7!l],7Z'e4N>^ETN&i-krO0jQb:"MVZp?1QCCj(/aL+4ks3%i?ao
%e-\U>99<nYedVCcBX"9rYIpGhC91ZpYB(0o5'5AW8U7X\hr'bJ-OP/.7=%1S,,1\V-@q(^6;<32C(!`\G]#^(?%XsKG=/ho9RXP8
%+XS'0ikrf,@n=XlgbhEI;-Z:3jU;R'eb_P1._4q[kR:.<FCj.:Z..p;A`G4,O0p$[WmlZcjaC9q;>Q>O'AL!eg:O(L6OYNF2P=Xq
%D>[fZe@g#u%!;\?9`]9E(4-SW0FP[ErC/nC1#V*Kau^\E_2N2`?/mIBBIT*A9d$lV!.*OiS-dRJ<d_73XPFZij>3i@f5\b7iaZ'(
%9r/Z5:_7'SdJi,oWMH1/FgI%*(_]6\XW/N0mo)p3dM.dQQ$e9T&bkF#:uLM2Ti29i'^L9%S[fMfr\BX/R5AWq_CNS8o>+2?B%(#9
%dFIpZ,A&Yk.k@^4p@RPWfrlkm$hDM(G\U0j5q=h.H[-l]CX%^9>mO6$]3/FAD`G@.V-X%s">2oG@q>T&ARV;<90:W,>0X`!Ek4Aj
%RYq@\B>!dre`Oj2_G#d+%;l^,-*rBKYgkTKLD<JIQ/Q')N7"LPj>0t+Lnc^UQIWBESQc;casL,VaQ"m>BcIX&),NgJGG@3ha-k^b
%ntR=o(:ul')-K:sDAl&maKrj>.<0IFb,Z^\^OOqe[P=/LafSud:arAFN%UHC;]4KE;8<d'P1$c?=mPLdJg+m]0<!K:;E2d)2%bIb
%_^.AS/Y$rXPSCLOp2pKApC3n^B7jG.4J.l2k%`]I`V$;1Z;ME"^)VZl;''`W*A]XgIV`%ZPq:da`^;o,YVAtH95]RNh2&Ykg>U'*
%=Ltr1iU4I!*JePn4r8?%6X?[*,%06t^uCGA%%ZpJ-D'as"[9IjS&iZTju\@+.G9FU;kQ#)eA4m'gmFR6qAc1Yej&L=+Y5Mb[N^-[
%A@E+B0=dY#p?aF<b#rp&5srcl>+#IGH?3GfN),ea<qOib#$n4/XVot'X)]sj<Z1j\T/+\t[--I^MLOR!<04BSn!dMH@=3/_GE5U!
%(iIN9>Q=^tQ"1AqA%DIjYiHh9&90qT]AJi:<lA(&?sCt2@t4Z6/$SaV>)&`&*)9E9=W%$@'UR4b,fnoD<*M"J$_^G+PU`ZO/;Vc!
%[q+hBpJT'm7$I."KBN5\qOd;Bja!XU3dSifBU=T*.T)@pgTPIQ'dj!mZK&H[lk,:&gj[s.KcA]lkCV)NEU+h!&)<bS64$P2:;/[Y
%eVYi'bc9,B9km\cNaY?bDk"7;#l:2SV9!Bg,VYdVZ<NH8=+Y.eV4pfo6B>*$AJV+?,I6nTLO+-ZqC,YDPo1Cid$,CU)k(OVd:X8(
%FI>dHL_n/79EPe!<XL;X5J@D^/h@/kI!o<GE>J1BCnGL`I"`WoVQ]<4V^;m;&7+aM)2Vj"HDU`Ac)fS6[gDM5FiXIM&W79l_)L:#
%>OW_ZAjn[k-AXHuIh.8(Rl8ui?:6Wg&\#_0Z6Z@&d%JG_UR5^#=5cbA9Jt7>8<HDT#H^4A(9-D;j%"'V8aLG(.3(Uq-6e?a9@f\6
%.4"VPkb[u@?Xe7)8jYGU9#:/)_lYGTXeQ>2dacRuhNu4F2n,mSf23g(<#5tRJi:"[+F(I+al8\J&NWDP+5Vhr1oLWVU*%H:1\>hJ
%eL4uVXPIb;Agb0V:!Sna.Q\l3W:+NrSOi`:!9/,"?mFiYPHb0_%52WT=:M6bXbGg(V0h//aTN++8XM58%bh`s>0CC`NFY(-=e7oQ
%L]I]>+c9p$Qk6.4V58Sj:q^$gcGqZ>.a=I<NU"`ngO$u@;V]=NC`>TRK&2BVLV[+-`]!G0#0\,fKSJJ2hnh&,+EOq]N.]D;j'Q])
%a*MAnb!qnF7Ci1@:n%/9b[!CBJBBc?2lXAcm[^_r%F-HpW+UR[74tbGDFFn)Y="?lNL/_hiu8fRGqNmTQ>:,F?2Sm]8RULi&PK55
%>bN(?]W-t7`.l3+do=*=qaR]j#95d1\;a41lj?G;QcIhS6B^K#i%j"P77N2])=r#8QUt>?Ynkn?`+X3Ue["e^hUSZj3=isABcCP_
%aJ>h=pBYi!G)4RR*_E!SfJ\S5n;4=(<iL)ak=`e<?lF!]?GlJI(;I_ed6d9=Za\S3P!71cAc<Iso+j*_aOU-[7_V\o/0%7+N#Jid
%>qYp!2tthuo4Xr42HJ<=r@*E\*t(T'^3/.,Ai<=p7jMB1D*:%$ri.=9lnX%I)F(VtZLnHP`W@4B"RdEqWoElS7Bh-G7I^'q$>=Jd
%0KLb$QuBR"GHRuIV0NTWCcdJZ)!)m3.80Hu^lsnW.U7+`k%5IepMZgFG26;A"+K,4WrNKLa8amWYB3Wc#sN/GMNQDDJg+4)J?6WN
%hgcfbC`2G08a<];#Snm]'Voq"iUchuMt4jaA,1n;I.Ani[dJt4#7A0l.(VV%,pJ]dP',?g6Y6Ti0^q)e5i)[i^]dTTR_$$e,Z398
%fp<:M@(&dXrL07bIYbiI2R'QThk=<eR'8SUfn.<IPg#Mb`3<(JVh.Sd`^6CLA5Ql'E>p15l&](Y,btDcP*cm8h,tRS;ejrLg9(!G
%$(BV8(]$k9:=o1Xe0k'b4XBdIjOY\[E`;cH.oOVER3^F(P2@9*eQo2*d>\R^T!nl'o43@u?!++PU-K4WBh*fU5eOVCA\ErAIcccf
%!-&SHL_.0VUa",oLM"q&\Yne0J6/]7]5-LZX#)!\'#r8'C6t]\ho8JK8/:N/d)hNHc&e'9!HbT!'+T+bd^)CfX@4!>6I6hU^lcas
%P"Dl3;Sn*5P8VOpFDXTFV=e*s'8.7>"/?,o(_?PuL_`H(bFJf_K1$]`SY?1&a]_.A`s]NTOB#ba_Y-&AaTA5:#Jq0Pg\3T/l:m1=
%@214P_)u8PBG<NFA%/8Kj-*AXE!0ho%e7TRI]g-_3f>^7SVaBYkfc_c2Ykl$"jDVaK1srGf4I%Ek<'BUq$HjLB46Fj*C@unaeihK
%;q:Bd1</5D,$ig_`QS%fWYMqL!Zo`S;BgKi=5,4h7](*PY@<7Hnn)$GBgEi'R;\4*6hIjM\'3@][o$+:EYNH;"Bf5R7lR'13')lB
%W:5ROrntNSJBN`O"?LZf3;YapPQqK?M-n3=b+1:"Gu_C,-?HdYM1Wp?H_^E`04!afOYen"/A']#iuqb@Ij_jD9&V!jd$//QJoZhG
%/69+0&3BG,oe`W$JGlEDUES]7^Pnrm\2Oe1>b"#ES][D#A#j)Bf>7,ETP$Xi:FfQY4OeAN'H`\Y=,bO#l)gRfh2TaIBrVA_M@9X=
%SjGf-et;"ujfSG"RLN2C<#E;*&nVnd89(;K=bKfjqGN/\1WN\V.#^eJjI\dPaH`>SA>Ni-I4-tk7<kcll@';:&HEu`JU/29[c]D&
%_$tId^h2>oAn0\O"iZNmoi*4j.YP$UPl+M<jWLYm7qH1R-uY>urq^5M'+CYA<*#+",`m9ch)3Xic4OjiB$1ZM*fZ&A+1J8O+131m
%PN+_-r7F66L-4RGl@pt[a(8cS.drTbs8%=nn_,S@GbmIK0&OQ)']rgh_.<h3QB?kpN^g$++#ai#kBL7VS6`86`#V&m<Yk7sZJg1;
%2J0Gh:@@qEf2GME1lK\%k)2G0iaYg;NPPB^5H#JUkSB:^E"MIrEEDn*"C0[,;o>*g5P8%?-=DKJ.=;b7[p/E;]5@;a2qn60qKb3u
%lcM@&Z-E?lh%Egd)_a6nD5]7rs/u)D.0VU*36_8qrSWIAiI1:qpTJ-+*-]Pkj+5m^?KI1%m4YZ?(VXJ>R^o62M,[GN>C27,EqE=l
%L7SF,UTk)'jVrnjnV$&"*g\Ig0PfV-cVe=/Dm`f0-gjIsCKD$GcbI3N?IP?[]5BP-aNO_dQ*P1$R_L+"1b!5i0b>gF7IoI^]k4+9
%eA[FGVcs:.E&$RG$!,?^rI_N@&j#WoEk(Ue;OOXei3o[6P4tmgVT*QC-bmtYTkfI5'+XGpip10Ad'?-%,3cmQ8WZHT#HZ3jffEh@
%"&.h*_`E>n2oR;_Y++Y6\Qi?6$5.$G6.)`NACIjYrOCNT6(d->c'\WcN6BIW7.Jp@0?Z\DSWSoi/&prT\^-&34te/48&e!e30j8,
%eMj]4-DLb*!'D37l_U*;,AUP76k^sF&-Sm)gW8_38SLPSSI<BmIM?D-U1hsqnH6q8c+8Z47AsZT7VCH8mLhaY\n-W^%7<8Voopml
%7YU?NZG_r3Upob'?!eB8"\9>s2LZo&1?CICYsO'[iUF42W(sF$8e<kGTZto^aA$FlgPj=/V;qM+!C9&hZ?GHugKgE#@_/G0;L?te
%E;9>&kADt+a7,Sf'Yk\o4us?:ZFimh.DLGXXPeS@p]k-nFRYsHNkisXq/$0Q/F.D=Z#Mei;NWn4k=tanK".ON%-ik]T6D1DS#PBt
%/&<Z5GPn=Ne/igDa9bj%Jl;#UNd5;JAYHY-WlAP[d$X^Eg"TdG"Vlp*+Z7O+GX&)8'BaI/q?a^$nE\,#PqG[&kBQ7rbJ[,qA'Mla
%>&sBI\%A($*XD?(#c89_*:3;c$=cN_]-u%u=?-U>UIlns8d"Q2bM<:rDE(U.p>qco)-(-D/c\un@b4%%gA%@I70J[p"Er/8(QH'E
%ic.+a+j&CC]GE)uW7]OrQ\QfG#0j<B^msRD$=Eki(h#*Hrfg4ipppafht4ecNA<sS,CZ]%mfsegP]L?7)i\(UGYn3l")ltAbpIZW
%rM)'%5ksB%,S#4-89g,ljO?nXVZH2c>dtO`_Ol<.@$T"`hUGB#F?p-uE`$JT$S=Fm.K.([N2l>#LTf5l3LFIg-k>l:@Ue@2`>mYb
%GKKA:)Kh-Sh%@$@0E/N=Tc%f4>I8iM;fQ%f[RAr:!:O05+O\/]lGG!7gfV$%'d0559Ai.>LtUcj6l90=Ifu$k6B=H""k&?\be$<I
%`o@BI5mg*nYuClrUQg,iXH+`gNYM)E[M%V"[4=Eb1&R]):"VrjRA1DFj#:u.[#fG7K'')DpK@&62b'$NM,?umN%DOsQ;X3`NnmkS
%^RfPCo2j>9piPgM9]UdZ\Q,LNb?,)[UP07(n+(CS]>UM\/guur"d?r((+MsJNKrff,=Qi"a'j]&'col]l8eV!/9DN)d$4i1Pg#<Y
%/agjUl&oI^T#FjAA/'^BosLNP=(BW(Y+Khb/@u)o\jV^uU,pI''-r0MMM>OuLs8%'-f!UhV1P+Xdmg/"T:g%5[B]Zdf71uUrD5-s
%f.g9a*;m_k?*5Tn\*7VhAQP3.<7IW#iO"9c^f9BJ>uHVXkIGHT>;abq'+HZ4/<MKZKg";"P:6q!QsF:)ka(.F$9t3u?,5jib^b-L
%KnjMB=@+_80/S@,q:dR7dU4+Ga3>lurdt<qJXOG7\gZ2J3inBdWMtH4FjSK8(;.le3eoU'-03Grk")EhKaBN4G9EVo-f]/m6_&:c
%0H@Q!VnuWWj09W"QN>3$Q#llc/-3c`1'Et8,qZKO0)V"p>k^#a!Wd66StFVW-(!$.F@!V'jeu^BWd=$VP;5Am0S1f/lXC8R)25%-
%$S6G&`k;#gFjUQc`aLNs_ACS0OUg,=IE]nP@kGV:JY#fa>ibsi9iCOA=7KSjL*1Lu%Y=u"Vbe8>F+0H<B:iIm3je54fQg_tW![Qu
%$X"FGh!?arECsANl_85n`39Jo3.8+tAA\r".VI'kfGJh#i(q=42+W-2Ku4![rUUuP,"pjB+K]:Q#FDZ81^&Oj;>[]&_['41/2V*"
%$&1XEe04mTNnK1'j-YujJB"hP5Xi_"]Gip!$oc,bA.e:"cg&]LD\c\"Rhjl,Ak=IKbuj[3Yfn<boCoM3?9pE_fsOC@?9o=EB(q18
%EJE.%];I+)aOiiBBN_CW.W]8J%G$1o[#h_QJ-_It*8R%@N6%cRP7hak[-`p?5r/soH@0m?Kaj#UZGd$&Np>sH94eChS8>S+o5i5T
%>](%ns.=cO+/DO'9rNSMpO3"GC\brq_X*bT_3eNLr(KH%Y(c^5lk8rHk)p(ZcCl?\G52t-Zj:f0;_1]83E45TkK<.S@/=jg0_**V
%8+)[f>n.0]q_;Bf&o'(+(b[t_8.Je>D0Bci=f?.sRQ+XjFi2I;>YiIJb[r"^+"O[sdcp(a?$(3IZ?l69RZR)c,gQ7^0CKSRB0S3]
%4q_qAARuK*dF^Ke]IpM?BV[_p^+?`V`:_9[6G-'@6a0;-0"m$8aTrGN+ZcjN%#4^8X.X]O9&o`P8?o1&Qf'6rjhJ=R@Va$?j$^`-
%&*jtj'_0Lf/!RYUq>Gg?0>IE;.h9gu4P'haoe;FRAGsDLCFYr69A=f9DS!;TF\Uq@r/-C;Q(MMsf'*NU;H'"F8ShjVjKSm//sO$A
%oNX\rQYe-NJ;BHC!jV?[.UR1WhOP;.C&bf2!0DHANk**7%n(XZMhHfd.8)W(M?:o/85'5hdBJNAD%9X3Lt\]g56=s"M+OP.\m6A!
%8nXqr_MPG?*VOosZf1cc-4&I8m-h`9#F>%GU&r'%D:+$L@[+c@6q98T$<`rc/94)Zck/Ei&_@kcd4D^V6modRBH\+:Eqt]7Ggp=1
%DK8BBH1l3*6R-O1J1#UAZGM!ulC:j'E$P3ah^5;=opi`%Oj(h%';5b,?PG@LKBK]pkWI0jP/a?A-_d1VlN-\jhZP<Q*5+(09-!fI
%FlsRc-4Gu]lE8#`6O,=1^?5g'oBWmWp-)H^Lcnp\"74)]V1hR!%rl_BFIqFlf?h\c?&9*F$c;YL)IVnoGLZHKl0=6]ngoj("%r[P
%nng*<0o+*g'*K>sE6FdcEUc0I(D^!krR3Dsr_?K,bJZa"!f*U6q1D853*9fLV*01UUpUV-HlU>3mPhjK(RWH93pu7=6kONG(^h(V
%99Q[RH"%(,.3!JgG\Ip'`8GnY+,sXKgh<?tq?X<blS=q"-q&aF,G(BpH^n@uL*&)$VXrim_:.X"4=%M`;lND;#qm-nGoWaicQgCD
%MmeOK)KQ07!Pd&qN\CIYrB.[ZaV,#I#-4"OMQ>ZJETH6Ell5,G;4s'&AYHP&WbprbfZ%TeYuA"*eO/$;BEI8^plQbuBVE]1Z3GOj
%ce"jjNeu(FCC'X%"jt1TX#!%9fUuZEd*0"aJXW-o=u\c&;HqSKp(#Q,.bTs:#G[$;cIG!bfjt`28]EbjB.lnMc6:g7;)E:d[LqMQ
%pdRqFl1@Z=TAg+MU-L$]/o+BKEh.1DfOZ0o^g1n-kC<[o?(^X4j1L/?rZ/F^,hecTa(;OMotj6ZY):>SX"=!%V^+?N'Hq^G,NeTu
%fLU)O-kq=LGl1>h9SaG2X?mIB&H@p8_G=Xu_0&IcNB%_bK*W,bMlA+/BMrU2_9FrC6c,hd.:Id5>7]kSZ`sMUE]Y4teNhiDkMm1_
%'\Ya@BX;5O![FC)Q++LuU.LpqT-B"8^Zt]H,bU80p`ktPJ+hWpT1R'U=rK>`(nMiI'fX?WHfM`GkNp[[;L%t^ddCB2"ib%TS0]C%
%^P\it!u<s%-K<NY6GfYBK4KoLh`._&U:A17pbT"]+r]VdO3enbVde#2\!K2UrCGOk58De`UL_@L1[#8DKl$pb:RCm.dj?tbe.`7b
%=k<)3Ko!U[$D.PW),M#WQQ$8jeOu#8/5<1l!T^FO6M63g%:8J^ob)EY]Dj+DUO$W192!!*XQkR>,7"HDYTep^#)@t2mu%RYMH*Rk
%"UT-h^>.4:0GP4%0W3K#p1dVIiGrL+.ZEP$mC>LaD8fW96dd#8*m.HDgleM+cM.h5,"/q?L)r$#1?"tu(3FHR/3<V57tKiq2[_mp
%\A#3uj2B#oc+@Vc$Xa?GK9$@DeIlDH#rF2^K[O>gW&,qUrk.O$2:`HIK<65V[nh/\nNZ=njS+,iUet.k('YF^Lu%RugBn+F,:uh2
%QeGQ6Cd+kGB:@&W-(Z1Z/u@t*U/LUqJpS]SbX)K5r,A)Z8rLZOO17OlSJLOBLfLK*A]bHlGUkM@Enr10Sr'3qMsW)o@!?cqg<^r6
%(s#+;k%GQF@NeK<;LDK3j\1/_Suu:-jAXb5aC`H'LJgD63iT(*V43<[`RI;RNL8)ple'.EQ_OhgQnZqBAJfdDS\VDNm[%[<HfQ6=
%SBc3im)Gjq$D'.OPO`8F(f02VO0]taf\5[`FF-PqY=`GrcSgMaX5#hE0WA#O=tWnJMqn-\Fi.I<GRl,+Xn\`kEL2h#qNQR5S_N-T
%R\4>eZ[>!Oc?Zqcf`D?nMTH9*&D`I'S2t55!#Hh%o1Eb3E2Hi"huN7GRI6WTkb2?r)'b-N,*[[3YqeP"X&-r]3O[$8=@h-NHsfkP
%&Q?;F>MeVPEQO_FH2V\Xj0]>;LchEKI`T$=NaGekE`jXI)FeC6k9QnJp?$M?e]R#A$R`r:46n5O0ul9q.%=mTQN7_a7Ok".^,WX\
%s2'JV__Y&17=WIn#K!M@.JEcgre&>N>OV^W,;:4$A"8M/im4!bY62"jR<S!$I,Ch]$>mn@Vkip@iTF`uMM!M;_VjD`FbD9k@u(M@
%rnpGt>&hh.O,eWQ,=:&r_f@U!Mi=3ad>'ee*\6SaKMmg*m$JBVcCDledE&P`2mGFQQqUqR1*)=Q*#UqN7q71Ao+U8AF'@6NHpMAF
%IZ?QiI[B_kk,s^N$q77F-TH&Pn/oq/O.5>f]So3r(uL\aGE@^R9Y`%7=hhnp7&7t&e]_PI=N00AnKnkl0RDX6`mncGCVk:Gl=.ut
%0$=hYlt2SIL))#uOT")Khbl)Q9OphZMgNUE*J2>_^S/8_&XsE;*s<Z?daG#aolbkTHf4RPQKX2AV=#\R*?QPYbY97/bj;_#P(P(A
%##6$#ZJ>j8U4j9F(>\6a.Hb]2gC"p00<-burs/Z9=#NKr]L:_h$5kW?.o>X`A#]5t$8$P,Jb;\.f\IPc:pi[/P%%[B8PU$J#]2QB
%_GoXjR:"(blcM1Wg#9h!__5Rg4Q$6$+I&?r3^)Y8cGmMU@@!j@dKXW"M(DG_#VF$8iiM)[?Go=camH9?n/)=E69s<9TXM7J7:1[A
%a(5R%d#NjcA%1nRj$^,'(Ul@6?'AqffPk8mZs7?hkg/ELk=K4KaG.m;^V@>V*LCK>iK^t!/k6UZo?joB.N6J-Q;t1ql$T4V]DY0,
%I,#t/bDX!HShE^B/\pC<c(@Bnip5&EBmD,H+$/;b^EXu0JX23:8/&ZJPgB[I1`JLFib01sKpl*!g_=ZeO\]jK[*S\f?CY-?8)='H
%fB.)MKI3nco><=CGT"r?3-o;SL3_gYQ;VlB8O7T.Sd'O)oSr^+BE25AR&Eed1^[,MLucr[RB+W!GepE,PbB4d*LA*dd8fOZWggRn
%gFR3dj5Xkg0Q1VW+&8;$g_e<pFt'3b'c^%cc_mm5>PPOEDm9f!_H_u#^ANBI"#>et&K#Lf\Ik85L%@]/)9l^[o!sp#Me01GX"@oD
%<M*#P^$/ZJ_\fX[H"SmHOfo3]o#2oQ]gMd5T&n&$bODJt.eK-r;VQ>MXA43n`["sJG9t:sp[p]b-_6nQ0q(Os%V&I%BbHSf>8\IW
%WA.ko7uJSCq\XIQq9?72.7ArAis98rZ>Gd`>Fb58fbB5-man<*CQC&<r<2u0X=4A^N,DcSc3u#3Vj:gpHu&(c[of;C$0[o.!A3#L
%22@r\'CS[UAt\O#7A?kV'E0V:r/'_i*WlZ#dp[283p^8pDEY7JnjUogn.Q@`LPu4A"R/i8U2Pj55RsUbP'1Q:o$aX*M_+=*=MdO$
%iE]n;n!<>s^cV,rR?me^E@_<6S3OfM'T)S$&gf=KA'p$AA5kI]Kdep^g"#<Ia'ULRHjo[.on,bMAJ@K`X*4Lf@1H4#Ndu"4h,63M
%mn/'ej;kCM"#\q%\DPH.#Vmg1)RRl$fe_PH>Xm&D>j49.&DN,17F$`e[W^kT%W!sT1s\0JD78PAfSeT_J<;<Wh?h.u%.fYr(L=L9
%23hLh)0Gd-=)<"Ymb"O@okC*/4U8\-!GS`"Qgfp"jh:9mh/hI:^/f*k.1dL7LHX7ETp&#iO@EVb#?d;`;S?q+k,hQ23%O*Y((qkd
%q"kA64NGr8ZC($"emZl@jK35cb;D\W@%(BSQbZ51#NWlf$@hN3UUPq;I,s1fS+kJ/H&LZ+g*aOo89]LG(lXu)3K+e@1U^AF@$fPG
%M-@qW>__#"YI:CAcGf?j92u%9ZO!IICDPQT0X,DXQIMsf.AfLgO<Rhp&AKF-f[b_;%Q`EU@k*^08JD7&XAdT?[603t0#YhV*I"\2
%C@\fFNr6u,`15rAL&i"HC`3\Cd5.Vi2?ucP966$K)oKE9E0;lXK7Of!j1tPr=3_fkAfUBJ[d>,^j%oHE""ZOdM:9jS*@l`#jb0th
%3Z6PbTJ5H9VVh)4;!*d=%VRAfO%.OZ:8jcM9Mo$c#!HWYU?aQeHp$)if$P<2/$K3i$Vb.rgeiC9%ar/M2KTX\)u/gB#*9]G-kl#A
%Mlme]^d+Bn'ou/jjhRuB!-qs6TCY*.*hH^Q5NL0k'd/Fd^$cUe-4GAh8f<HM?@iBLk.rRPg?W-N\a>IXIr.;-G=S]1'K+PX7uOAr
%+)OT5OLS&_Z&V2^,_7i4YF!77O\!5t;`TEHjq=Ib<WOe+k':fR!ohLq/lb/&ql+MRLhM&p>&\;Jr6STF1hK64E;!=3a#"I*4fXTj
%S7U/o"@Mnt6Hb#a_a.3Yb`3Hn!'ai2j4S.!N!etZ"!RuDb%cdVet,sJQ0iH=A`*\$?8oj0V^.ojI>8SA1j,8;FrU%9eKG!0+-Sib
%qinbM$d0IGG[,Q'P0Qgi%t:@:Jn"n;p1Mn<:"V6Rer8l2OH8"']N_)qQr&fe:P")kmAE2a`rhqBHYfrro)s6L,QZm7'dgIep1IXm
%VJ\PA3IpA;,e!b*);GDF[kJmEB3Ypl5M1e+l)+bDLKA+ElA969N/M=P<3%-^bRit2)O%'T'sLumE>YgLc^l>u#?p,R>lLq(`qp^;
%&0o>GnjMe>6#qL*,b<;eo4L+J,2K+=(5OQ//eh+j!e2+>-ELLEmDr3RE>H^%OVrHt^VA]lB]25Q84H8Mj$a3BEUEA70V]_h;5]2/
%5+/aJeW=dH1QJj]%DF"t]u/R.$2epeVa0s&lKa2LoN[^=s#QZBUCHfYbbk<r15Mb=7>eX.#e7^u2h<DP]MBJRT#0SF5hW]CaCa#1
%hK9kJqZ_5>C=C(3+9u"IgI^g>2Y(lH"-=MC_m^G/.;Q&)@r?N5`5hF&G@Se`*\B!#m6(+>!6Cn$gnCH1hfBmMW*1rs@,+]AV!4^S
%rbaPmeB.b'FON74n)erTOPH-&/RIrQD#<A%AI/h$-d.&@4\[9%!dUb"NX85QZ\WCbk1#k]DS2IR'1ti36WG;C4Y6?1m'oP]8_[a.
%n!*eLr#NM"+!J,dIIpL*j1OK/*%bb5]1(U)d_3pZj7=[i[[`3kYSM:n2LcaM;7!3!Z9DDMaJe^Dqq1_tr/.$[RdbU^gNQ0T"\-SM
%+8S+dge\OdaPPW/[ETh0FO:RZ^(&CmEU3+.pm&OV+%*?!jH#EbEpbs!?bXdUknS"M77@S?Wun0TMLbJi"9bTQX?UhDZVm\rV9AH/
%AX@DQ)9[OsCT;Q]?]?tfeQZ6&&4bA9N\0X3@#>'_A[-*5,Dt#f71BRgN@&=<S?XdPR^Xb&T&P$M9\B+@g`]Jto@dQ:lUiB=?ZkR#
%b,k\Nbg#TD=8^ft^*GEi*2Si7l%aA9+s]:H,QVQnXd)Y&!/a)O5asJ#"tn!,bFofGe^!<%Jp&N)e[;+>eW0U4b#p%R00uJN,/R-6
%J:Fl)$IoCn0>XiA:qKCL8KpcZk=<Uk,%"KiDpFZ28p$P7`AI%lWQJit4Rnm@L-?RASG-3m0edL-A-!3!;#HUS@DK0J2[.>pZt^r$
%@(\+5!`M;BTD2RKjB]oD73/jV8s]%1G[Zt3%>WtA6D?o.FduK*lO*Eh3#^C7<(ET@N1rlH*N3fpJQ5AF@bnT-c^SH(R^u-`KXc;\
%"dVR<0huiPf=h"%#3%48)8P,LK;EZjCFVi4b:LSlJo`XPQNXXXaZ2"o?WoDDkrNnr/=\YcjUf#>\Vk/U1e`p6d^?/8Lll.L4;2.5
%Qs`"-4f`SVAO/W2doYc*.rZXV1Wu<[Y4r.2Pfq$T&pPE@ViriXM-u3q8E='!'51+\\g"iA\j0n093'K'ArOOd-+ljcA;TVFD$#Hr
%k=e]QkZgT<VLlidZA8ZPI0`9D:*_Ue1'pW]eff93SeU$#e?^j^Akt1jWSa(<e<LSbFC(t")PW=u&R?VE[6;Rd(tB7M@^Ks,jXB86
%-ZBK!DoR$an9RF>iTBUl-+lS:)nt@G),q`A0i<!bDCaDnBHc\L#W"2T$s&S%`VZ-cCn_X-9N3A6DD?1XQKQ,O@QY32M4kh2jb*B=
%>3TkO_64*sg]bemP6c\ldT;R!r#5rcX9*!R>RXYh^c#aIOs5p\==7I@_L/b-W<[+e(,:jDW''Cm%["KF]T).[E[@GY\#S->HSQ4W
%ob9j>SaDT?!k)XA"BD8mNBl"LaSMd>M9ur+p3tr-lY'eWNF;?%U>7Skf^D6a<5'>WCW0NOq;P(^Ws3O1,(YAE3W6TAO%LeMpGjZl
%l(@aObY?,J#%g#Z:ZF6k-X)/pgBgUc(Rt?/Fs&p"dFHO,)St+fE1*hPZs<LDfStMNY\t8a7KPWpkP=R*RJ3s`mGFkVp:ejj3?GXK
%h(.A349"@/oZg%B2QTJRZgfL#L'BF&>Y@!p=pd[b2MiF:?*jVRcRK5AfR32eZ`7:`Dj1^oe$:_*P]t8fIsj>,BU5$;$SD2Q]e7eM
%'kU#Fe/A7bAT+\dZNn$,m5pSCKpAE!-T*KfrN#)VO`tPe`p<pONTsU%b$G&FHLFg8&2m?BO$=J>',gGNc::H(!WP;]9:12:pjQK%
%'\Cu5BH%jF<:8lCR2GG6Xg7&5fPXZ,p7:!jDm/5<R2kYUq0\\t+ZGEcr%/lK]:igH/";Ct-[D3L.Xq1M\%GLidJhfsW+=d8>P@Z3
%RlcmZb'nhe4b$l@rZ:Ia+.l#"NFTKH+]QEdAl:4'@nh/W8Hk$:Pp5qNcZ;HY-4,[l=(S.`H)#18+.%u?/)P(8r6,!-[5X4]$"!3h
%nd,c_-*.Y](qWt'?:2V/g(-tkU+/,1oQP2%VV3uJ/U!aI<<!_H?atnF8fKQS5?X?RN$mcEVP96qJVlWG4+oM0;+ja^:c8e"C^!':
%IreguK#u'^AC11<+^<)6EtR79+qaX=me2QdUG.V'E!I+5RJ5sce>_`?(ac-_+ns1d[@N'+'s!mlpdU5_NGE?9dr$`'-(29s=a:hn
%0j+3!KIH(CnZ[h<JQrn][4\Lba;"a-M.c-j=_Oce,spN>o3l^.lR?g#]GiR.=uS/]D6&`YYHgUI@#gOI9Of,DO9,!BM,'Q4(c;'Q
%.g*'OE%1GlHWM4tLCU&9bgaio-H)6.DF6,]n3tpA_&`=M,5^5b&.2<;HqU5l;<LE->ilO]P+c^cP(o.0UEqU=d-tLbk=6ELFMTo?
%=&Z`>G^'grZW1pVG#2p2G&JhQNfR#%o%0,8VY+2o%u(jsQI`DQE(025745&S%cBpS-LJa#h\ie2%.P.sc&2'6LW",<`J0MI9#&4[
%e(_H,JoNNgQuot4GRQ#G0>M2;fr:<+@'5eR/dg6M8:cj1C%#8jA?7o'Vl51\^=<oqlGYME>`$"EJ\5A!a%Wp7QmV8*D\=#R+t`?E
%0bsJgEk#0E@b`_W@$`V@GmQfs4bI:clgi%bQe*JOBqAZ=_o)O6%91RC0-<L=[://AB5BcqM2J2Zg#[=qD&mFU^*h)@VIC%`%.joZ
%1\W;&Q0Jl/_hm\3/&0s%"G2e4M^)4DDp)Qo4\N]QB;?_V@Q8u.0'%pM54,oiAO#0-='?^qP3;DM[j[[oBlb>bL^5DkU1bi8?Y-l\
%9-#7`2Cj$5T8pldA"<BfT0J#n&M!)UdX^B!qDdOOZ?MB4+:M8O'el\$9CD&6I!/B(Zkr@T):?`e6tXpr5igC*7WLbST!<P!2L;V^
%WI]:I?:UZKd5)ol/!7;?R0GDl!QRB7,C:FM^rsSc[>Tm:YSsYX_<!]\!kM(^7hkmp8BU(WdeC5Ue.=hK66B)i]dPdRZ8L;#`/e%@
%XB.hq;A08jB[TMr]Oc!srIP@`e>IXJ^?`3i)//a7.rOT)gS?7WLn]U38hIYU@[HXl8s#]7YV0)GlW&5YZ^[pOWp/*(1g4pCA)-<(
%32IV4XC=UY_(kFWISlL+qg^/k<TUuTS)qN&Li/BVe0?'t`GaQGnco#lGMC6Lk,ad`3n2'20bJ.f4V9q0m8lh"0R4q[L-Fn"9^,$-
%/`N?7AQdS8&hWhuGCSh^iLdumA??PF+&dn4GALRk8giWqVeEL."aDEW0ob&19O^KA":bhEpVCA^A&*m]1(su"&PQlpOqIUKm/@Wa
%"bu\15BnidP:i+dCsnOMXXS!K2AtAF3a-DsV9&#ZeME;3XJE<k&>$H,lUfki'_"hX%hA\-j[AR+r=rf,6+0fAnL[er4m0bSL'unm
%(*Ie(6!<I3p*%k+o&TY/$q1ei+F5YT:u<JpSNJQC@P(TB\N`=gK./tuSs,VT2*"!))k0,%/_S#s;nda4f.K,r$e$fN&#so3N'OK2
%d6LN]2"spZrQUc59X75`W=S%fSY+-3"<hg\1g``%RK5WLh,b5rGhn`B28o3<nNphNpWlb4<I)hQbQ4)6.mC!=K_?q9(+oG<+t`8%
%\,*"k$H<VJlO@PaRje,]/2bElRG3X81WJ'Lq4E[%-7>/(olueI9oH=IN[^G;.rL*BRON?h1*@<Ke!c-ZL8T[Rp6TM_,YP8CiAn!!
%n&=Ug1SHSCM]$I2*EMLrMaO%PR>3?M?e0K&%,t\-#n`8h*^GF0<$C2!43Zom'&9s)jR>?fa3Q8+[h_?uV`606(iq`P7atm>l)]IY
%<)fuZJDX0X]3:M.i%iPm0h0SXQp7d$$t#?"pD=W%#&!MU2o8gX(6VQa=k7Q2@C8/c5R!.Nmj/4:QkZi*80m'DFIa_A($1,dbAtl@
%/bE<g,^H^'&Q@@];I:7D>5(sO>MPam3/8I0liqlYWrpn8;G0%4VX2NTnt;,Cob-u1(.5qo:@dcmq<lR*/mModo?DapS&cGbk<G;]
%GJQ!U_^e5Ki.jOa\KHsk"NdZhN!\mp0_qVN\P#&Ka*>q/I/*S/E)8h%hM2N]i9'V6bXM/XYHRNr#/iV'rPsEfbO>H"n,DAFn,N79
%s7+,os7Yd9s5dU:2Z2Mus7n=_rn"pbq1&A3?iU,Kn,Dm=5QCNOpOE2.?iTiG5QC?,s7>isIfGbLs8%e+rpB0hrr+#>o5FXF/\!2^
%pqn3QofrD1?[hbL!#h6eV#~>
%AI9_PrivateDataEnd
