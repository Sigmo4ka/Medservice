%!PS-Adobe-3.1 EPSF-3.0
%%Title: Page rules II [Converted].eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: pingwin pingwin
%%CreationDate: 4/2/2015
%%BoundingBox: 0 0 538 616
%%HiResBoundingBox: 0 0 537.1243 615.7708
%%CropBox: 0 0 537.1243 615.7708
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page rules II [Converted].eps) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2015-04-02T02:55:36Z</xap:CreateDate>
  <xap:ModifyDate>2015-04-02T02:55:36Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>224</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADgAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUr1vzR5b0JY21n&#xA;U7bTzNX0EuJUR5COojQnk59lBxViWofn1+WFqY4bfVTqeozuI7XS7GKSa6lc9FVOKgV/mchffFU2&#xA;h8y+dpE+sv5Qkitacjbtf2pvqV6CFSbetPG4GKsg0rVLTVLGO9tS3pOWUrIpR0eNikkbo1Cro6lW&#xA;B6EYq8z/AC+8ieWtc8vifzb5fll85kB9b1TU7aVLsXTkljZXrAFYkIpH9XkAVadK7qs28jz6h+i7&#xA;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&#xA;hksJjQAl7G5jntlJoOTRorHucVSiDyZJ5F8o3rWOuLo2h6bDcX97+jNPtY5mEaerLJyn+soX4pQV&#xA;T26AYq8r8reVZfzLgjutfup55/MFrpuq28F5K8hewsdYuVv7SNvgReVubZjwVV5sCAoOKvobW/KP&#xA;ljXNPk0/VtLtry0lgNq0cka1EJp8CMKMgBAI4kUIBG+KvHlEf5V6F5z0/wAg2z3SxXel2OmRXDmd&#xA;E1bUKROHelaRxSW/wk+A74qpTTS6Tq2q2Oo3n6Tk8rWsN55084a3614iz3UYkitNM05JI4UZlYFe&#xA;K0WoqGalVU8XyH51vxbeY9Ikk0bWeAMUuoTr9eMXGohuI4Ymh9OtP9Hd3VexR/iVV3ln8wrTylZ+&#xA;ZLbz20Gg+a3urjUqXLcYL9ZEUQNaOC/qhERIfTQs68aHFWaCHUvN35d2VxfWK2Gt3lnBepZzV4wX&#xA;nASqjVHILz+Fgd+JKnuMVa/LvytqHlfylHa36xXOthT9bkgYlJfQX0bdVZ1U0EEaDdftVPUnFWDa&#xA;x+Z1j5s8g2GnWEcV5+YF/JaN/hq2Y/WLK9t7hJZGuA452yW7RkmSQDptWuKos+QfP13er5k16WPU&#xA;NYiUtBbW1z9Xa1rWsdjzikhhNKLUtyffnJxoFVY39etru60j1Gmt9K1y8fR7bzFpnq6VrGl6wpZf&#xA;quowpJJDPydSvKnGvVSOJKqvJdat5t8qL5S/MMtIdK80poWu6naH6uLiI27SWNyOOyGW4ltgR2qD&#xA;12xV6z5S8heUfKWmW2naBpkNpDaK6xSU5zfvSDIWmflIS5UV37DsBirxfzv+X7eVb/VL/wAuSyWW&#xA;qXF5qnmTTra0kdDDaWmlfv1YRsh43OoCJWWtODKKV2CrM/LFhcfmT+XFley64+oaFrtr/pFhqtna&#xA;XLJIj8ZE9SBLQExTRMFbjXavXFU90/8AKfRI9Ot9M1O5m1LSbbgYdG4w2unAxkFedtapD6wqoNLh&#xA;pBXFWNecfytTzT5+sbK21M+X9H0GyhuUstNX0pJWuZZ42ZQAsAAWHg3NJBxYjiOWKsz0PT4ND8zN&#xA;o+nSs1hNYi6msvhEVrLHIsSPHGoVYVugXPBAE5RsVAJaqqR/85DLcH8mvMz21fXghhuI2XYqYLmK&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -615.771 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 615.771 li
537.124 615.771 li
537.124 0 li
clp
[1 0 0 1 0 0 ] concat
264.603 335.835 mo
246.82 322.659 232.491 313.155 217.875 310.707 cv
203.331 308.259 188.355 312.723 169.132 327.483 cv
165.963 329.859 162.652 331.875 159.34 333.531 cv
156.028 335.115 152.716 336.411 149.331 337.275 cv
132.123 341.811 114.844 336.987 103.035 327.411 cv
94.9714 320.931 86.4036 314.451 77.4753 310.347 cv
68.5476 306.315 59.1873 304.515 49.5393 307.395 cv
38.0193 310.851 32.9075 318.627 32.1155 326.835 cv
31.6113 332.307 33.0513 337.923 35.8594 342.603 cv
38.5955 347.283 42.6272 350.955 47.4514 352.467 cv
54.0754 354.627 62.2112 352.755 70.2751 343.755 cv
71.7156 345.051 li
63.0032 354.627 54.1472 356.643 46.8752 354.267 cv
41.6194 352.539 37.2273 348.579 34.2034 343.539 cv
31.2515 338.571 29.7395 332.523 30.2434 326.691 cv
31.1074 317.763 36.5793 309.267 48.9636 305.595 cv
59.1873 302.571 68.9075 304.443 78.1956 308.619 cv
87.4114 312.867 96.0515 319.419 104.187 325.971 cv
115.635 335.187 132.267 339.867 148.899 335.475 cv
152.139 334.611 155.379 333.387 158.548 331.875 cv
161.716 330.291 164.884 328.347 167.979 325.971 cv
187.707 310.923 203.115 306.315 218.163 308.907 cv
233.211 311.427 247.683 321.003 265.755 334.323 cv
264.603 335.835 li
false sop
/0 
[/DeviceCMYK] add_csa
0 0 0 1 cmyk
f
265.323 334.827 mo
244.875 316.971 228.891 306.027 212.115 303.579 cv
195.483 301.131 177.988 307.251 154.659 323.379 cv
117.508 349.083 99.2195 337.419 78.1233 323.955 cv
66.2434 316.395 53.4993 308.259 36.0034 306.027 cv
20.2354 304.083 10.2993 309.411 5.3313 317.115 cv
1.73145 322.731 .867432 329.715 2.37939 335.907 cv
3.96338 342.171 7.99536 347.715 14.1875 350.667 cv
23.1155 354.915 36.5073 353.763 53.7874 341.523 cv
53.9314 341.451 54.1472 341.307 54.2913 341.235 cv
61.1316 336.627 70.7795 335.547 79.8513 337.347 cv
88.9236 339.075 97.4915 343.683 102.243 350.451 cv
102.387 350.667 102.459 350.811 102.603 351.027 cv
101.811 351.531 li
101.74 351.387 101.595 351.171 101.523 351.027 cv
96.8435 344.475 88.4915 340.011 79.6355 338.283 cv
70.7795 336.555 61.4915 337.563 54.7952 341.955 cv
54.6516 342.099 54.5076 342.171 54.3635 342.315 cv
36.7234 354.699 22.9714 355.851 13.8274 351.531 cv
7.27539 348.435 3.09937 342.675 1.51538 336.123 cv
-.140625 329.643 .79541 322.515 4.53931 316.611 cv
9.65137 308.619 19.9473 303.075 36.0754 305.091 cv
53.8596 307.323 66.6755 315.531 78.6272 323.163 cv
99.4353 336.483 117.435 348.003 154.156 322.587 cv
177.699 306.315 195.34 300.195 212.26 302.643 cv
229.179 305.091 245.379 316.107 265.971 334.107 cv
265.323 334.827 li
f
264.676 335.835 mo
264.531 335.763 234.652 320.859 224.355 317.547 cv
210.459 313.083 201.099 315.459 195.844 320.643 cv
191.884 324.531 190.227 330.003 190.731 335.331 cv
191.163 340.731 193.756 345.987 198.291 349.371 cv
204.483 353.979 214.419 355.203 227.667 348.651 cv
237.603 343.683 245.307 340.731 251.427 339.795 cv
257.691 338.859 262.3 340.083 265.755 343.467 cv
266.043 343.755 266.331 344.115 266.547 344.403 cv
268.059 346.419 268.707 348.651 268.491 350.883 cv
268.276 353.115 267.267 355.275 265.612 356.931 cv
265.323 357.291 264.963 357.579 264.676 357.867 cv
259.203 362.115 252.075 360.675 244.803 359.235 cv
234.867 357.291 224.716 355.275 219.603 369.027 cv
218.307 368.595 li
223.924 353.763 234.579 355.851 245.019 357.939 cv
252.003 359.307 258.844 360.675 263.811 356.787 cv
264.171 356.571 264.459 356.283 264.676 355.995 cv
266.187 354.555 267.052 352.683 267.196 350.811 cv
267.34 348.867 266.835 346.923 265.539 345.267 cv
265.323 344.979 265.035 344.691 264.747 344.403 cv
261.652 341.307 257.475 340.227 251.643 341.091 cv
245.667 342.027 238.035 344.979 228.243 349.803 cv
214.491 356.643 204.052 355.347 197.499 350.379 cv
192.603 346.779 189.867 341.163 189.364 335.475 cv
188.931 329.715 190.659 323.883 194.907 319.707 cv
200.523 314.163 210.315 311.643 224.787 316.251 cv
235.227 319.635 265.179 334.611 265.251 334.683 cv
264.676 335.835 li
f
91.8752 343.971 mo
93.7473 347.715 93.6033 350.235 94.7556 351.963 cv
96.5554 354.627 97.4192 354.627 96.1956 357.219 cv
96.0515 357.435 95.8352 357.651 95.6912 357.867 cv
96.0515 357.651 96.4832 357.435 96.9153 357.219 cv
99.7952 355.419 99.9392 352.395 98.1394 349.731 cv
96.9875 348.003 94.6116 347.139 91.8752 343.971 cv
ef
265.468 332.523 mo
261.795 327.699 258.34 326.187 256.755 323.595 cv
254.451 319.563 254.955 318.411 250.707 318.411 cv
250.347 318.411 249.988 318.555 249.555 318.627 cv
250.059 318.195 250.635 317.763 251.283 317.403 cv
255.459 314.667 259.491 316.539 261.867 320.571 cv
263.451 323.163 263.019 326.907 265.468 332.523 cv
ef
115.419 364.059 mo
115.203 364.491 114.555 365.067 113.548 364.635 cv
109.875 363.123 111.028 357.579 108.435 355.419 cv
107.499 354.483 104.979 353.763 104.331 355.419 cv
103.539 357.219 106.707 357.651 106.275 360.171 cv
105.34 365.643 101.884 365.355 102.099 364.635 cv
102.243 364.491 102.459 364.275 102.531 364.059 cv
102.82 363.339 102.603 362.547 101.955 362.259 cv
101.379 362.043 100.659 362.403 100.371 363.123 cv
99.7234 364.563 100.659 366.219 102.315 366.291 cv
105.699 366.507 106.635 363.267 106.995 360.675 cv
107.068 359.595 108.435 359.523 108.579 360.819 cv
108.867 363.843 113.619 368.451 116.355 365.283 cv
119.307 361.827 113.907 360.027 113.835 362.691 cv
113.835 363.411 114.555 364.059 115.419 364.059 cv
ef
108.867 363.555 mo
108.652 364.707 106.851 367.011 107.068 364.635 cv
107.139 364.059 107.211 363.411 107.211 363.411 cv
107.211 363.411 105.915 365.139 106.059 366.363 cv
106.132 367.587 107.499 367.587 108.291 366.147 cv
109.083 364.707 108.867 363.555 108.867 363.555 cv
ef
97.8513 344.043 mo
101.811 345.195 104.331 344.691 106.203 345.483 cv
109.156 346.779 109.3 347.643 111.676 345.987 cv
111.891 345.771 112.035 345.555 112.179 345.339 cv
112.035 345.771 111.891 346.275 111.747 346.707 cv
110.523 349.875 107.572 350.451 104.619 349.227 cv
102.747 348.363 101.451 346.131 97.8513 344.043 cv
ef
266.619 330.075 mo
266.475 326.763 265.971 323.451 265.035 320.139 cv
262.011 310.347 255.603 300.051 244.875 297.747 cv
238.827 296.667 232.635 298.611 230.043 304.587 cv
230.043 304.587 230.115 304.587 230.187 304.515 cv
230.619 304.443 230.979 304.299 231.411 304.155 cv
240.699 301.203 251.499 304.659 258.196 311.499 cv
263.307 317.187 265.755 324.459 266.115 331.947 cv
266.26 331.299 266.404 330.651 266.619 330.075 cv
ef
214.635 386.163 mo
215.139 386.379 215.931 386.595 216.579 385.659 cv
218.811 382.419 214.851 378.315 215.86 375.219 cv
216.147 373.923 217.875 371.979 219.315 372.987 cv
220.899 374.067 218.451 376.083 220.179 377.955 cv
223.995 382.059 226.731 379.971 226.227 379.467 cv
225.939 379.395 225.723 379.323 225.508 379.179 cv
224.86 378.747 224.643 377.955 225.003 377.379 cv
225.364 376.875 226.156 376.803 226.803 377.235 cv
228.099 378.099 228.243 379.971 226.875 380.979 cv
224.139 382.995 221.619 380.763 219.963 378.747 cv
219.243 377.883 218.019 378.531 218.667 379.755 cv
220.035 382.419 218.595 388.899 214.563 387.675 cv
210.243 386.379 213.699 381.915 215.211 384.147 cv
215.643 384.795 215.355 385.659 214.635 386.163 cv
ef
219.891 382.203 mo
220.683 383.067 223.491 384.003 221.979 382.131 cv
221.619 381.627 221.26 381.195 221.26 381.195 cv
221.26 381.195 223.203 381.915 223.78 382.995 cv
224.355 384.075 223.275 384.867 221.835 384.075 cv
220.395 383.283 219.891 382.203 219.891 382.203 cv
ef
225.652 361.179 mo
225.075 364.491 225.723 366.435 225.219 368.019 cv
224.499 370.467 223.78 370.683 225.364 372.411 cv
225.508 372.555 225.723 372.627 225.939 372.771 cv
225.508 372.699 225.147 372.627 224.787 372.555 cv
222.123 371.835 221.331 369.531 222.123 367.011 cv
222.627 365.427 224.283 364.203 225.652 361.179 cv
ef
220.323 361.467 mo
217.083 363.987 214.491 364.419 213.052 365.859 cv
210.82 368.091 210.963 368.955 208.156 368.235 cv
207.939 368.163 207.723 368.019 207.435 367.875 cv
207.723 368.235 208.011 368.595 208.371 368.955 cv
210.676 371.475 213.627 370.971 215.931 368.667 cv
217.371 367.227 217.731 364.707 220.323 361.467 cv
ef
218.667 369.243 mo
219.387 369.243 220.035 369.891 220.035 370.611 cv
220.035 371.403 219.387 372.051 218.667 372.051 cv
217.875 372.051 217.227 371.403 217.227 370.611 cv
217.227 369.891 217.875 369.243 218.667 369.243 cv
ef
103.323 351.531 mo
104.115 351.531 104.691 352.107 104.691 352.899 cv
104.691 353.691 104.115 354.339 103.323 354.339 cv
102.531 354.339 101.955 353.691 101.955 352.899 cv
101.955 352.107 102.531 351.531 103.323 351.531 cv
ef
211.395 345.699 mo
215.787 343.971 218.955 339.435 217.371 334.683 cv
216.364 332.019 213.699 329.859 210.747 330.795 cv
209.163 331.371 208.444 332.595 208.3 334.179 cv
208.156 335.475 207.219 334.467 206.931 333.819 cv
206.211 331.371 208.444 329.211 210.603 328.635 cv
215.355 327.627 219.028 331.587 219.531 336.051 cv
219.963 341.955 215.499 346.491 209.884 347.499 cv
202.468 348.579 196.132 343.683 194.115 336.699 cv
192.028 328.275 196.491 320.139 204.123 316.467 cv
207.508 315.027 211.612 314.307 215.283 315.027 cv
215.931 315.171 214.924 315.099 214.78 315.099 cv
206.787 314.523 199.156 318.267 195.771 325.827 cv
193.683 330.939 194.115 336.627 197.427 341.163 cv
200.811 345.411 206.139 347.499 211.395 345.699 cv
ef
57.0276 336.267 mo
61.4192 334.539 64.5872 330.003 63.0032 325.251 cv
61.9954 322.587 59.3313 320.427 56.3792 321.363 cv
54.7952 321.939 54.0754 323.163 53.9314 324.747 cv
53.7874 326.043 52.8513 325.035 52.5632 324.315 cv
51.8435 321.867 54.0754 319.779 56.2356 319.203 cv
60.9153 318.195 64.6594 322.155 65.1633 326.547 cv
65.5955 332.523 61.1316 337.059 55.5154 338.067 cv
48.0994 339.147 41.7634 334.251 39.7473 327.267 cv
37.6594 318.843 42.1233 310.635 49.7556 307.035 cv
53.1394 305.523 57.2434 304.803 60.9153 305.595 cv
61.5632 305.739 60.5554 305.667 60.4114 305.667 cv
52.4192 305.091 44.7874 308.835 41.4033 316.395 cv
39.3154 321.507 39.7473 327.195 43.0593 331.731 cv
46.4436 335.979 51.7712 337.995 57.0276 336.267 cv
ef
72.5076 341.595 mo
73.2996 341.595 73.9475 342.243 73.9475 342.963 cv
73.9475 343.755 73.2996 344.403 72.5076 344.403 cv
71.7156 344.403 71.1394 343.755 71.1394 342.963 cv
71.1394 342.243 71.7156 341.595 72.5076 341.595 cv
ef
84.5315 331.803 mo
84.2434 331.371 83.6672 330.795 82.5872 331.155 cv
78.9875 332.739 80.0676 338.283 77.5476 340.443 cv
76.5393 341.379 74.0916 342.099 73.3713 340.443 cv
72.6516 338.643 75.8196 338.211 75.3875 335.691 cv
74.4514 330.219 70.9236 330.507 71.1394 331.155 cv
71.3552 331.371 71.4993 331.587 71.5715 331.803 cv
71.9314 332.523 71.6433 333.315 71.0676 333.603 cv
70.4192 333.819 69.6995 333.459 69.4114 332.739 cv
68.8352 331.227 69.6995 329.643 71.3552 329.571 cv
74.7395 329.355 75.7473 332.595 76.0354 335.187 cv
76.1794 336.267 77.5476 336.339 77.6194 335.043 cv
77.9075 332.019 82.6594 327.411 85.3953 330.579 cv
88.3474 334.035 82.9475 335.835 82.9475 333.171 cv
82.9475 332.451 83.5955 331.803 84.5315 331.803 cv
ef
77.9075 332.307 mo
77.7634 331.155 75.8914 328.851 76.1072 331.227 cv
76.1794 331.803 76.2512 332.379 76.2512 332.379 cv
76.2512 332.379 75.0276 330.723 75.0994 329.499 cv
75.2434 328.275 76.5393 328.203 77.3313 329.715 cv
78.1233 331.155 77.9075 332.307 77.9075 332.307 cv
ef
152.716 322.299 mo
150.052 324.315 147.171 325.971 144.003 327.411 cv
134.499 331.227 122.548 332.739 113.979 325.971 cv
109.227 321.939 106.851 315.963 109.875 310.131 cv
109.875 310.131 109.875 310.203 109.948 310.275 cv
110.092 310.635 110.236 311.067 110.379 311.427 cv
113.979 320.499 123.483 326.691 133.059 327.555 cv
140.619 327.915 147.82 325.179 153.867 320.787 cv
153.435 321.291 153.075 321.795 152.716 322.299 cv
ef
154.875 324.603 mo
151.924 326.187 149.187 328.059 146.595 330.363 cv
139.179 337.347 132.771 347.643 135.364 358.299 cv
137.092 364.275 141.555 368.883 148.035 368.595 cv
148.035 368.595 148.035 368.523 147.963 368.451 cv
147.676 368.163 147.387 367.875 147.099 367.587 cv
140.331 360.531 138.676 349.299 141.915 340.299 cv
144.723 333.171 150.196 327.771 156.747 324.171 cv
156.099 324.315 155.451 324.459 154.875 324.603 cv
ef
199.587 310.491 mo
196.707 312.075 193.971 313.947 191.379 316.251 cv
183.963 323.307 177.555 333.531 180.147 344.187 cv
181.803 350.163 186.34 354.771 192.82 354.483 cv
192.82 354.483 192.82 354.411 192.747 354.339 cv
192.459 354.051 192.171 353.763 191.884 353.475 cv
185.115 346.419 183.459 335.187 186.627 326.187 cv
189.508 319.059 194.979 313.659 201.459 310.059 cv
200.884 310.203 200.236 310.347 199.587 310.491 cv
ef
39.3154 307.971 mo
36.5793 309.411 33.9873 311.211 31.5393 313.371 cv
24.5554 319.995 18.5073 329.643 20.9553 339.651 cv
22.5393 345.195 26.7874 349.587 32.9075 349.299 cv
32.9075 349.299 32.8354 349.299 32.7634 349.227 cv
32.5474 348.939 32.2593 348.651 31.9714 348.363 cv
25.6355 341.739 24.1233 331.155 27.0754 322.731 cv
29.8113 316.035 34.9233 310.995 41.0435 307.611 cv
40.4673 307.683 39.8914 307.827 39.3154 307.971 cv
ef
158.187 317.691 mo
152.068 318.123 148.683 316.539 145.731 317.115 cv
141.123 317.979 140.619 319.203 137.811 315.963 cv
137.523 315.747 137.379 315.315 137.236 314.955 cv
137.236 315.603 137.307 316.323 137.379 317.043 cv
138.171 322.011 142.203 323.811 146.811 322.875 cv
149.835 322.299 152.355 319.563 158.187 317.691 cv
ef
185.115 318.843 mo
181.3 323.595 180.723 327.339 178.563 329.427 cv
175.251 332.667 173.955 332.451 174.963 336.555 cv
175.035 336.915 175.323 337.275 175.539 337.635 cv
174.963 337.203 174.387 336.771 173.884 336.267 cv
170.283 332.883 171.075 328.491 174.387 325.179 cv
176.548 323.091 180.291 322.587 185.115 318.843 cv
ef
272.451 335.835 mo
290.307 322.659 304.635 313.155 319.251 310.707 cv
333.795 308.259 348.699 312.723 367.995 327.483 cv
371.163 329.859 374.404 331.875 377.716 333.531 cv
381.028 335.115 384.411 336.411 387.723 337.275 cv
405.003 341.811 422.211 336.987 434.092 327.411 cv
442.083 320.931 450.652 314.451 459.652 310.347 cv
468.579 306.315 477.867 304.515 487.587 307.395 cv
499.107 310.851 504.219 318.627 504.939 326.835 cv
505.444 332.307 504.003 337.923 501.267 342.603 cv
498.531 347.283 494.427 350.955 489.676 352.467 cv
483.052 354.627 474.915 352.755 466.78 343.755 cv
465.411 345.051 li
474.123 354.627 482.907 356.643 490.251 354.267 cv
495.508 352.539 499.899 348.579 502.851 343.539 cv
505.803 338.571 507.387 332.523 506.811 326.691 cv
506.019 317.763 500.475 309.267 488.092 305.595 cv
477.939 302.571 468.147 304.443 458.86 308.619 cv
449.716 312.867 441.003 319.419 432.867 325.971 cv
421.491 335.187 404.86 339.867 388.227 335.475 cv
384.988 334.611 381.747 333.387 378.579 331.875 cv
375.34 330.291 372.171 328.347 369.147 325.971 cv
369.075 325.971 li
349.419 310.923 334.011 306.315 318.891 308.907 cv
303.915 311.427 289.371 321.003 271.371 334.323 cv
272.451 335.835 li
f
271.731 334.827 mo
292.251 316.971 308.236 306.027 324.939 303.579 cv
341.643 301.131 359.068 307.251 382.395 323.379 cv
419.619 349.083 437.907 337.419 459.003 323.955 cv
470.811 316.395 483.555 308.259 501.123 306.027 cv
516.82 304.083 526.827 309.411 531.795 317.115 cv
535.395 322.731 536.26 329.715 534.676 335.907 cv
533.163 342.171 529.131 347.715 522.939 350.667 cv
514.011 354.915 500.547 353.763 483.339 341.523 cv
483.123 341.451 482.979 341.307 482.835 341.235 cv
475.924 336.627 466.347 335.547 457.275 337.347 cv
448.203 339.075 439.635 343.683 434.811 350.451 cv
434.74 350.667 434.595 350.811 434.523 351.027 cv
435.243 351.531 li
435.387 351.387 435.459 351.171 435.603 351.027 cv
440.211 344.475 448.563 340.011 457.419 338.283 cv
466.275 336.555 475.635 337.563 482.26 341.955 cv
482.475 342.099 482.619 342.171 482.763 342.315 cv
500.331 354.699 514.156 355.851 523.3 351.531 cv
529.78 348.435 533.955 342.675 535.612 336.123 cv
537.267 329.643 536.331 322.515 532.515 316.611 cv
527.475 308.619 517.179 303.075 500.979 305.091 cv
483.267 307.323 470.451 315.531 458.499 323.163 cv
437.691 336.483 419.619 348.003 382.971 322.587 cv
359.427 306.315 341.787 300.195 324.795 302.643 cv
307.875 305.091 291.747 316.107 271.156 334.107 cv
271.731 334.827 li
f
272.451 335.835 mo
272.523 335.763 302.404 320.859 312.771 317.547 cv
326.595 313.083 335.955 315.459 341.211 320.643 cv
345.171 324.531 346.827 330.003 346.395 335.331 cv
345.963 340.731 343.371 345.987 338.835 349.371 cv
332.572 353.979 322.707 355.203 309.459 348.651 cv
299.523 343.683 291.747 340.731 285.699 339.795 cv
279.364 338.859 274.827 340.083 271.371 343.467 cv
271.083 343.755 270.795 344.115 270.508 344.403 cv
268.995 346.419 268.347 348.651 268.563 350.883 cv
268.78 353.115 269.787 355.275 271.444 356.931 cv
271.803 357.291 272.092 357.579 272.451 357.867 cv
277.924 362.115 285.052 360.675 292.323 359.235 cv
302.26 357.291 312.34 355.275 317.523 369.027 cv
318.747 368.595 li
313.203 353.763 302.547 355.851 292.035 357.939 cv
285.123 359.307 278.211 360.675 273.315 356.787 cv
272.955 356.571 272.667 356.283 272.379 355.995 cv
270.939 354.555 270.075 352.683 269.86 350.811 cv
269.716 348.867 270.219 346.923 271.587 345.267 cv
271.803 344.979 272.019 344.691 272.307 344.403 cv
275.404 341.307 279.652 340.227 285.483 341.091 cv
291.459 342.027 299.092 344.979 308.811 349.803 cv
322.635 356.643 333.003 355.347 339.627 350.379 cv
344.451 346.779 347.26 341.163 347.691 335.475 cv
348.196 329.715 346.395 323.883 342.147 319.707 cv
336.603 314.163 326.74 311.643 312.34 316.251 cv
301.899 319.635 271.948 334.611 271.875 334.683 cv
272.451 335.835 li
f
445.251 343.971 mo
443.379 347.715 443.451 350.235 442.3 351.963 cv
440.572 354.627 439.707 354.627 440.931 357.219 cv
441.075 357.435 441.291 357.651 441.435 357.867 cv
441.003 357.651 440.572 357.435 440.211 357.219 cv
437.26 355.419 437.187 352.395 438.988 349.731 cv
440.139 348.003 442.515 347.139 445.251 343.971 cv
ef
271.659 332.523 mo
275.331 327.699 278.787 326.187 280.3 323.595 cv
282.676 319.563 282.099 318.411 286.347 318.411 cv
286.78 318.411 287.139 318.555 287.572 318.627 cv
286.995 318.195 286.419 317.763 285.844 317.403 cv
281.667 314.667 277.635 316.539 275.187 320.571 cv
273.676 323.163 274.035 326.907 271.659 332.523 cv
ef
421.635 364.059 mo
421.924 364.491 422.499 365.067 423.579 364.635 cv
427.179 363.123 426.099 357.579 428.619 355.419 cv
429.627 354.483 432.075 353.763 432.795 355.419 cv
433.515 357.219 430.347 357.651 430.78 360.171 cv
431.716 365.643 435.243 365.355 435.028 364.635 cv
434.811 364.491 434.667 364.275 434.595 364.059 cv
434.236 363.339 434.523 362.547 435.099 362.259 cv
435.747 362.043 436.468 362.403 436.755 363.123 cv
437.331 364.563 436.468 366.219 434.811 366.291 cv
431.427 366.507 430.419 363.267 430.132 360.675 cv
429.988 359.595 428.619 359.523 428.547 360.819 cv
428.26 363.843 423.508 368.451 420.771 365.283 cv
417.82 361.827 423.219 360.027 423.219 362.691 cv
423.219 363.411 422.572 364.059 421.635 364.059 cv
ef
428.26 363.555 mo
428.404 364.707 430.275 367.011 430.059 364.635 cv
429.988 364.059 429.915 363.411 429.915 363.411 cv
429.915 363.411 431.139 365.139 431.068 366.363 cv
430.924 367.587 429.627 367.587 428.835 366.147 cv
428.043 364.707 428.26 363.555 428.26 363.555 cv
ef
439.203 344.043 mo
435.243 345.195 432.795 344.691 430.851 345.483 cv
427.971 346.779 427.827 347.643 425.451 345.987 cv
425.236 345.771 425.092 345.555 424.948 345.339 cv
425.019 345.771 425.163 346.275 425.379 346.707 cv
426.603 349.875 429.555 350.451 432.508 349.227 cv
434.379 348.363 435.676 346.131 439.203 344.043 cv
ef
270.508 330.075 mo
270.652 326.763 271.156 323.451 272.092 320.139 cv
275.115 310.347 281.523 300.051 292.179 297.747 cv
298.3 296.667 304.419 298.611 307.083 304.587 cv
307.083 304.587 307.011 304.587 306.867 304.515 cv
306.508 304.443 306.075 304.299 305.716 304.155 cv
296.427 301.203 285.627 304.659 278.931 311.499 cv
273.82 317.187 271.371 324.459 271.011 331.947 cv
270.795 331.299 270.652 330.651 270.508 330.075 cv
ef
322.491 386.163 mo
321.988 386.379 321.196 386.595 320.547 385.659 cv
318.315 382.419 322.203 378.315 321.267 375.219 cv
320.979 373.923 319.251 371.979 317.811 372.987 cv
316.156 374.067 318.603 376.083 316.875 377.955 cv
313.132 382.059 310.395 379.971 310.899 379.467 cv
311.115 379.395 311.404 379.323 311.619 379.179 cv
312.267 378.747 312.483 377.955 312.123 377.379 cv
311.763 376.875 310.899 376.803 310.251 377.235 cv
308.955 378.099 308.884 379.971 310.251 380.979 cv
312.915 382.995 315.508 380.763 317.163 378.747 cv
317.884 377.883 319.035 378.531 318.459 379.755 cv
317.092 382.419 318.531 388.899 322.563 387.675 cv
326.884 386.379 323.355 381.915 321.915 384.147 cv
321.483 384.795 321.699 385.659 322.491 386.163 cv
ef
317.163 382.203 mo
316.444 383.067 313.635 384.003 315.147 382.131 cv
315.508 381.627 315.867 381.195 315.867 381.195 cv
315.867 381.195 313.924 381.915 313.347 382.995 cv
312.771 384.075 313.851 384.867 315.291 384.075 cv
316.731 383.283 317.163 382.203 317.163 382.203 cv
ef
311.404 361.179 mo
312.052 364.491 311.331 366.435 311.835 368.019 cv
312.627 370.467 313.276 370.683 311.763 372.411 cv
311.619 372.555 311.404 372.627 311.187 372.771 cv
311.547 372.699 311.979 372.627 312.34 372.555 cv
315.003 371.835 315.723 369.531 315.003 367.011 cv
314.499 365.427 312.844 364.203 311.404 361.179 cv
ef
316.803 361.467 mo
320.043 363.987 322.563 364.419 324.003 365.859 cv
326.307 368.091 326.092 368.955 328.899 368.235 cv
329.187 368.163 329.404 368.019 329.619 367.875 cv
329.404 368.235 329.043 368.595 328.755 368.955 cv
326.451 371.475 323.499 370.971 321.196 368.667 cv
319.755 367.227 319.323 364.707 316.803 361.467 cv
ef
318.459 369.243 mo
317.667 369.243 317.092 369.891 317.092 370.611 cv
317.092 371.403 317.667 372.051 318.459 372.051 cv
319.251 372.051 319.899 371.403 319.899 370.611 cv
319.899 369.891 319.251 369.243 318.459 369.243 cv
ef
433.803 351.531 mo
433.011 351.531 432.364 352.107 432.364 352.899 cv
432.364 353.691 433.011 354.339 433.803 354.339 cv
434.523 354.339 435.171 353.691 435.171 352.899 cv
435.171 352.107 434.523 351.531 433.803 351.531 cv
ef
325.731 345.699 mo
321.34 343.971 318.171 339.435 319.755 334.683 cv
320.763 332.019 323.427 329.859 326.307 330.795 cv
327.891 331.371 328.612 332.595 328.827 334.179 cv
328.971 335.475 329.907 334.467 330.123 333.819 cv
330.915 331.371 328.612 329.211 326.451 328.635 cv
321.771 327.627 318.099 331.587 317.595 336.051 cv
317.163 341.955 321.627 346.491 327.243 347.499 cv
334.659 348.579 340.995 343.683 343.011 336.699 cv
345.099 328.275 340.635 320.139 333.003 316.467 cv
329.619 315.027 325.515 314.307 321.771 315.027 cv
321.123 315.171 322.203 315.099 322.276 315.099 cv
330.34 314.523 337.971 318.267 341.355 325.827 cv
343.444 330.939 343.011 336.627 339.699 341.163 cv
336.315 345.411 330.988 347.499 325.731 345.699 cv
ef
480.099 336.267 mo
475.707 334.539 472.539 330.003 474.123 325.251 cv
475.132 322.587 477.795 320.427 480.676 321.363 cv
482.331 321.939 482.979 323.163 483.196 324.747 cv
483.339 326.043 484.276 325.035 484.491 324.315 cv
485.283 321.867 483.052 319.779 480.82 319.203 cv
476.139 318.195 472.468 322.155 471.963 326.547 cv
471.531 332.523 475.995 337.059 481.612 338.067 cv
489.028 339.147 495.364 334.251 497.379 327.267 cv
499.468 318.843 495.003 310.635 487.371 307.035 cv
483.988 305.523 479.884 304.803 476.139 305.595 cv
475.491 305.739 476.572 305.667 476.643 305.667 cv
484.707 305.091 492.339 308.835 495.723 316.395 cv
497.811 321.507 497.379 327.195 494.068 331.731 cv
490.683 335.979 485.355 337.995 480.099 336.267 cv
ef
464.619 341.595 mo
463.827 341.595 463.179 342.243 463.179 342.963 cv
463.179 343.755 463.827 344.403 464.619 344.403 cv
465.34 344.403 465.988 343.755 465.988 342.963 cv
465.988 342.243 465.34 341.595 464.619 341.595 cv
ef
452.595 331.803 mo
452.884 331.371 453.459 330.795 454.468 331.155 cv
458.139 332.739 457.059 338.283 459.579 340.443 cv
460.515 341.379 463.035 342.099 463.683 340.443 cv
464.475 338.643 461.307 338.211 461.74 335.691 cv
462.676 330.219 466.132 330.507 465.988 331.155 cv
465.771 331.371 465.627 331.587 465.483 331.803 cv
465.196 332.523 465.483 333.315 466.059 333.603 cv
466.635 333.819 467.355 333.459 467.716 332.739 cv
468.291 331.227 467.355 329.643 465.699 329.571 cv
462.315 329.355 461.379 332.595 461.092 335.187 cv
460.948 336.267 459.579 336.339 459.435 335.043 cv
459.147 332.019 454.468 327.411 451.731 330.579 cv
448.78 334.035 454.107 335.835 454.179 333.171 cv
454.179 332.451 453.459 331.803 452.595 331.803 cv
ef
459.219 332.307 mo
459.364 331.155 461.236 328.851 460.948 331.227 cv
460.948 331.803 460.875 332.379 460.875 332.379 cv
460.875 332.379 462.099 330.723 462.028 329.499 cv
461.884 328.275 460.587 328.203 459.795 329.715 cv
459.003 331.155 459.219 332.307 459.219 332.307 cv
ef
384.411 322.299 mo
387.075 324.315 389.955 325.971 393.052 327.411 cv
402.555 331.227 414.579 332.739 423.147 325.971 cv
427.899 321.939 430.203 315.963 427.251 310.131 cv
427.251 310.131 427.251 310.203 427.179 310.275 cv
427.035 310.635 426.891 311.067 426.747 311.427 cv
423.147 320.499 413.643 326.691 404.068 327.555 cv
396.435 327.915 389.307 325.179 383.26 320.787 cv
383.619 321.291 384.052 321.795 384.411 322.299 cv
ef
382.251 324.603 mo
385.132 326.187 387.939 328.059 390.531 330.363 cv
397.948 337.347 404.355 347.643 401.763 358.299 cv
400.035 364.275 395.572 368.883 389.019 368.595 cv
389.019 368.595 389.092 368.523 389.163 368.451 cv
389.451 368.163 389.74 367.875 390.028 367.587 cv
396.795 360.531 398.451 349.299 395.211 340.299 cv
392.404 333.171 386.931 327.771 380.379 324.171 cv
381.028 324.315 381.603 324.459 382.251 324.603 cv
ef
337.468 310.491 mo
340.419 312.075 343.156 313.947 345.747 316.251 cv
353.163 323.307 359.572 333.531 356.979 344.187 cv
355.251 350.163 350.787 354.771 344.307 354.483 cv
344.307 354.483 344.307 354.411 344.379 354.339 cv
344.667 354.051 344.955 353.763 345.243 353.475 cv
352.011 346.419 353.667 335.187 350.427 326.187 cv
347.619 319.059 342.147 313.659 335.595 310.059 cv
336.243 310.203 336.891 310.347 337.468 310.491 cv
ef
497.811 307.971 mo
500.547 309.411 503.139 311.211 505.587 313.371 cv
512.572 319.995 518.547 329.643 516.171 339.651 cv
514.515 345.195 510.339 349.587 504.219 349.299 cv
504.219 349.299 504.219 349.299 504.291 349.227 cv
504.579 348.939 504.867 348.651 505.156 348.363 cv
511.491 341.739 513.003 331.155 509.979 322.731 cv
507.315 316.035 502.203 310.995 496.083 307.611 cv
496.659 307.683 497.236 307.827 497.811 307.971 cv
ef
378.939 317.691 mo
385.059 318.123 388.444 316.539 391.395 317.115 cv
395.931 317.979 396.508 319.203 399.315 315.963 cv
399.531 315.747 399.676 315.315 399.891 314.955 cv
399.82 315.603 399.82 316.323 399.676 317.043 cv
398.955 322.011 394.924 323.811 390.243 322.875 cv
387.291 322.299 384.771 319.563 378.939 317.691 cv
ef
352.011 318.843 mo
355.755 323.595 356.404 327.339 358.563 329.427 cv
361.875 332.667 363.171 332.451 362.163 336.555 cv
362.019 336.915 361.803 337.275 361.587 337.635 cv
362.163 337.203 362.667 336.771 363.243 336.267 cv
366.844 332.883 366.052 328.491 362.667 325.179 cv
360.508 323.091 356.835 322.587 352.011 318.843 cv
ef
268.491 333.747 mo
269.787 333.747 270.867 334.755 270.867 336.051 cv
270.867 337.347 269.787 338.427 268.491 338.427 cv
267.196 338.427 266.26 337.347 266.26 336.051 cv
266.26 334.755 267.196 333.747 268.491 333.747 cv
ef
268.491 328.275 mo
269.427 328.275 270.147 328.995 270.147 329.931 cv
270.147 330.795 269.427 331.587 268.491 331.587 cv
267.627 331.587 266.907 330.795 266.907 329.931 cv
266.907 328.995 267.627 328.275 268.491 328.275 cv
ef
268.491 323.883 mo
269.139 323.883 269.643 324.387 269.643 325.035 cv
269.643 325.683 269.139 326.187 268.491 326.187 cv
267.915 326.187 267.34 325.683 267.34 325.035 cv
267.34 324.387 267.915 323.883 268.491 323.883 cv
ef
263.523 432.819 mo
263.667 437.283 264.315 441.675 265.539 446.139 cv
265.827 447.219 266.691 449.091 267.34 450.675 cv
267.34 446.139 266.115 441.603 266.115 437.067 cv
266.115 433.323 267.483 426.195 268.276 421.011 cv
269.139 426.195 270.579 433.323 270.579 437.067 cv
270.579 441.603 269.283 446.139 269.283 450.675 cv
270.003 449.091 270.867 447.219 271.156 446.139 cv
272.379 441.675 272.955 437.283 273.171 432.819 cv
273.459 426.843 273.171 422.811 275.907 417.123 cv
275.475 422.379 275.26 427.635 274.827 432.747 cv
277.707 426.411 283.468 421.443 290.74 421.299 cv
294.411 421.443 297.867 422.739 299.955 425.835 cv
301.251 428.139 301.539 431.163 299.379 433.107 cv
299.163 433.251 298.948 433.395 298.659 433.539 cv
298.659 434.115 298.371 434.619 297.867 434.835 cv
297.147 435.195 296.283 434.907 295.924 434.187 cv
295.563 433.467 295.851 432.603 296.572 432.243 cv
297.219 431.883 298.083 432.171 298.444 432.819 cv
299.163 432.171 299.595 431.523 299.884 430.587 cv
300.531 427.707 298.803 425.259 296.572 423.675 cv
292.612 421.227 288.075 421.587 283.971 423.459 cv
279.652 425.691 276.627 429.219 274.755 433.467 cv
274.755 433.827 274.755 434.187 274.683 434.547 cv
275.404 433.251 276.267 432.099 277.419 431.163 cv
280.659 428.643 285.123 428.211 288.508 430.875 cv
290.451 432.603 291.459 435.267 290.451 437.787 cv
289.803 439.011 288.795 439.947 287.427 440.163 cv
285.771 440.235 284.404 439.083 285.052 437.427 cv
285.123 437.283 285.196 437.067 285.196 436.923 cv
285.196 436.707 285.196 436.419 285.411 436.347 cv
285.915 436.059 286.563 437.067 286.851 437.427 cv
287.572 438.291 288.579 437.643 289.083 436.851 cv
290.307 434.547 288.652 432.027 286.707 430.803 cv
283.899 429.219 280.587 429.651 277.995 431.451 cv
276.411 432.603 275.26 434.043 274.539 435.699 cv
274.107 438.291 273.747 440.883 273.099 443.403 cv
272.667 444.987 271.948 447.075 271.227 448.875 cv
272.163 448.083 273.891 446.355 274.899 443.619 cv
276.34 439.731 277.851 436.131 280.659 435.123 cv
283.395 434.115 287.068 433.827 287.068 433.827 cv
287.068 433.827 280.515 434.259 279.867 437.787 cv
279.147 441.243 278.211 446.211 275.187 447.507 cv
273.171 448.443 271.803 448.947 271.156 449.235 cv
270.291 451.323 269.499 453.195 269.283 453.699 cv
269.283 454.707 li
268.924 455.139 268.635 455.355 268.276 455.283 cv
267.988 455.355 267.699 455.139 267.34 454.707 cv
267.34 453.699 li
267.196 453.195 266.404 451.323 265.539 449.235 cv
264.891 448.947 263.523 448.443 261.508 447.507 cv
258.483 446.211 257.547 441.243 256.827 437.787 cv
256.179 434.259 249.627 433.827 249.627 433.827 cv
249.627 433.827 253.3 434.115 256.035 435.123 cv
258.844 436.131 260.355 439.731 261.795 443.619 cv
262.803 446.355 264.531 448.083 265.468 448.875 cv
264.747 447.075 264.028 444.987 263.595 443.403 cv
262.948 440.883 262.587 438.291 262.156 435.699 cv
261.435 434.043 260.283 432.603 258.699 431.451 cv
256.107 429.651 252.795 429.219 249.988 430.803 cv
248.043 432.027 246.387 434.547 247.612 436.851 cv
248.115 437.643 249.123 438.291 249.844 437.427 cv
250.132 437.067 250.78 436.059 251.283 436.347 cv
251.499 436.419 251.499 436.707 251.499 436.923 cv
251.499 437.067 251.572 437.283 251.643 437.427 cv
252.291 439.083 250.924 440.235 249.267 440.163 cv
247.899 439.947 246.891 439.011 246.243 437.787 cv
245.236 435.267 246.243 432.603 248.187 430.875 cv
251.572 428.211 256.035 428.643 259.276 431.163 cv
260.427 432.099 261.291 433.251 262.011 434.547 cv
261.939 434.187 261.939 433.827 261.867 433.467 cv
260.068 429.219 257.043 425.691 252.723 423.459 cv
248.619 421.587 244.083 421.227 240.123 423.675 cv
237.891 425.259 236.163 427.707 236.811 430.587 cv
237.099 431.523 237.531 432.171 238.251 432.819 cv
238.612 432.171 239.404 431.883 240.123 432.243 cv
240.844 432.603 241.132 433.467 240.771 434.187 cv
240.411 434.907 239.547 435.195 238.827 434.835 cv
238.323 434.619 238.035 434.115 238.035 433.539 cv
237.747 433.395 237.531 433.251 237.315 433.107 cv
235.156 431.163 235.444 428.139 236.74 425.835 cv
238.827 422.739 242.283 421.443 245.955 421.299 cv
253.227 421.443 258.988 426.411 261.867 432.747 cv
261.435 427.635 261.219 422.379 260.787 417.123 cv
263.523 422.811 263.236 426.843 263.523 432.819 cv
ef
262.156 429.723 mo
261.652 425.403 260.068 421.299 257.043 418.131 cv
250.419 411.075 242.572 413.667 234.003 414.891 cv
234.003 414.819 li
242.643 413.523 250.276 410.787 257.26 417.915 cv
260.499 421.227 262.3 425.619 262.731 430.299 cv
262.156 429.723 li
ef
234.723 415.539 mo
234.147 415.179 233.931 414.459 234.219 413.811 cv
234.579 413.235 235.3 413.019 235.948 413.307 cv
236.523 413.667 236.74 414.387 236.451 415.035 cv
236.092 415.611 235.3 415.827 234.723 415.539 cv
ef
238.395 415.251 mo
237.603 414.819 237.315 413.883 237.747 413.091 cv
238.179 412.299 239.115 412.011 239.907 412.443 cv
240.699 412.803 240.988 413.811 240.555 414.603 cv
240.196 415.395 239.187 415.683 238.395 415.251 cv
ef
243.723 415.107 mo
242.643 414.531 242.283 413.235 242.86 412.155 cv
243.364 411.147 244.731 410.787 245.74 411.291 cv
246.747 411.867 247.179 413.163 246.603 414.243 cv
246.028 415.251 244.731 415.683 243.723 415.107 cv
ef
274.971 429.723 mo
275.404 425.403 277.059 421.299 280.011 418.131 cv
286.707 411.075 294.555 413.667 303.052 414.891 cv
303.052 414.891 303.052 414.819 303.123 414.819 cv
294.483 413.523 286.851 410.787 279.867 417.915 cv
276.555 421.227 274.827 425.619 274.395 430.299 cv
274.971 429.723 li
ef
302.404 415.539 mo
302.979 415.179 303.196 414.459 302.907 413.811 cv
302.547 413.235 301.827 413.019 301.179 413.307 cv
300.603 413.667 300.387 414.387 300.676 415.035 cv
301.035 415.611 301.755 415.827 302.404 415.539 cv
ef
298.731 415.251 mo
299.523 414.819 299.811 413.883 299.379 413.091 cv
298.948 412.299 297.939 412.011 297.147 412.443 cv
296.355 412.803 296.068 413.811 296.499 414.603 cv
296.931 415.395 297.939 415.683 298.731 415.251 cv
ef
293.404 415.107 mo
294.483 414.531 294.844 413.235 294.267 412.155 cv
293.691 411.147 292.395 410.787 291.387 411.291 cv
290.307 411.867 289.948 413.163 290.523 414.243 cv
291.099 415.251 292.395 415.683 293.404 415.107 cv
ef
209.092 427.923 mo
204.196 427.779 199.227 428.427 194.475 429.651 cv
202.107 427.203 210.099 426.195 218.019 427.419 cv
226.3 428.715 234.003 432.099 241.059 436.491 cv
233.787 432.531 226.156 429.363 217.875 428.283 cv
214.995 427.923 212.043 427.779 209.092 427.923 cv
cp
224.787 431.235 mo
222.483 430.299 220.179 429.579 217.803 429.003 cv
215.787 428.571 213.771 428.283 211.683 428.067 cv
213.771 428.067 215.787 428.283 217.875 428.571 cv
226.227 429.795 234.075 433.395 241.203 437.787 cv
245.451 440.451 249.483 443.331 253.371 446.427 cv
249.267 443.619 245.163 440.811 240.915 438.363 cv
235.803 435.411 230.475 432.819 224.787 431.235 cv
cp
239.26 439.155 mo
239.547 439.299 239.835 439.515 240.123 439.659 cv
249.411 445.131 257.835 451.899 266.187 458.667 cv
258.123 451.467 249.844 444.483 240.627 438.795 cv
236.236 436.059 231.627 433.683 226.731 432.027 cv
231.196 433.971 235.3 436.419 239.26 439.155 cv
f
115.275 474.291 mo
113.331 471.123 110.451 468.603 107.283 466.659 cv
103.827 464.499 99.9392 463.059 95.9075 462.195 cv
91.9475 461.331 87.7712 461.115 83.7395 461.619 cv
79.9954 462.123 76.2512 463.347 73.1555 465.435 cv
67.3953 469.323 61.2034 472.707 54.5076 474.507 cv
49.8274 475.731 44.7874 476.163 40.0354 475.011 cv
36.2195 474.075 32.7634 472.131 30.0273 469.323 cv
27.5073 466.659 25.7073 463.419 24.7715 459.891 cv
23.8354 456.363 23.7634 452.619 24.5554 449.091 cv
25.3474 445.419 27.0034 442.035 29.5234 439.227 cv
32.2593 436.131 35.9314 433.971 39.8914 432.747 cv
45.0754 431.091 50.6194 431.091 56.0193 431.739 cv
75.6755 434.475 89.9314 446.859 106.78 456.075 cv
114.483 460.179 122.763 462.843 131.691 462.267 cv
144.075 461.475 155.451 455.355 165.531 448.443 cv
174.387 442.395 183.82 436.707 194.043 433.251 cv
201.603 430.731 209.595 429.579 217.515 430.803 cv
222.555 431.595 227.451 433.179 232.059 435.339 cv
229.971 434.187 227.811 433.179 225.579 432.243 cv
222.988 431.379 220.323 430.731 217.587 430.299 cv
209.595 429.147 201.531 430.299 193.899 432.819 cv
183.603 436.347 174.171 442.035 165.315 448.083 cv
155.307 454.923 143.931 461.043 131.619 461.907 cv
122.835 462.411 114.627 459.819 106.924 455.715 cv
90.0754 446.571 75.8196 434.115 56.0193 431.451 cv
50.6194 430.731 45.0754 430.803 39.8193 432.459 cv
35.7874 433.755 32.1155 435.915 29.3074 439.083 cv
26.7874 441.891 25.0593 445.347 24.2673 449.019 cv
23.4753 452.619 23.6194 456.363 24.5554 459.963 cv
25.4915 463.491 27.2913 466.803 29.8113 469.467 cv
32.6194 472.347 36.1475 474.291 39.9634 475.227 cv
44.7874 476.379 49.8274 475.947 54.5793 474.723 cv
61.3474 472.923 67.5393 469.539 73.2273 465.651 cv
76.3953 463.491 80.0676 462.339 83.7395 461.835 cv
87.7712 461.331 91.9475 461.619 95.9075 462.411 cv
99.8674 463.275 103.683 464.787 107.139 466.875 cv
107.283 466.947 107.427 467.019 107.572 467.163 cv
110.595 468.963 113.331 471.339 115.275 474.291 cv
cp
215.931 429.363 mo
208.371 428.571 200.884 429.723 193.683 432.171 cv
183.387 435.699 173.884 441.459 164.884 447.579 cv
155.019 454.347 143.787 460.467 131.619 461.331 cv
122.907 461.907 114.771 459.315 107.139 455.283 cv
90.2195 446.067 75.8914 433.683 56.0916 431.019 cv
50.6194 430.371 45.0032 430.443 39.6753 432.099 cv
35.6433 433.395 31.8994 435.627 29.0193 438.867 cv
26.4993 441.747 24.7715 445.203 23.9795 448.947 cv
23.1875 452.619 23.2593 456.435 24.2673 460.035 cv
25.2034 463.635 27.0034 467.019 29.6675 469.683 cv
32.4753 472.563 36.0034 474.507 39.8914 475.515 cv
44.7874 476.667 49.8274 476.235 54.6516 474.939 cv
61.4192 473.139 67.6116 469.755 73.3713 465.795 cv
76.4675 463.707 80.0676 462.483 83.8113 461.979 cv
87.8435 461.475 91.8752 461.691 95.9075 462.555 cv
98.9314 463.203 101.884 464.211 104.619 465.579 cv
101.884 464.283 98.8596 463.275 95.8352 462.699 cv
91.8752 461.907 87.8435 461.763 83.8113 462.339 cv
80.2112 462.915 76.6833 464.067 73.6594 466.227 cv
67.8992 470.259 61.6355 473.715 54.8674 475.659 cv
49.8992 477.027 44.7156 477.531 39.7473 476.379 cv
35.6433 475.443 31.8994 473.355 28.9473 470.403 cv
26.1394 467.595 24.1953 464.067 23.1875 460.323 cv
22.1074 456.507 21.9634 452.547 22.7554 448.731 cv
23.6194 444.771 25.4194 441.027 28.0835 438.003 cv
31.0354 434.619 34.9954 432.171 39.2434 430.803 cv
44.7156 429.003 50.6194 428.859 56.3074 429.579 cv
76.3235 432.171 90.8674 444.483 108.003 453.627 cv
115.347 457.515 123.123 459.963 131.475 459.387 cv
143.283 458.451 154.156 452.475 163.731 445.851 cv
170.86 440.883 178.347 436.275 186.34 432.747 cv
188.572 431.955 190.875 431.235 193.179 430.659 cv
200.595 428.643 208.3 427.923 215.931 429.363 cv
f
89.2112 419.931 mo
90.0032 419.715 90.8674 420.795 91.1555 421.587 cv
91.9475 424.539 88.9954 426.915 86.3313 427.275 cv
84.2434 427.563 82.2273 426.915 80.4993 425.691 cv
73.7312 420.363 76.8274 409.347 84.6755 407.115 cv
84.7473 407.043 85.5393 406.827 85.6116 406.971 cv
85.6833 407.043 85.3953 407.259 85.3235 407.259 cv
83.5232 408.483 81.5076 409.707 80.5715 411.723 cv
80.1394 412.515 81.2195 411.363 81.3635 411.219 cv
86.4036 406.323 93.8914 406.251 99.3635 410.643 cv
102.243 413.019 104.043 416.115 104.907 419.571 cv
104.835 420.435 104.763 421.299 104.835 422.163 cv
105.555 431.739 110.955 439.299 118.587 444.843 cv
136.875 456.651 159.411 452.547 175.395 439.515 cv
174.82 438.651 li
159.699 450.675 138.459 454.779 121.035 444.123 cv
112.539 438.291 106.132 429.219 107.572 418.491 cv
108.508 413.523 111.315 408.699 116.427 407.259 cv
120.099 406.467 123.483 408.411 126.723 409.923 cv
125.931 409.059 124.995 408.267 124.059 407.475 cv
120.963 404.883 118.011 403.731 114.052 405.171 cv
109.227 407.115 106.491 411.435 105.411 416.187 cv
102.387 407.835 93.0276 402.291 84.0276 406.323 cv
78.5554 408.987 75.2434 414.747 76.8274 420.795 cv
78.1233 424.899 81.8674 428.139 86.3313 427.635 cv
89.2112 427.203 92.3074 424.611 91.3713 421.371 cv
91.0833 420.435 90.2913 419.427 89.2112 419.571 cv
88.6355 419.643 87.7712 420.219 87.7712 420.795 cv
87.7712 421.371 88.2034 421.803 88.7073 421.803 cv
89.2834 421.803 89.7156 421.371 89.7156 420.867 cv
89.7156 420.435 89.4993 420.147 89.2112 419.931 cv
ef
173.236 432.675 mo
172.948 430.731 169.995 429.795 168.196 430.011 cv
161.355 430.875 158.979 439.011 160.419 444.843 cv
161.643 449.451 164.667 453.123 168.699 455.571 cv
180.291 462.123 193.539 456.651 200.019 446.715 cv
200.523 446.571 201.028 446.499 201.459 446.355 cv
197.283 453.051 190.587 457.875 182.092 459.027 cv
180.435 459.171 178.78 459.099 177.123 458.955 cv
174.315 459.171 171.508 460.035 168.915 461.619 cv
162.219 466.083 159.052 474.507 162.795 481.995 cv
165.963 487.971 173.451 491.139 179.572 487.467 cv
183.315 485.019 185.548 479.619 182.307 475.803 cv
181.227 474.651 179.643 473.859 177.988 474.291 cv
176.691 474.723 175.756 476.091 176.115 477.531 cv
176.548 478.899 175.035 479.115 174.099 478.467 cv
171.939 476.883 173.163 473.787 174.963 472.491 cv
178.491 470.043 182.884 472.203 184.683 475.659 cv
187.635 481.707 183.387 488.115 177.411 489.771 cv
170.931 491.283 164.811 487.755 162.003 481.923 cv
158.475 473.715 162.291 464.859 169.995 460.683 cv
172.011 459.675 174.099 459.027 176.187 458.811 cv
168.627 457.587 161.931 452.907 159.844 445.131 cv
158.187 438.723 160.924 430.083 168.411 429.291 cv
170.643 429.075 173.379 429.939 174.099 432.315 cv
174.387 433.539 173.955 435.771 172.731 436.275 cv
171.579 436.779 170.283 436.275 169.78 435.195 cv
169.347 434.115 169.851 432.819 170.931 432.315 cv
171.723 431.955 172.659 432.099 173.236 432.675 cv
ef
130.035 459.531 mo
128.236 459.027 126.508 458.235 124.78 457.227 cv
117.291 452.259 113.835 442.827 117.939 434.547 cv
121.539 427.923 129.82 424.323 136.587 428.499 cv
140.835 431.163 143.283 437.211 139.683 441.459 cv
138.459 442.755 136.659 443.619 134.931 443.115 cv
133.419 442.611 132.411 441.099 132.844 439.587 cv
133.275 438.003 131.619 437.787 130.539 438.507 cv
128.163 440.235 129.531 443.691 131.475 445.131 cv
135.435 447.795 140.331 445.419 142.347 441.603 cv
145.659 434.907 140.907 427.779 134.211 425.907 cv
127.083 424.179 120.243 428.139 117.147 434.619 cv
113.115 443.763 117.435 453.627 125.931 458.235 cv
127.227 458.883 128.451 459.387 129.747 459.747 cv
130.035 459.531 li
ef
11.2354 472.707 mo
12.0273 472.707 12.6033 471.555 12.6033 470.835 cv
12.6753 468.027 9.50732 466.515 7.05933 466.803 cv
5.11548 467.019 3.45947 468.027 2.16333 469.539 cv
-2.73267 475.803 2.52344 485.019 10.0115 485.307 cv
10.1553 485.307 10.9473 485.307 10.9473 485.163 cv
10.9473 485.091 10.6594 484.947 10.5874 484.947 cv
8.71533 484.299 6.62744 483.651 5.3313 482.067 cv
4.82739 481.419 6.05127 482.211 6.12329 482.283 cv
11.8113 485.595 18.5073 483.939 22.4673 478.827 cv
25.4194 474.867 25.9954 469.971 24.9153 465.219 cv
24.8435 464.859 24.6995 464.499 24.6274 464.211 cv
24.4834 463.347 24.7715 463.779 25.0593 464.211 cv
25.4194 464.859 25.7073 465.507 25.9233 466.227 cv
29.3074 476.595 20.8833 488.115 9.65137 486.099 cv
4.17944 484.947 -.140625 480.555 .00341797 474.723 cv
.219482 470.763 2.81128 467.019 6.9873 466.515 cv
9.65137 466.227 13.0354 467.883 12.8914 470.979 cv
12.8193 471.843 12.3154 472.923 11.3074 473.067 cv
10.8035 473.139 9.93945 472.851 9.79541 472.275 cv
9.65137 471.843 9.93945 471.339 10.3713 471.195 cv
10.8755 471.051 11.3794 471.339 11.5234 471.771 cv
11.5955 472.131 11.5234 472.491 11.2354 472.707 cv
ef
69.9153 446.499 mo
69.4832 444.843 71.5715 443.115 73.0833 442.683 cv
78.8435 441.099 83.4514 446.787 84.2434 451.971 cv
84.7473 456.075 83.5955 459.963 81.1472 463.275 cv
75.1711 471.051 65.2356 472.203 57.2434 468.819 cv
55.0115 467.883 53.4993 466.659 51.5554 465.363 cv
51.1233 465.435 51.6272 466.443 51.9153 466.803 cv
57.4592 470.835 64.4436 472.419 71.5715 470.475 cv
72.9392 470.043 74.3074 469.467 75.5315 468.747 cv
77.8352 468.027 80.3552 467.811 83.0193 468.171 cv
89.8596 469.539 95.1873 475.299 94.6833 482.427 cv
94.1072 488.331 89.2112 493.371 83.0916 492.435 cv
79.2751 491.715 75.6755 488.115 77.0432 484.011 cv
77.4753 482.715 78.4832 481.563 79.9236 481.347 cv
81.1472 481.275 82.2996 482.067 82.5154 483.291 cv
82.6594 484.587 83.9553 484.227 84.4592 483.363 cv
85.6116 481.419 83.6672 479.331 81.7952 478.899 cv
78.1956 478.107 75.3152 481.275 75.0276 484.659 cv
74.6672 490.491 80.2112 494.163 85.6116 493.515 cv
91.2273 492.651 94.9714 487.755 95.2595 482.211 cv
95.4036 474.435 89.3552 468.603 81.8674 467.811 cv
79.9236 467.667 77.9792 467.883 76.2512 468.387 cv
81.8674 464.931 85.6833 458.883 84.8196 451.971 cv
83.9553 446.355 78.9153 440.307 72.6516 442.179 cv
70.8513 442.755 68.9075 444.339 69.1233 446.499 cv
69.2673 447.579 70.4192 449.163 71.5715 449.235 cv
72.5793 449.235 73.5154 448.371 73.5154 447.363 cv
73.5154 446.283 72.7234 445.419 71.6433 445.419 cv
70.9236 445.419 70.2034 445.851 69.9153 446.499 cv
ef
115.347 473.283 mo
116.068 473.283 116.643 473.859 116.643 474.507 cv
116.643 475.227 116.068 475.731 115.347 475.731 cv
114.699 475.731 114.123 475.227 114.123 474.507 cv
114.123 473.859 114.699 473.283 115.347 473.283 cv
ef
112.827 469.611 mo
113.691 469.611 114.411 470.331 114.411 471.195 cv
114.411 472.131 113.691 472.851 112.827 472.851 cv
111.891 472.851 111.171 472.131 111.171 471.195 cv
111.171 470.331 111.891 469.611 112.827 469.611 cv
ef
108.939 465.723 mo
110.163 465.723 111.099 466.731 111.099 467.883 cv
111.099 469.107 110.163 470.043 108.939 470.043 cv
107.787 470.043 106.851 469.107 106.851 467.883 cv
106.851 466.731 107.787 465.723 108.939 465.723 cv
ef
222.123 490.851 mo
221.619 491.283 221.548 492.075 221.979 492.651 cv
222.483 493.155 223.275 493.155 223.78 492.723 cv
224.283 492.291 224.355 491.499 223.851 490.995 cv
223.419 490.419 222.627 490.419 222.123 490.851 cv
ef
224.355 486.315 mo
223.635 486.891 223.635 487.971 224.211 488.619 cv
224.787 489.267 225.795 489.339 226.515 488.763 cv
227.163 488.115 227.236 487.107 226.587 486.459 cv
226.011 485.811 225.003 485.739 224.355 486.315 cv
ef
227.811 481.707 mo
226.948 482.427 226.875 483.795 227.667 484.731 cv
228.459 485.595 229.827 485.667 230.691 484.875 cv
231.555 484.083 231.699 482.715 230.907 481.851 cv
230.115 480.987 228.747 480.915 227.811 481.707 cv
ef
25.7073 466.083 mo
27.5073 469.971 28.2273 474.363 27.3633 478.611 cv
25.3474 488.115 17.2834 489.987 9.36328 493.371 cv
17.4275 490.059 25.3474 488.403 27.6514 478.755 cv
28.7314 474.147 27.9395 469.467 25.9233 465.291 cv
25.7073 466.083 li
ef
9.65137 492.435 mo
9.2915 493.011 9.50732 493.803 10.0835 494.163 cv
10.6594 494.523 11.4514 494.307 11.7395 493.731 cv
12.0994 493.083 11.9553 492.363 11.3074 492.003 cv
10.7314 491.643 9.93945 491.859 9.65137 492.435 cv
ef
12.8914 490.779 mo
12.3875 491.499 12.6753 492.507 13.4673 492.939 cv
14.2593 493.443 15.1953 493.155 15.6995 492.363 cv
16.1313 491.643 15.8435 490.635 15.1233 490.203 cv
14.3313 489.699 13.3235 489.987 12.8914 490.779 cv
ef
17.4993 488.115 mo
16.9233 489.195 17.2114 490.491 18.2913 491.067 cv
19.2993 491.715 20.5955 491.355 21.1714 490.347 cv
21.8193 489.267 21.4595 487.971 20.4514 487.395 cv
19.4434 486.747 18.0754 487.107 17.4993 488.115 cv
ef
105.555 416.403 mo
105.988 412.083 107.643 407.979 110.595 404.811 cv
117.291 397.755 125.139 400.275 133.635 401.499 cv
125.068 400.203 117.435 397.395 110.451 404.523 cv
107.139 407.907 105.411 412.299 104.979 416.907 cv
105.555 416.403 li
ef
132.988 402.147 mo
133.563 401.859 133.78 401.067 133.491 400.491 cv
133.132 399.843 132.411 399.627 131.763 399.987 cv
131.187 400.275 130.971 401.067 131.26 401.643 cv
131.619 402.291 132.34 402.507 132.988 402.147 cv
ef
129.315 401.931 mo
130.107 401.499 130.395 400.491 129.963 399.699 cv
129.531 398.907 128.523 398.619 127.731 399.051 cv
126.939 399.483 126.652 400.491 127.083 401.283 cv
127.515 402.075 128.523 402.363 129.315 401.931 cv
ef
123.988 401.715 mo
125.068 401.211 125.427 399.915 124.851 398.835 cv
124.275 397.827 122.979 397.395 121.971 397.971 cv
120.891 398.547 120.531 399.843 121.107 400.851 cv
121.683 401.931 122.979 402.291 123.988 401.715 cv
ef
252.147 457.515 mo
248.331 455.427 244.011 454.347 239.763 454.995 cv
230.115 456.291 227.74 464.211 223.78 471.915 cv
223.78 471.915 223.78 471.915 223.707 471.915 cv
227.667 464.139 229.827 456.291 239.619 454.707 cv
244.227 453.915 248.907 455.067 252.939 457.371 cv
252.147 457.515 li
ef
224.716 471.699 mo
224.068 471.987 223.347 471.771 222.988 471.123 cv
222.699 470.547 222.988 469.755 223.563 469.467 cv
224.211 469.179 224.931 469.395 225.219 470.043 cv
225.579 470.619 225.291 471.411 224.716 471.699 cv
ef
226.587 468.603 mo
225.795 468.963 224.86 468.603 224.427 467.811 cv
224.068 467.019 224.355 466.083 225.147 465.651 cv
225.939 465.291 226.948 465.579 227.307 466.371 cv
227.74 467.163 227.379 468.171 226.587 468.603 cv
ef
229.539 464.139 mo
228.459 464.643 227.163 464.211 226.659 463.203 cv
226.156 462.123 226.587 460.827 227.595 460.323 cv
228.676 459.747 229.971 460.179 230.475 461.259 cv
231.052 462.339 230.619 463.635 229.539 464.139 cv
ef
267.196 461.115 mo
267.196 462.339 266.187 463.347 264.963 463.347 cv
264.676 463.347 264.387 463.275 264.099 463.203 cv
255.099 458.883 246.028 454.563 237.028 450.243 cv
228.171 446.211 217.659 441.963 208.011 445.275 cv
196.851 449.091 194.475 463.347 201.891 471.699 cv
212.619 483.795 230.547 473.067 242.211 468.243 cv
248.547 465.579 255.315 463.707 261.795 466.083 cv
265.179 467.307 267.988 470.547 268.491 474.147 cv
268.851 477.243 267.34 480.699 264.82 482.499 cv
257.979 487.323 249.627 484.083 242.139 482.787 cv
237.82 482.067 232.78 481.635 228.891 484.299 cv
227.163 485.451 225.795 487.035 224.643 488.835 cv
224.068 490.059 223.419 491.211 222.844 492.435 cv
222.771 492.363 222.699 492.363 222.627 492.363 cv
223.707 490.059 224.572 487.611 226.156 485.667 cv
230.26 480.843 236.595 480.771 242.355 481.635 cv
249.267 482.643 257.475 485.739 263.74 481.203 cv
265.827 479.691 267.052 476.883 266.691 474.363 cv
266.043 469.827 260.86 466.875 256.539 467.091 cv
252.075 467.379 247.683 468.531 243.508 470.043 cv
230.835 475.587 211.035 487.611 199.444 473.211 cv
191.236 462.987 193.827 447.003 206.931 442.323 cv
217.444 438.651 228.747 442.827 238.395 447.147 cv
246.603 450.963 li
232.203 441.603 217.515 434.115 199.227 440.235 cv
173.163 449.019 154.083 477.099 121.251 457.227 cv
109.011 449.811 97.1316 437.355 83.0916 434.115 cv
72.4353 431.667 58.6116 433.899 52.3474 443.835 cv
45.3635 454.851 51.1956 472.635 63.7952 476.811 cv
73.0115 479.835 78.6995 473.859 85.6116 468.675 cv
85.6116 468.747 li
78.6995 473.931 73.2273 480.051 63.7234 477.099 cv
50.6194 473.067 44.6433 454.779 51.6272 443.403 cv
57.9631 433.107 72.1472 430.371 83.1633 432.963 cv
97.9236 436.491 109.948 447.075 121.971 455.787 cv
155.451 474.723 171.075 446.931 199.227 437.355 cv
223.995 428.859 242.716 444.843 262.803 457.371 cv
264.099 458.163 267.196 459.459 267.196 461.115 cv
ef
83.6672 433.107 mo
79.4192 432.315 75.3875 430.371 72.4353 427.203 cv
65.8835 420.075 69.0515 412.443 70.8513 404.019 cv
70.7795 404.019 li
68.9075 412.443 65.5955 419.931 72.2195 427.347 cv
75.3152 430.875 79.5632 432.963 84.1711 433.683 cv
83.6672 433.107 li
ef
71.4275 404.739 mo
71.1394 404.091 70.4192 403.803 69.7712 404.091 cv
69.1233 404.379 68.8352 405.171 69.1233 405.747 cv
69.4114 406.395 70.2034 406.683 70.7795 406.395 cv
71.4275 406.107 71.7156 405.387 71.4275 404.739 cv
ef
70.9236 408.339 mo
70.5632 407.547 69.5554 407.187 68.7634 407.547 cv
67.9714 407.907 67.6116 408.915 67.9714 409.707 cv
68.3313 410.499 69.2673 410.859 70.1316 410.499 cv
70.9236 410.139 71.2834 409.203 70.9236 408.339 cv
ef
70.3474 413.667 mo
69.9153 412.587 68.6194 412.083 67.5393 412.587 cv
66.4592 413.091 65.9553 414.315 66.4592 415.395 cv
66.9631 416.475 68.2595 416.979 69.3396 416.475 cv
70.4192 415.971 70.8513 414.747 70.3474 413.667 cv
ef
42.8435 430.947 mo
38.5955 431.811 34.6355 433.899 31.7554 437.139 cv
25.4194 444.411 28.7314 452.043 30.7473 460.395 cv
28.5874 451.971 25.1313 444.627 31.5393 436.995 cv
34.4915 433.395 38.7395 431.235 43.2751 430.371 cv
42.8435 430.947 li
ef
31.3235 459.603 mo
31.0354 460.251 30.3154 460.539 29.6675 460.323 cv
29.0913 460.035 28.7314 459.315 29.0193 458.667 cv
29.3074 458.019 30.0273 457.731 30.6753 458.019 cv
31.3235 458.235 31.6113 459.027 31.3235 459.603 cv
ef
30.7473 456.003 mo
30.3875 456.867 29.4514 457.227 28.5874 456.867 cv
27.7954 456.507 27.3633 455.571 27.7234 454.779 cv
28.0835 453.915 29.0193 453.555 29.8833 453.915 cv
30.6753 454.275 31.1074 455.211 30.7473 456.003 cv
ef
30.0273 450.747 mo
29.5955 451.827 28.2993 452.331 27.2195 451.899 cv
26.1394 451.467 25.6355 450.171 26.0674 449.091 cv
26.5713 448.011 27.7954 447.507 28.8755 447.939 cv
30.0273 448.371 30.5315 449.667 30.0273 450.747 cv
ef
327.963 427.923 mo
332.931 427.779 337.899 428.427 342.652 429.651 cv
335.019 427.203 327.028 426.195 319.107 427.419 cv
310.827 428.715 303.123 432.099 296.068 436.491 cv
303.267 432.531 310.971 429.363 319.179 428.283 cv
322.132 427.923 325.083 427.779 327.963 427.923 cv
cp
312.34 431.235 mo
314.572 430.299 316.948 429.579 319.323 429.003 cv
321.34 428.571 323.355 428.283 325.371 428.067 cv
323.355 428.067 321.267 428.283 319.251 428.571 cv
310.827 429.795 303.052 433.395 295.851 437.787 cv
291.676 440.451 287.643 443.331 283.755 446.427 cv
287.787 443.619 291.891 440.811 296.211 438.363 cv
301.323 435.411 306.652 432.819 312.34 431.235 cv
cp
297.867 439.155 mo
297.579 439.299 297.291 439.515 297.003 439.659 cv
287.716 445.131 279.291 451.899 270.939 458.667 cv
278.931 451.467 287.283 444.483 296.427 438.795 cv
300.82 436.059 305.499 433.683 310.323 432.027 cv
305.931 433.971 301.827 436.419 297.867 439.155 cv
f
421.78 474.291 mo
423.795 471.123 426.676 468.603 429.844 466.659 cv
433.3 464.499 437.187 463.059 441.147 462.195 cv
445.179 461.331 449.283 461.115 453.387 461.619 cv
457.132 462.123 460.803 463.347 463.971 465.435 cv
469.659 469.323 475.851 472.707 482.619 474.507 cv
487.3 475.731 492.267 476.163 497.092 475.011 cv
500.907 474.075 504.364 472.131 507.099 469.323 cv
509.619 466.659 511.347 463.419 512.355 459.891 cv
513.219 456.363 513.364 452.619 512.572 449.091 cv
511.78 445.419 510.052 442.035 507.603 439.227 cv
504.795 436.131 501.196 433.971 497.236 432.747 cv
491.979 431.091 486.435 431.091 481.107 431.739 cv
461.451 434.475 447.196 446.859 430.347 456.075 cv
422.643 460.179 414.291 462.843 405.435 462.267 cv
393.052 461.475 381.676 455.355 371.595 448.443 cv
362.667 442.395 353.307 436.707 343.011 433.251 cv
335.451 430.731 327.531 429.579 319.539 430.803 cv
314.499 431.595 309.676 433.179 305.068 435.339 cv
307.156 434.187 309.315 433.179 311.475 432.243 cv
314.139 431.379 316.803 430.731 319.468 430.299 cv
327.531 429.147 335.523 430.299 343.227 432.819 cv
353.451 436.347 362.884 442.035 371.811 448.083 cv
381.82 454.923 393.123 461.043 405.435 461.907 cv
414.291 462.411 422.499 459.819 430.203 455.715 cv
447.052 446.571 461.307 434.115 481.035 431.451 cv
486.435 430.731 492.052 430.803 497.307 432.459 cv
501.339 433.755 505.011 435.915 507.82 439.083 cv
510.339 441.891 511.995 445.347 512.86 449.019 cv
513.579 452.619 513.508 456.363 512.572 459.963 cv
511.635 463.491 509.835 466.803 507.243 469.467 cv
504.508 472.347 500.979 474.291 497.163 475.227 cv
492.339 476.379 487.3 475.947 482.547 474.723 cv
475.78 472.923 469.587 469.539 463.827 465.651 cv
460.731 463.491 457.059 462.339 453.315 461.835 cv
449.283 461.331 445.179 461.619 441.219 462.411 cv
437.26 463.275 433.371 464.787 429.915 466.875 cv
429.844 466.947 429.699 467.019 429.555 467.163 cv
426.531 468.963 423.795 471.339 421.78 474.291 cv
cp
321.196 429.363 mo
328.755 428.571 336.243 429.723 343.444 432.171 cv
353.74 435.699 363.243 441.459 372.171 447.579 cv
382.107 454.347 393.267 460.467 405.508 461.331 cv
414.219 461.907 422.355 459.315 429.915 455.283 cv
446.907 446.067 461.236 433.683 481.035 431.019 cv
486.508 430.371 492.123 430.443 497.451 432.099 cv
501.484 433.395 505.227 435.627 508.107 438.867 cv
510.627 441.747 512.355 445.203 513.147 448.947 cv
513.939 452.619 513.795 456.435 512.86 460.035 cv
511.924 463.635 510.052 467.019 507.459 469.683 cv
504.652 472.563 501.123 474.507 497.163 475.515 cv
492.339 476.667 487.227 476.235 482.475 474.939 cv
475.707 473.139 469.444 469.755 463.755 465.795 cv
460.659 463.707 456.988 462.483 453.315 461.979 cv
449.283 461.475 445.179 461.691 441.219 462.555 cv
438.196 463.203 435.243 464.211 432.435 465.579 cv
435.243 464.283 438.196 463.275 441.291 462.699 cv
445.179 461.907 449.283 461.763 453.243 462.339 cv
456.915 462.915 460.444 464.067 463.468 466.227 cv
469.227 470.259 475.491 473.715 482.26 475.659 cv
487.156 477.027 492.411 477.531 497.379 476.379 cv
501.484 475.443 505.227 473.355 508.179 470.403 cv
510.915 467.595 512.86 464.067 513.939 460.323 cv
514.948 456.507 515.092 452.547 514.3 448.731 cv
513.508 444.771 511.707 441.027 509.043 438.003 cv
506.092 434.619 502.131 432.171 497.884 430.803 cv
492.339 429.003 486.508 428.859 480.82 429.579 cv
460.803 432.171 446.26 444.483 429.052 453.627 cv
421.78 457.515 414.003 459.963 405.652 459.387 cv
393.844 458.451 382.971 452.475 373.395 445.851 cv
366.196 440.883 358.78 436.275 350.787 432.747 cv
348.555 431.955 346.251 431.235 343.948 430.659 cv
336.531 428.643 328.755 427.923 321.196 429.363 cv
f
447.915 419.931 mo
447.052 419.715 446.187 420.795 445.971 421.587 cv
445.179 424.539 448.132 426.915 450.795 427.275 cv
452.884 427.563 454.899 426.915 456.555 425.691 cv
463.323 420.363 460.227 409.347 452.451 407.115 cv
452.379 407.043 451.515 406.827 451.444 406.971 cv
451.444 407.043 451.731 407.259 451.803 407.259 cv
453.531 408.483 455.619 409.707 456.555 411.723 cv
456.915 412.515 455.835 411.363 455.763 411.219 cv
450.723 406.323 443.163 406.251 437.763 410.643 cv
434.811 413.019 433.083 416.115 432.219 419.571 cv
432.291 420.435 432.291 421.299 432.291 422.163 cv
431.572 431.739 426.171 439.299 418.468 444.843 cv
400.251 456.651 377.643 452.547 361.731 439.515 cv
362.307 438.651 li
377.355 450.675 398.667 454.779 416.092 444.123 cv
424.587 438.291 430.924 429.219 429.483 418.491 cv
428.547 413.523 425.811 408.699 420.699 407.259 cv
416.955 406.467 413.572 408.411 410.331 409.923 cv
411.196 409.059 412.132 408.267 413.068 407.475 cv
416.092 404.883 419.115 403.731 423.075 405.171 cv
427.899 407.115 430.563 411.435 431.716 416.187 cv
434.667 407.835 444.099 402.291 453.099 406.323 cv
458.572 408.987 461.884 414.747 460.227 420.795 cv
459.003 424.899 455.26 428.139 450.795 427.635 cv
447.915 427.203 444.747 424.611 445.683 421.371 cv
445.971 420.435 446.835 419.427 447.915 419.571 cv
448.491 419.643 449.283 420.219 449.355 420.795 cv
449.355 421.371 448.924 421.803 448.419 421.803 cv
447.844 421.803 447.411 421.371 447.411 420.867 cv
447.34 420.435 447.627 420.147 447.915 419.931 cv
ef
363.82 432.675 mo
364.107 430.731 367.059 429.795 368.931 430.011 cv
375.699 430.875 378.147 439.011 376.707 444.843 cv
375.483 449.451 372.459 453.123 368.355 455.571 cv
356.835 462.123 343.587 456.651 337.107 446.715 cv
336.603 446.571 336.099 446.499 335.667 446.355 cv
339.771 453.051 346.539 457.875 355.035 459.027 cv
356.691 459.171 358.347 459.099 359.931 458.955 cv
362.74 459.171 365.547 460.035 368.211 461.619 cv
374.907 466.083 378.003 474.507 374.331 481.995 cv
371.092 487.971 363.676 491.139 357.555 487.467 cv
353.811 485.019 351.508 479.619 354.82 475.803 cv
355.899 474.651 357.483 473.859 359.068 474.291 cv
360.435 474.723 361.3 476.091 360.939 477.531 cv
360.579 478.899 362.092 479.115 363.028 478.467 cv
365.115 476.883 363.963 473.787 362.163 472.491 cv
358.635 470.043 354.243 472.203 352.371 475.659 cv
349.419 481.707 353.667 488.115 359.716 489.771 cv
366.123 491.283 372.243 487.755 375.052 481.923 cv
378.652 473.715 374.835 464.859 367.132 460.683 cv
365.115 459.675 363.028 459.027 360.867 458.811 cv
368.427 457.587 375.196 452.907 377.283 445.131 cv
378.867 438.723 376.132 430.083 368.643 429.291 cv
366.483 429.075 363.676 429.939 363.028 432.315 cv
362.667 433.539 363.171 435.771 364.395 436.275 cv
365.475 436.779 366.771 436.275 367.275 435.195 cv
367.78 434.115 367.275 432.819 366.196 432.315 cv
365.404 431.955 364.468 432.099 363.82 432.675 cv
ef
407.092 459.531 mo
408.891 459.027 410.619 458.235 412.275 457.227 cv
419.763 452.259 423.291 442.827 419.115 434.547 cv
415.587 427.923 407.307 424.323 400.468 428.499 cv
396.291 431.163 393.771 437.211 397.444 441.459 cv
398.595 442.755 400.395 443.619 402.196 443.115 cv
403.707 442.611 404.643 441.099 404.283 439.587 cv
403.851 438.003 405.508 437.787 406.587 438.507 cv
408.963 440.235 407.595 443.691 405.652 445.131 cv
401.691 447.795 396.795 445.419 394.707 441.603 cv
391.468 434.907 396.219 427.779 402.915 425.907 cv
410.043 424.179 416.884 428.139 419.979 434.619 cv
423.939 443.763 419.691 453.627 411.123 458.235 cv
409.899 458.883 408.603 459.387 407.379 459.747 cv
407.092 459.531 li
ef
525.891 472.707 mo
525.099 472.707 524.523 471.555 524.523 470.835 cv
524.451 468.027 527.619 466.515 530.068 466.803 cv
532.011 467.019 533.667 468.027 534.891 469.539 cv
539.787 475.803 534.531 485.019 527.043 485.307 cv
526.971 485.307 526.179 485.307 526.179 485.163 cv
526.107 485.091 526.468 484.947 526.539 484.947 cv
528.339 484.299 530.499 483.651 531.795 482.067 cv
532.3 481.419 531.075 482.211 530.931 482.283 cv
525.315 485.595 518.619 483.939 514.659 478.827 cv
511.707 474.867 511.131 469.971 512.211 465.219 cv
512.283 464.859 512.355 464.499 512.427 464.211 cv
512.643 463.347 512.283 463.779 512.068 464.211 cv
511.707 464.859 511.419 465.507 511.131 466.227 cv
507.82 476.595 516.243 488.115 527.475 486.099 cv
532.948 484.947 537.196 480.555 537.123 474.723 cv
536.907 470.763 534.243 467.019 530.139 466.515 cv
527.475 466.227 524.092 467.883 524.236 470.979 cv
524.236 471.843 524.74 472.923 525.747 473.067 cv
526.323 473.139 527.187 472.851 527.331 472.275 cv
527.475 471.843 527.187 471.339 526.683 471.195 cv
526.251 471.051 525.747 471.339 525.603 471.771 cv
525.459 472.131 525.603 472.491 525.891 472.707 cv
ef
467.211 446.499 mo
467.643 444.843 465.555 443.115 464.043 442.683 cv
458.283 441.099 453.676 446.787 452.884 451.971 cv
452.307 456.075 453.531 459.963 455.979 463.275 cv
461.955 471.051 471.82 472.203 479.884 468.819 cv
482.043 467.883 483.627 466.659 485.499 465.363 cv
485.931 465.435 485.499 466.443 485.211 466.803 cv
479.667 470.835 472.683 472.419 465.483 470.475 cv
464.115 470.043 462.82 469.467 461.595 468.747 cv
459.291 468.027 456.699 467.811 454.107 468.171 cv
447.267 469.539 441.939 475.299 442.444 482.427 cv
443.019 488.331 447.915 493.371 454.035 492.435 cv
457.851 491.715 461.451 488.115 460.083 484.011 cv
459.652 482.715 458.572 481.563 457.132 481.347 cv
455.979 481.275 454.755 482.067 454.612 483.291 cv
454.468 484.587 453.171 484.227 452.667 483.363 cv
451.444 481.419 453.459 479.331 455.331 478.899 cv
458.931 478.107 461.74 481.275 462.099 484.659 cv
462.387 490.491 456.915 494.163 451.515 493.515 cv
445.827 492.651 442.156 487.755 441.867 482.211 cv
441.723 474.435 447.699 468.603 455.26 467.811 cv
457.203 467.667 459.075 467.883 460.875 468.387 cv
455.187 464.931 451.371 458.883 452.307 451.971 cv
453.099 446.355 458.211 440.307 464.475 442.179 cv
466.275 442.755 468.219 444.339 467.931 446.499 cv
467.787 447.579 466.707 449.163 465.555 449.235 cv
464.475 449.235 463.612 448.371 463.612 447.363 cv
463.539 446.283 464.404 445.419 465.411 445.419 cv
466.203 445.419 466.851 445.851 467.211 446.499 cv
ef
421.707 473.283 mo
421.059 473.283 420.483 473.859 420.483 474.507 cv
420.483 475.227 421.059 475.731 421.707 475.731 cv
422.427 475.731 423.003 475.227 423.003 474.507 cv
423.003 473.859 422.427 473.283 421.707 473.283 cv
ef
424.3 469.611 mo
423.364 469.611 422.643 470.331 422.643 471.195 cv
422.643 472.131 423.364 472.851 424.3 472.851 cv
425.163 472.851 425.884 472.131 425.884 471.195 cv
425.884 470.331 425.163 469.611 424.3 469.611 cv
ef
428.115 465.723 mo
426.963 465.723 425.955 466.731 425.955 467.883 cv
425.955 469.107 426.963 470.043 428.115 470.043 cv
429.34 470.043 430.275 469.107 430.275 467.883 cv
430.275 466.731 429.34 465.723 428.115 465.723 cv
ef
315.003 490.851 mo
315.508 491.283 315.579 492.075 315.075 492.651 cv
314.643 493.155 313.851 493.155 313.347 492.723 cv
312.844 492.291 312.771 491.499 313.276 490.995 cv
313.707 490.419 314.499 490.419 315.003 490.851 cv
ef
312.771 486.315 mo
313.419 486.891 313.491 487.971 312.915 488.619 cv
312.34 489.267 311.26 489.339 310.612 488.763 cv
309.963 488.115 309.891 487.107 310.468 486.459 cv
311.043 485.811 312.123 485.739 312.771 486.315 cv
ef
309.243 481.707 mo
310.179 482.427 310.251 483.795 309.459 484.731 cv
308.667 485.595 307.3 485.667 306.435 484.875 cv
305.499 484.083 305.427 482.715 306.219 481.851 cv
307.011 480.987 308.379 480.915 309.243 481.707 cv
ef
511.419 466.083 mo
509.547 469.971 508.827 474.363 509.763 478.611 cv
511.78 488.115 519.844 489.987 527.763 493.371 cv
519.699 490.059 511.707 488.403 509.475 478.755 cv
508.395 474.147 509.187 469.467 511.203 465.291 cv
511.419 466.083 li
ef
527.475 492.435 mo
527.835 493.011 527.619 493.803 527.043 494.163 cv
526.468 494.523 525.676 494.307 525.315 493.731 cv
524.955 493.083 525.171 492.363 525.747 492.003 cv
526.395 491.643 527.115 491.859 527.475 492.435 cv
ef
524.236 490.779 mo
524.667 491.499 524.451 492.507 523.659 492.939 cv
522.867 493.443 521.86 493.155 521.427 492.363 cv
520.995 491.643 521.211 490.635 522.003 490.203 cv
522.795 489.699 523.803 489.987 524.236 490.779 cv
ef
519.627 488.115 mo
520.203 489.195 519.844 490.491 518.835 491.067 cv
517.827 491.715 516.531 491.355 515.884 490.347 cv
515.307 489.267 515.667 487.971 516.676 487.395 cv
517.683 486.747 518.979 487.107 519.627 488.115 cv
ef
431.572 416.403 mo
431.068 412.083 429.483 407.979 426.459 404.811 cv
419.835 397.755 411.988 400.275 403.419 401.499 cv
412.059 400.203 419.691 397.395 426.676 404.523 cv
429.915 407.907 431.716 412.299 432.147 416.907 cv
431.572 416.403 li
ef
404.139 402.147 mo
403.563 401.859 403.347 401.067 403.635 400.491 cv
403.995 399.843 404.716 399.627 405.364 399.987 cv
405.939 400.275 406.156 401.067 405.867 401.643 cv
405.508 402.291 404.716 402.507 404.139 402.147 cv
ef
407.811 401.931 mo
407.019 401.499 406.731 400.491 407.163 399.699 cv
407.595 398.907 408.531 398.619 409.323 399.051 cv
410.115 399.483 410.404 400.491 409.971 401.283 cv
409.612 402.075 408.603 402.363 407.811 401.931 cv
ef
413.139 401.715 mo
412.059 401.211 411.699 399.915 412.275 398.835 cv
412.78 397.827 414.147 397.395 415.156 397.971 cv
416.163 398.547 416.595 399.843 416.019 400.851 cv
415.444 401.931 414.147 402.291 413.139 401.715 cv
ef
284.979 457.515 mo
288.795 455.427 293.043 454.347 297.364 454.995 cv
306.939 456.291 309.387 464.211 313.347 471.915 cv
309.459 464.139 307.3 456.291 297.508 454.707 cv
292.827 453.915 288.219 455.067 284.187 457.371 cv
284.979 457.515 li
ef
312.411 471.699 mo
313.059 471.987 313.78 471.771 314.068 471.123 cv
314.355 470.547 314.139 469.755 313.491 469.467 cv
312.915 469.179 312.123 469.395 311.835 470.043 cv
311.547 470.619 311.763 471.411 312.411 471.699 cv
ef
310.468 468.603 mo
311.331 468.963 312.267 468.603 312.699 467.811 cv
313.059 467.019 312.771 466.083 311.907 465.651 cv
311.115 465.291 310.179 465.579 309.747 466.371 cv
309.387 467.163 309.676 468.171 310.468 468.603 cv
ef
307.587 464.139 mo
308.667 464.643 309.891 464.211 310.468 463.203 cv
310.971 462.123 310.539 460.827 309.459 460.323 cv
308.451 459.747 307.156 460.179 306.579 461.259 cv
306.075 462.339 306.508 463.635 307.587 464.139 cv
ef
269.931 461.115 mo
269.931 462.339 270.939 463.347 272.163 463.347 cv
272.451 463.347 272.74 463.275 272.955 463.203 cv
282.028 458.883 291.099 454.563 300.099 450.243 cv
308.955 446.211 319.395 441.963 329.115 445.275 cv
340.276 449.091 342.652 463.347 335.236 471.699 cv
324.435 483.795 306.579 473.067 294.915 468.243 cv
288.508 465.579 281.811 463.707 275.331 466.083 cv
271.948 467.307 269.068 470.547 268.563 474.147 cv
268.203 477.243 269.716 480.699 272.307 482.499 cv
279.147 487.323 287.499 484.083 294.915 482.787 cv
299.307 482.067 304.347 481.635 308.236 484.299 cv
309.963 485.451 311.331 487.035 312.411 488.835 cv
313.059 490.059 313.635 491.211 314.283 492.435 cv
314.355 492.363 314.427 492.363 314.499 492.363 cv
313.419 490.059 312.555 487.611 310.899 485.667 cv
306.867 480.843 300.459 480.771 294.771 481.635 cv
287.86 482.643 279.652 485.739 273.315 481.203 cv
271.3 479.691 270.003 476.883 270.364 474.363 cv
271.011 469.827 276.267 466.875 280.587 467.091 cv
285.052 467.379 289.371 468.531 293.619 470.043 cv
306.291 475.587 326.092 487.611 337.683 473.211 cv
345.82 462.987 343.3 447.003 330.196 442.323 cv
319.683 438.651 308.379 442.827 298.731 447.147 cv
290.451 450.963 li
304.924 441.603 319.612 434.115 337.899 440.235 cv
363.963 449.019 383.043 477.099 415.803 457.227 cv
428.115 449.811 439.995 437.355 454.035 434.115 cv
464.691 431.667 478.515 433.899 484.78 443.835 cv
491.763 454.851 485.86 472.635 473.331 476.811 cv
464.115 479.835 458.427 473.859 451.515 468.675 cv
451.515 468.747 li
458.427 473.931 463.827 480.051 473.331 477.099 cv
486.435 473.067 492.484 454.779 485.427 443.403 cv
479.092 433.107 464.979 430.371 453.963 432.963 cv
439.132 436.491 427.179 447.075 415.156 455.787 cv
381.676 474.723 365.979 446.931 337.899 437.355 cv
313.132 428.859 294.34 444.843 274.251 457.371 cv
272.955 458.163 269.931 459.459 269.931 461.115 cv
ef
453.459 433.107 mo
457.707 432.315 461.667 430.371 464.619 427.203 cv
471.243 420.075 468.075 412.443 466.275 404.019 cv
468.219 412.443 471.531 419.931 464.907 427.347 cv
461.811 430.875 457.491 432.963 452.955 433.683 cv
453.459 433.107 li
ef
465.699 404.739 mo
465.988 404.091 466.707 403.803 467.355 404.091 cv
467.931 404.379 468.219 405.171 467.931 405.747 cv
467.643 406.395 466.924 406.683 466.275 406.395 cv
465.699 406.107 465.411 405.387 465.699 404.739 cv
ef
466.203 408.339 mo
466.563 407.547 467.499 407.187 468.364 407.547 cv
469.156 407.907 469.515 408.915 469.156 409.707 cv
468.795 410.499 467.787 410.859 466.995 410.499 cv
466.203 410.139 465.844 409.203 466.203 408.339 cv
ef
466.707 413.667 mo
467.211 412.587 468.508 412.083 469.587 412.587 cv
470.667 413.091 471.099 414.315 470.667 415.395 cv
470.163 416.475 468.867 416.979 467.787 416.475 cv
466.707 415.971 466.275 414.747 466.707 413.667 cv
ef
494.283 430.947 mo
498.531 431.811 502.491 433.899 505.3 437.139 cv
511.707 444.411 508.395 452.043 506.379 460.395 cv
508.539 451.971 511.995 444.627 505.587 436.995 cv
502.563 433.395 498.387 431.235 493.78 430.371 cv
494.283 430.947 li
ef
505.803 459.603 mo
506.019 460.251 506.811 460.539 507.387 460.323 cv
508.035 460.035 508.323 459.315 508.107 458.667 cv
507.82 458.019 507.099 457.731 506.451 458.019 cv
505.803 458.235 505.515 459.027 505.803 459.603 cv
ef
506.379 456.003 mo
506.74 456.867 507.676 457.227 508.539 456.867 cv
509.331 456.507 509.691 455.571 509.404 454.779 cv
509.043 453.915 508.035 453.555 507.243 453.915 cv
506.451 454.275 506.019 455.211 506.379 456.003 cv
ef
507.028 450.747 mo
507.531 451.827 508.755 452.331 509.907 451.899 cv
510.988 451.467 511.491 450.171 510.988 449.091 cv
510.555 448.011 509.331 447.507 508.179 447.939 cv
507.099 448.371 506.595 449.667 507.028 450.747 cv
ef
303.844 233.235 mo
306.003 238.347 304.78 244.755 299.451 247.275 cv
296.427 248.571 292.468 248.067 290.884 244.899 cv
290.019 243.099 290.451 241.515 291.676 240.075 cv
292.612 238.923 291.028 238.851 290.236 239.283 cv
287.572 240.579 287.643 244.251 288.939 246.483 cv
291.891 251.307 298.3 251.163 302.331 247.995 cv
307.659 243.531 307.875 236.043 304.132 230.499 cv
299.019 223.443 289.731 222.075 282.243 226.107 cv
275.979 229.779 272.523 236.115 272.236 242.883 cv
272.451 242.955 272.74 243.027 272.955 243.171 cv
273.028 240.939 273.531 238.635 274.468 236.331 cv
277.059 230.355 282.171 226.179 288.652 225.243 cv
294.988 224.595 301.035 227.403 303.844 233.235 cv
ef
270.579 242.739 mo
270.147 237.771 270.579 232.803 271.948 227.835 cv
274.827 218.619 280.875 208.971 290.955 206.811 cv
296.716 205.803 302.475 207.675 304.924 213.291 cv
304.924 213.291 304.851 213.291 304.78 213.219 cv
304.347 213.147 303.988 213.003 303.627 212.859 cv
294.915 210.051 284.763 213.291 278.427 219.699 cv
272.74 226.035 270.508 234.387 270.867 242.667 cv
270.795 242.667 270.652 242.667 270.579 242.739 cv
ef
317.523 237.699 mo
322.635 234.315 328.323 232.515 334.515 232.443 cv
341.427 232.587 349.275 234.891 352.731 241.443 cv
354.603 245.187 354.459 249.507 351.003 252.315 cv
351.003 252.315 351.003 252.315 351.003 252.243 cv
351.003 251.955 351.003 251.667 351.075 251.379 cv
351.291 244.755 347.043 238.419 341.355 235.323 cv
333.867 231.579 324.867 233.235 317.955 237.411 cv
317.811 237.483 312.34 241.083 317.523 237.699 cv
ef
311.907 241.803 mo
316.3 238.923 321.267 237.339 326.595 237.267 cv
332.572 237.411 339.34 239.355 342.364 245.043 cv
343.948 248.283 343.803 252.027 340.851 254.475 cv
340.851 254.475 340.851 254.475 340.851 254.403 cv
340.851 254.115 340.924 253.899 340.924 253.683 cv
341.068 247.923 337.395 242.451 332.499 239.715 cv
326.019 236.547 318.243 237.987 312.267 241.587 cv
312.196 241.659 307.444 244.755 311.907 241.803 cv
ef
308.884 243.891 mo
312.699 241.875 316.731 241.011 320.979 241.371 cv
325.803 241.947 331.059 244.035 333.075 248.787 cv
334.083 251.523 333.652 254.547 331.132 256.275 cv
331.132 256.203 li
331.132 255.987 331.132 255.771 331.203 255.627 cv
331.78 251.019 329.26 246.339 325.587 243.819 cv
320.619 240.723 314.283 241.299 309.243 243.747 cv
309.171 243.747 305.139 245.835 308.884 243.891 cv
ef
303.483 246.483 mo
303.483 246.411 li
305.211 244.755 307.083 242.955 309.171 241.227 cv
311.331 239.499 313.563 237.699 315.939 236.043 cv
328.179 227.259 343.875 219.627 358.563 217.827 cv
360.435 217.611 362.451 217.539 364.612 217.539 cv
371.307 217.539 379.011 218.763 385.203 221.859 cv
391.323 224.955 395.931 229.851 396.867 237.195 cv
396.939 238.059 397.011 238.923 397.011 239.859 cv
397.011 244.899 394.995 249.435 391.683 252.747 cv
388.371 256.059 383.763 258.147 378.723 258.147 cv
378.723 258.075 li
378.723 258.147 li
373.683 258.147 369.147 256.059 365.835 252.747 cv
362.523 249.435 360.508 244.899 360.508 239.859 cv
358.707 239.859 li
358.707 245.403 360.939 250.371 364.612 254.043 cv
368.211 257.643 373.251 259.875 378.723 259.875 cv
384.267 259.875 389.307 257.643 392.907 254.043 cv
396.508 250.371 398.74 245.403 398.74 239.859 cv
398.74 238.851 398.74 237.915 398.595 236.979 cv
397.659 228.915 392.619 223.587 385.995 220.275 cv
379.515 217.035 371.595 215.739 364.612 215.739 cv
362.379 215.739 360.291 215.883 358.347 216.099 cv
343.3 217.899 327.387 225.675 314.931 234.603 cv
312.483 236.331 310.179 238.131 308.092 239.859 cv
305.931 241.659 303.988 243.459 302.26 245.187 cv
302.187 245.187 li
303.483 246.483 li
f
396.364 232.515 mo
402.123 234.963 408.028 236.763 413.787 237.411 cv
415.3 237.627 416.955 237.699 418.683 237.699 cv
424.3 237.699 430.563 236.691 435.676 234.171 cv
440.716 231.651 444.531 227.547 445.251 221.499 cv
445.395 220.851 445.395 220.059 445.395 219.339 cv
445.395 215.163 443.74 211.419 441.003 208.683 cv
438.267 206.019 434.523 204.291 430.347 204.291 cv
426.243 204.291 422.499 206.019 419.763 208.683 cv
417.028 211.419 415.371 215.163 415.371 219.339 cv
413.931 219.339 li
413.931 214.803 415.731 210.627 418.755 207.675 cv
421.707 204.723 425.811 202.851 430.347 202.851 cv
434.955 202.851 439.059 204.723 442.011 207.675 cv
445.035 210.627 446.835 214.803 446.835 219.339 cv
446.835 220.131 446.835 220.923 446.691 221.715 cv
445.899 228.339 441.795 232.731 436.323 235.467 cv
430.995 238.131 424.444 239.139 418.683 239.139 cv
416.884 239.139 415.156 239.067 413.572 238.851 cv
407.74 238.203 402.123 236.475 396.291 233.955 cv
396.364 232.515 li
f
437.691 234.459 mo
441.652 232.731 445.755 231.507 449.716 231.003 cv
450.795 230.931 451.948 230.859 453.171 230.859 cv
457.059 230.859 461.451 231.507 464.979 233.307 cv
468.435 235.107 471.099 237.843 471.603 242.091 cv
471.676 242.595 471.747 243.099 471.747 243.603 cv
471.747 246.483 470.523 249.075 468.652 250.947 cv
466.78 252.891 464.187 254.043 461.307 254.043 cv
458.427 254.043 455.763 252.891 453.891 250.947 cv
452.019 249.075 450.867 246.483 450.867 243.603 cv
449.86 243.603 li
449.86 246.771 451.156 249.651 453.171 251.667 cv
455.26 253.755 458.139 255.051 461.307 255.051 cv
464.475 255.051 467.283 253.755 469.371 251.667 cv
471.459 249.651 472.683 246.771 472.683 243.603 cv
472.755 243.603 li
472.755 243.027 472.683 242.523 472.612 241.947 cv
472.035 237.339 469.156 234.315 465.411 232.443 cv
461.74 230.571 457.203 229.851 453.171 229.851 cv
451.948 229.851 450.723 229.923 449.643 229.995 cv
445.539 230.499 441.364 231.795 437.331 233.523 cv
437.691 234.459 li
f
520.347 243.675 mo
519.627 243.891 518.763 243.027 518.547 242.307 cv
517.683 239.643 520.203 237.411 522.579 236.907 cv
524.451 236.619 526.323 237.123 527.907 238.131 cv
534.243 242.595 531.939 252.747 525.028 255.123 cv
524.884 255.123 524.163 255.411 524.092 255.267 cv
524.092 255.195 524.379 254.979 524.379 254.979 cv
525.963 253.827 527.691 252.603 528.484 250.803 cv
528.771 250.011 527.907 251.091 527.763 251.235 cv
523.444 255.843 516.676 256.203 511.563 252.531 cv
508.827 250.587 507.099 247.851 506.236 244.755 cv
506.236 243.963 506.236 243.171 506.163 242.379 cv
505.083 233.739 499.899 227.187 492.699 222.507 cv
475.707 212.715 455.547 217.395 441.795 229.851 cv
442.3 230.643 li
455.404 219.123 474.411 214.515 490.539 223.299 cv
498.531 228.195 504.652 236.115 503.787 245.835 cv
503.211 250.371 500.907 254.763 496.371 256.347 cv
493.059 257.211 489.891 255.627 486.939 254.403 cv
487.731 255.123 488.523 255.843 489.459 256.491 cv
492.339 258.651 495.075 259.587 498.603 258.147 cv
502.851 256.131 505.083 252.171 505.875 247.779 cv
508.971 255.195 517.683 259.803 525.603 255.771 cv
530.427 253.107 533.163 247.779 531.435 242.451 cv
530.068 238.779 526.612 235.971 522.579 236.691 cv
519.988 237.195 517.323 239.643 518.26 242.523 cv
518.619 243.315 519.411 244.179 520.347 244.035 cv
520.851 243.963 521.572 243.387 521.572 242.883 cv
521.572 242.379 521.139 242.019 520.707 242.019 cv
520.203 242.019 519.844 242.451 519.844 242.883 cv
519.844 243.243 520.059 243.531 520.347 243.675 cv
ef
415.875 221.715 mo
415.731 221.427 423.147 220.491 425.667 224.307 cv
427.395 226.899 429.411 227.259 430.995 226.683 cv
432.508 226.107 433.444 225.171 433.444 225.171 cv
433.444 225.171 431.787 228.843 427.683 228.987 cv
424.227 229.059 417.243 225.171 415.875 221.715 cv
ef
415.515 222.075 mo
415.515 222.075 415.948 222.939 416.955 224.091 cv
420.627 228.195 427.251 231.939 432.147 227.691 cv
432.867 227.043 433.371 226.611 433.371 226.611 cv
433.371 226.611 430.707 231.075 427.827 231.795 cv
424.948 232.515 424.515 232.227 424.515 232.227 cv
424.515 232.227 426.315 233.667 424.587 234.315 cv
419.979 236.187 416.019 228.483 415.587 223.299 cv
415.515 222.075 li
ef
414.939 219.555 mo
414.364 219.555 413.931 220.059 413.931 220.635 cv
413.931 221.139 414.364 221.643 414.939 221.643 cv
415.444 221.643 415.948 221.139 415.948 220.635 cv
415.948 220.059 415.444 219.555 414.939 219.555 cv
ef
359.787 236.763 mo
358.995 236.763 358.419 237.411 358.419 238.131 cv
358.419 238.851 358.995 239.499 359.787 239.499 cv
360.508 239.499 361.156 238.851 361.156 238.131 cv
361.156 237.411 360.508 236.763 359.787 236.763 cv
ef
360.364 236.403 mo
360.219 236.691 367.635 237.555 370.156 233.739 cv
371.884 231.147 373.899 230.859 375.411 231.363 cv
376.995 231.939 377.931 232.947 377.931 232.947 cv
377.931 232.947 376.275 229.203 372.171 229.131 cv
368.716 229.059 361.731 232.947 360.364 236.403 cv
ef
360.003 235.971 mo
360.003 235.971 360.435 235.107 361.444 233.955 cv
365.043 229.923 371.74 226.179 376.635 230.355 cv
377.355 231.075 377.86 231.507 377.86 231.507 cv
377.86 231.507 375.196 227.043 372.315 226.251 cv
369.435 225.531 369.003 225.819 369.003 225.819 cv
369.003 225.819 370.803 224.451 369.075 223.731 cv
364.468 221.931 360.508 229.563 360.075 234.819 cv
360.003 235.971 li
ef
450.508 240.939 mo
449.86 240.939 449.283 241.515 449.283 242.163 cv
449.283 242.811 449.86 243.315 450.508 243.315 cv
451.156 243.315 451.659 242.811 451.659 242.163 cv
451.659 241.515 451.156 240.939 450.508 240.939 cv
ef
450.652 240.651 mo
450.579 240.795 455.691 241.443 457.491 238.779 cv
458.643 237.051 460.083 236.763 461.092 237.195 cv
462.171 237.555 462.82 238.275 462.82 238.275 cv
462.82 238.275 461.667 235.683 458.86 235.611 cv
456.483 235.539 451.587 238.275 450.652 240.651 cv
ef
450.435 240.363 mo
450.435 240.363 450.723 239.787 451.444 238.923 cv
453.963 236.115 458.572 233.523 461.955 236.475 cv
462.459 236.907 462.82 237.267 462.82 237.267 cv
462.82 237.267 460.948 234.171 459.003 233.595 cv
456.988 233.091 456.627 233.307 456.627 233.307 cv
456.627 233.307 457.851 232.371 456.699 231.867 cv
453.531 230.571 450.795 235.899 450.508 239.499 cv
450.435 240.363 li
ef
447.988 223.659 mo
449.068 222.219 450.508 219.771 450.364 217.251 cv
450.075 213.363 451.371 210.483 452.74 208.035 cv
454.107 205.587 453.387 203.283 452.379 201.987 cv
451.3 200.691 450.435 200.187 450.435 200.187 cv
450.435 200.187 454.683 201.699 456.196 206.595 cv
458.211 213.219 453.963 220.347 448.491 223.947 cv
448.347 223.875 448.132 223.731 447.988 223.659 cv
ef
399.82 236.907 mo
400.899 238.347 402.34 240.723 402.196 243.243 cv
401.907 247.203 403.203 250.011 404.572 252.531 cv
405.939 254.979 405.219 257.283 404.211 258.579 cv
403.132 259.875 402.267 260.379 402.267 260.379 cv
402.267 260.379 406.515 258.795 408.028 253.971 cv
410.043 247.347 405.795 240.219 400.395 236.619 cv
400.179 236.691 400.035 236.835 399.82 236.907 cv
ef
495.723 230.427 mo
496.444 232.011 497.379 234.747 496.731 237.123 cv
495.652 240.939 496.3 243.963 497.092 246.699 cv
497.955 249.363 496.803 251.523 495.508 252.531 cv
494.139 253.611 493.276 253.899 493.276 253.899 cv
493.276 253.899 497.74 253.251 500.187 248.787 cv
503.572 242.739 500.907 234.891 496.3 230.211 cv
496.156 230.283 495.939 230.355 495.723 230.427 cv
ef
380.955 221.643 mo
382.323 222.795 384.267 224.811 384.699 227.259 cv
385.347 231.147 387.291 233.667 389.163 235.683 cv
391.035 237.771 390.963 240.219 390.171 241.731 cv
389.451 243.243 388.731 243.891 388.731 243.891 cv
388.731 243.891 392.547 241.371 392.835 236.331 cv
393.267 229.419 387.508 223.515 381.387 221.211 cv
381.243 221.355 381.099 221.499 380.955 221.643 cv
ef
152.068 124.587 mo
140.331 123.147 122.187 126.891 122.187 141.651 cv
122.187 149.427 128.595 155.835 136.371 155.835 cv
144.147 155.835 150.555 149.427 150.555 141.651 cv
151.924 141.651 li
151.924 150.219 144.939 157.275 136.371 157.275 cv
136.371 157.203 li
132.052 157.203 128.163 155.475 125.355 152.667 cv
122.475 149.787 120.82 145.755 120.82 141.651 cv
120.82 125.883 139.683 121.707 152.211 123.219 cv
175.035 125.955 178.924 154.467 200.884 157.635 cv
204.555 158.139 208.444 157.923 212.115 157.131 cv
220.179 155.331 228.531 150.507 233.86 141.435 cv
234.219 141.651 234.652 141.867 235.083 142.083 cv
229.612 151.515 220.827 156.627 212.404 158.427 cv
208.587 159.291 204.555 159.579 200.667 159.003 cv
178.419 155.763 174.747 127.251 152.068 124.587 cv
f
150.411 143.307 mo
150.844 139.995 151.059 136.755 150.844 133.587 cv
150.771 132.075 150.627 130.563 150.34 128.907 cv
149.404 123.723 147.387 118.035 144.147 113.715 cv
140.979 109.467 136.659 106.515 130.827 106.875 cv
130.179 106.875 129.531 106.947 128.811 107.091 cv
124.924 107.739 121.756 109.971 119.667 112.923 cv
117.579 115.875 116.572 119.691 117.291 123.507 cv
117.939 127.395 120.171 130.635 123.123 132.723 cv
126.075 134.811 130.179 135.675 134.068 135.027 cv
133.707 135.027 li
133.995 136.395 li
129.747 137.187 125.572 136.107 122.331 133.803 cv
119.092 131.571 116.716 128.043 115.924 123.795 cv
115.203 119.547 116.211 115.371 118.515 112.131 cv
120.82 108.891 124.347 106.443 128.595 105.723 cv
129.315 105.579 130.035 105.507 130.756 105.507 cv
137.092 105.147 141.844 108.243 145.3 112.851 cv
148.683 117.387 150.699 123.291 151.635 128.691 cv
151.924 130.347 152.139 132.003 152.211 133.515 cv
152.355 136.611 152.283 139.851 151.851 143.091 cv
150.411 143.307 li
f
120.028 152.235 mo
129.387 141.579 135.508 126.531 152.211 127.827 cv
174.459 129.555 178.924 159.795 200.595 162.963 cv
215.643 165.123 229.899 156.051 235.731 142.371 cv
236.163 142.587 236.595 142.803 236.955 142.947 cv
230.835 157.131 216.003 166.563 200.451 164.259 cv
178.347 161.091 173.955 130.923 152.068 129.195 cv
136.444 127.971 130.179 142.299 121.107 152.811 cv
106.78 169.443 94.0354 163.611 80.4993 150.507 cv
76.4675 146.619 71.4993 142.875 65.5955 142.803 cv
57.1711 142.659 49.8274 150.147 43.1316 154.467 cv
39.0994 157.059 36.1475 158.211 31.5393 159.075 cv
30.5315 159.219 29.8113 159.363 29.8113 159.363 cv
30.5315 159.147 31.1794 159.003 31.8274 158.859 cv
36.2913 157.995 38.9553 156.699 42.8435 154.107 cv
50.0432 149.355 57.0994 141.867 65.5232 141.579 cv
71.8596 141.363 77.1155 145.395 81.4353 149.571 cv
94.1794 161.883 106.132 167.859 120.028 152.235 cv
f
119.955 162.531 mo
121.395 164.259 123.123 165.627 125.068 166.779 cv
125.283 166.851 125.427 166.995 125.643 167.067 cv
125.427 166.995 125.211 166.923 124.995 166.851 cv
122.763 165.915 120.603 164.547 118.803 162.819 cv
117.075 161.163 115.635 159.147 114.699 156.915 cv
113.691 154.539 113.187 152.019 113.187 149.427 cv
113.187 148.851 113.187 148.275 113.26 147.699 cv
113.26 148.275 113.331 148.851 113.404 149.427 cv
113.619 151.947 114.196 154.323 115.275 156.627 cv
116.355 158.715 117.723 160.587 119.451 162.171 cv
119.595 162.315 119.74 162.387 119.955 162.531 cv
cp
116.211 155.259 mo
116.283 155.547 116.355 155.835 116.427 156.123 cv
117.003 158.067 117.867 159.867 119.092 161.523 cv
117.652 160.083 116.499 158.355 115.635 156.483 cv
114.699 154.251 114.196 151.803 114.196 149.427 cv
114.123 146.259 114.771 143.163 115.924 140.283 cv
115.132 143.235 114.699 146.331 114.915 149.355 cv
115.059 151.371 115.491 153.387 116.211 155.259 cv
cp
116.211 147.915 mo
116.355 142.587 118.371 137.547 120.891 132.939 cv
117.579 137.763 115.132 143.451 115.275 149.355 cv
115.275 151.011 115.563 152.667 115.995 154.251 cv
115.78 152.595 115.78 150.939 115.924 149.355 cv
116.068 148.851 116.139 148.419 116.211 147.915 cv
f
265.612 156.411 mo
255.243 151.011 244.731 145.899 234.291 140.787 cv
227.019 137.259 219.028 135.603 210.963 135.963 cv
203.26 136.323 195.844 138.411 188.716 141.291 cv
175.035 146.835 162.939 155.403 149.691 161.883 cv
144.508 164.475 138.747 165.987 132.988 165.555 cv
130.683 165.339 128.379 164.835 126.219 163.971 cv
124.275 163.107 122.475 161.955 120.963 160.515 cv
119.523 159.147 118.371 157.419 117.579 155.619 cv
117.003 154.179 116.572 152.739 116.427 151.227 cv
116.427 152.307 116.499 153.459 116.716 154.539 cv
116.86 154.971 117.003 155.403 117.147 155.763 cv
118.011 157.707 119.163 159.435 120.676 160.875 cv
122.26 162.315 124.059 163.539 126.075 164.331 cv
128.236 165.267 130.539 165.771 132.915 165.987 cv
138.82 166.419 144.652 164.835 149.907 162.243 cv
163.083 155.763 175.179 147.195 188.86 141.579 cv
195.915 138.699 203.331 136.611 210.963 136.179 cv
219.028 135.819 226.948 137.475 234.147 141.003 cv
243.003 145.251 251.787 149.643 260.499 154.107 cv
262.227 154.827 263.884 155.619 265.612 156.411 cv
cp
118.371 159.219 mo
118.948 160.011 119.523 160.731 120.243 161.379 cv
121.827 162.891 123.771 164.115 125.787 164.979 cv
128.092 165.915 130.468 166.419 132.915 166.563 cv
138.891 166.995 144.795 165.411 150.123 162.747 cv
163.3 156.195 175.323 147.555 189.003 141.939 cv
195.988 139.059 203.404 136.899 211.035 136.539 cv
219.028 136.107 226.875 137.691 234.075 141.147 cv
242.427 145.179 250.707 149.211 258.988 153.387 cv
233.787 141.795 li
226.659 138.555 218.884 137.115 211.107 137.619 cv
203.619 138.195 196.419 140.355 189.579 143.235 cv
176.043 149.067 164.092 157.779 150.988 164.403 cv
145.371 167.283 139.107 169.011 132.771 168.579 cv
131.979 168.507 131.115 168.435 130.323 168.291 cv
128.595 167.787 126.867 167.067 125.283 166.203 cv
123.267 164.979 121.395 163.467 119.955 161.667 cv
119.379 160.875 118.803 160.083 118.371 159.219 cv
f
194.115 99.2429 mo
194.26 99.675 193.683 100.251 193.251 100.395 cv
191.595 100.899 190.156 99.3149 189.795 97.803 cv
189.579 96.6511 189.939 95.499 190.587 94.491 cv
193.395 90.459 199.731 91.8989 201.243 96.219 cv
201.315 96.291 201.459 96.7949 201.387 96.7949 cv
201.315 96.8669 201.171 96.6511 201.171 96.6511 cv
200.451 95.6431 199.659 94.563 198.508 94.0588 cv
198.003 93.843 198.723 94.4189 198.795 94.491 cv
201.747 97.2271 202.035 101.475 199.731 104.715 cv
198.435 106.443 196.78 107.523 194.835 108.099 cv
194.331 108.099 193.827 108.099 193.323 108.171 cv
187.924 108.891 183.747 112.203 180.867 116.739 cv
173.74 129.123 178.924 144.171 189.723 152.523 cv
192.531 154.611 195.988 156.627 199.444 157.131 cv
183.747 152.379 173.163 133.227 181.371 118.107 cv
184.395 113.067 189.364 109.179 195.483 109.611 cv
198.364 110.043 201.171 111.411 202.107 114.291 cv
202.756 116.379 201.747 118.323 200.955 120.267 cv
201.387 119.763 201.82 119.187 202.251 118.683 cv
203.619 116.811 204.196 115.083 203.26 112.851 cv
202.035 110.187 199.515 108.819 196.707 108.315 cv
201.387 106.371 204.267 100.827 201.676 95.8591 cv
200.019 92.835 196.635 91.1069 193.251 92.259 cv
190.948 93.123 189.219 95.283 189.652 97.803 cv
190.011 99.459 191.523 101.187 193.323 100.539 cv
193.899 100.323 194.404 99.8191 194.331 99.2429 cv
194.26 98.8831 193.899 98.4509 193.539 98.4509 cv
193.251 98.4509 193.035 98.739 193.035 99.0271 cv
193.035 99.3149 193.323 99.531 193.612 99.531 cv
193.827 99.531 194.043 99.387 194.115 99.2429 cv
ef
199.875 115.227 mo
199.587 117.099 196.491 117.675 194.907 115.731 cv
193.395 113.787 189.364 112.923 187.059 114.003 cv
184.827 115.155 182.667 118.035 182.667 118.035 cv
182.667 118.035 185.475 115.659 187.132 115.587 cv
188.716 115.515 190.587 116.019 190.587 118.035 cv
190.659 120.051 187.995 120.267 185.979 119.979 cv
184.035 119.691 181.731 121.851 181.011 124.083 cv
180.291 126.243 180.652 126.963 180.652 126.963 cv
180.652 126.963 181.587 123.579 183.315 122.643 cv
187.347 120.267 190.371 125.019 184.251 126.387 cv
182.523 126.747 181.156 131.067 181.3 133.083 cv
181.444 135.171 181.731 135.747 181.731 135.747 cv
181.731 135.747 181.731 131.715 182.451 130.347 cv
183.243 128.979 185.404 128.907 185.907 131.067 cv
186.844 134.739 182.307 136.971 183.891 141.867 cv
184.323 143.235 186.34 148.203 186.34 148.203 cv
186.34 148.203 183.82 145.251 182.092 142.083 cv
178.419 134.739 177.771 126.099 181.875 118.467 cv
184.035 114.939 187.059 111.987 190.803 110.691 cv
193.683 109.899 200.523 111.051 199.875 115.227 cv
ef
76.1794 146.763 mo
75.1711 145.899 74.0193 145.179 72.7234 144.603 cv
66.7473 142.227 59.7634 143.955 56.5955 149.787 cv
54.0754 154.611 55.2996 160.947 60.5554 163.251 cv
63.7952 164.691 68.4036 163.683 69.4114 159.795 cv
69.6995 158.571 69.4832 157.131 68.4753 156.339 cv
67.6116 155.619 66.3152 155.691 65.5232 156.555 cv
64.8035 157.419 64.0115 156.483 64.0115 155.619 cv
64.0833 153.459 66.6033 152.883 68.2595 153.459 cv
71.4993 154.683 72.0754 158.571 70.6355 161.307 cv
67.9714 165.987 61.8513 166.059 58.0354 162.891 cv
54.1472 159.363 53.7156 153.747 56.2356 149.283 cv
60.0515 143.163 67.6116 141.723 73.8035 144.891 cv
74.6672 145.395 75.4592 145.899 76.1794 146.547 cv
76.1794 146.763 li
ef
43.9954 153.459 mo
43.1316 154.251 42.1233 154.827 40.9714 155.403 cv
35.6433 157.491 29.4514 155.907 26.6433 150.795 cv
24.4114 146.547 25.5635 140.931 30.1714 138.843 cv
33.0513 137.619 37.1553 138.483 38.0193 141.867 cv
38.3074 143.019 38.0913 144.243 37.2273 144.963 cv
36.4353 145.611 35.2834 145.539 34.5635 144.819 cv
33.9153 144.027 33.1953 144.819 33.1953 145.611 cv
33.2673 147.483 35.5713 148.059 37.0115 147.555 cv
39.8193 146.403 40.3953 143.019 39.0994 140.571 cv
36.7234 136.395 31.3235 136.323 27.9395 139.203 cv
24.4834 142.299 24.0513 147.267 26.3555 151.227 cv
29.6675 156.627 36.4353 157.923 41.9075 155.115 cv
42.6995 154.683 43.4192 154.251 44.0676 153.675 cv
43.9954 153.459 li
ef
265.755 156.555 mo
265.755 156.555 259.707 153.891 255.171 155.979 cv
250.707 157.995 246.82 157.779 243.291 157.347 cv
239.763 156.843 237.315 158.715 236.307 160.515 cv
235.227 162.315 235.083 163.539 235.083 163.539 cv
235.083 163.539 234.939 157.851 239.979 153.963 cv
247.539 147.987 259.203 150.723 265.755 156.555 cv
ef
265.468 157.131 mo
265.468 157.131 260.427 157.347 258.052 160.227 cv
255.603 163.179 252.867 164.331 250.276 165.123 cv
247.755 165.987 246.676 168.075 246.603 169.659 cv
246.459 171.243 246.747 172.107 246.747 172.107 cv
246.747 172.107 244.803 168.291 246.963 163.899 cv
250.203 157.347 259.059 155.331 265.468 157.131 cv
ef
258.123 151.443 mo
258.123 151.443 254.811 149.355 254.307 146.403 cv
253.803 143.451 252.364 141.579 250.924 140.067 cv
249.483 138.483 249.627 136.611 250.132 135.459 cv
250.707 134.307 251.211 133.875 251.211 133.875 cv
251.211 133.875 248.404 135.747 248.115 139.563 cv
247.755 145.323 253.011 150.147 258.123 151.443 cv
ef
39.7473 155.835 mo
39.3154 156.051 38.9553 156.123 38.5234 156.339 cv
34.0593 158.571 29.0913 159.579 24.1233 158.859 cv
12.0273 157.131 9.00342 147.123 4.10742 137.475 cv
4.0354 137.475 li
8.9314 147.267 11.5955 157.203 23.9795 159.219 cv
29.8113 160.155 35.6433 158.787 40.7554 155.907 cv
39.7473 155.835 li
ef
5.25928 137.763 mo
4.46729 137.331 3.53149 137.691 3.17139 138.411 cv
2.7395 139.203 3.09937 140.139 3.89136 140.571 cv
4.61133 140.931 5.54736 140.643 5.97949 139.851 cv
6.33936 139.059 6.05127 138.123 5.25928 137.763 cv
ef
7.6355 141.651 mo
6.62744 141.147 5.40332 141.579 4.89941 142.587 cv
4.39526 143.595 4.82739 144.819 5.83545 145.323 cv
6.84351 145.827 8.06738 145.395 8.57129 144.387 cv
9.07544 143.379 8.64331 142.155 7.6355 141.651 cv
ef
11.3074 147.267 mo
10.0115 146.619 8.35547 147.123 7.70728 148.491 cv
7.05933 149.787 7.56348 151.443 8.9314 152.091 cv
10.2273 152.811 11.8833 152.235 12.5315 150.867 cv
13.1794 149.571 12.6753 147.915 11.3074 147.267 cv
ef
82.7312 116.595 mo
83.0193 116.883 82.8035 117.531 82.5154 117.819 cv
81.4353 118.827 79.7073 118.107 78.9153 117.099 cv
78.3396 116.235 78.1233 115.227 78.2673 114.219 cv
78.9875 110.115 84.4592 108.819 87.1956 111.627 cv
87.2673 111.699 87.5554 111.987 87.4832 112.059 cv
87.2673 111.987 li
86.3313 111.483 85.3235 110.907 84.2434 110.979 cv
83.8113 110.979 84.6033 111.195 84.6755 111.195 cv
87.9153 112.203 89.7156 115.443 89.1394 118.755 cv
88.7795 120.555 87.8435 121.995 86.6194 123.219 cv
86.1873 123.363 85.8274 123.579 85.4675 123.795 cv
81.5076 126.315 79.5632 130.419 78.9875 134.955 cv
78.1233 147.195 87.6272 156.915 99.0754 159.435 cv
102.028 159.939 105.411 160.299 108.291 159.363 cv
94.3953 161.451 79.1316 150.579 79.8513 135.891 cv
80.3552 130.851 82.7312 126.027 87.6995 124.083 cv
90.0032 123.363 92.7395 123.435 94.5393 125.235 cv
95.7634 126.675 95.6912 128.547 95.8352 130.275 cv
95.9792 129.771 96.1233 129.195 96.2673 128.619 cv
96.6272 126.675 96.4114 125.163 94.8992 123.723 cv
92.9553 122.139 90.4353 121.995 88.1316 122.643 cv
91.0115 119.403 91.2273 114.075 87.4114 111.195 cv
84.9631 109.467 81.7234 109.395 79.5632 111.483 cv
78.0515 112.995 77.5476 115.371 78.8435 117.171 cv
79.7073 118.251 81.5076 119.043 82.6594 117.891 cv
83.0193 117.531 83.2356 116.955 82.9475 116.523 cv
82.7312 116.235 82.2996 116.019 82.0833 116.163 cv
81.8674 116.307 81.7234 116.595 81.8674 116.811 cv
82.0115 117.027 82.2273 117.171 82.5154 117.027 cv
82.6594 116.955 82.7312 116.739 82.7312 116.595 cv
ef
93.1711 126.819 mo
93.6033 128.403 91.3713 129.987 89.4993 129.051 cv
87.5554 128.115 84.1711 128.907 82.8035 130.635 cv
81.4353 132.291 80.8596 135.315 80.8596 135.315 cv
80.8596 135.315 82.1555 132.507 83.3792 131.859 cv
84.6755 131.139 86.2595 130.851 86.9792 132.435 cv
87.7712 133.947 85.8274 135.099 84.1711 135.603 cv
82.5154 136.107 81.5793 138.627 81.7952 140.571 cv
82.0833 142.587 82.5872 142.947 82.5872 142.947 cv
82.5872 142.947 82.0833 140.067 83.0193 138.627 cv
85.3235 135.387 89.4275 137.907 85.1794 141.219 cv
83.9553 142.155 84.5315 145.971 85.3953 147.483 cv
86.2595 148.995 86.6912 149.427 86.6912 149.427 cv
86.6912 149.427 85.1794 146.259 85.2512 144.963 cv
85.3235 143.595 86.9792 142.731 88.2034 144.243 cv
90.2913 146.763 87.6272 150.147 90.6516 153.315 cv
91.4436 154.251 94.8274 157.275 94.8274 157.275 cv
94.8274 157.275 91.8035 155.907 89.2834 154.107 cv
83.7395 149.859 80.0676 143.379 80.4275 135.963 cv
80.7874 132.435 82.0115 129.051 84.4592 126.675 cv
86.4036 125.019 92.0916 123.363 93.1711 126.819 cv
ef
185.907 156.771 mo
184.899 155.907 183.747 155.187 182.451 154.611 cv
176.475 152.163 169.491 153.963 166.323 159.723 cv
163.803 164.547 165.028 170.883 170.283 173.259 cv
173.595 174.627 178.132 173.691 179.139 169.803 cv
179.427 168.579 179.211 167.139 178.203 166.275 cv
177.34 165.627 176.043 165.627 175.251 166.491 cv
174.531 167.427 173.74 166.491 173.74 165.627 cv
173.811 163.467 176.404 162.891 178.059 163.467 cv
181.227 164.691 181.803 168.579 180.364 171.315 cv
177.699 175.995 171.579 176.067 167.763 172.827 cv
163.875 169.299 163.444 163.755 165.963 159.219 cv
169.78 153.171 177.34 151.731 183.531 154.899 cv
184.395 155.331 185.187 155.907 185.979 156.483 cv
185.907 156.771 li
ef
148.323 121.347 mo
147.963 119.979 147.315 118.611 146.523 117.315 cv
142.707 111.411 135.435 108.747 128.955 111.915 cv
123.771 114.651 120.963 121.059 124.132 126.387 cv
126.219 129.699 130.971 131.643 134.211 128.835 cv
135.219 127.899 135.939 126.531 135.579 125.091 cv
135.219 123.939 133.995 123.219 132.771 123.507 cv
131.548 123.867 131.404 122.499 131.979 121.707 cv
133.347 119.835 136.011 120.915 137.163 122.427 cv
139.179 125.523 137.379 129.339 134.355 130.923 cv
129.099 133.443 123.555 129.771 122.187 124.515 cv
120.82 118.971 123.915 113.643 128.955 111.267 cv
136.083 108.171 143.787 111.555 147.387 118.179 cv
147.82 119.187 148.251 120.123 148.468 121.131 cv
148.323 121.347 li
ef
125.427 151.515 mo
126.291 152.523 127.3 153.459 128.451 154.251 cv
133.851 157.635 140.979 157.203 145.156 152.091 cv
148.468 147.843 148.395 141.435 143.716 138.195 cv
140.691 136.179 136.011 136.323 134.355 139.923 cv
133.851 141.075 133.78 142.515 134.643 143.523 cv
135.435 144.387 136.659 144.531 137.595 143.883 cv
138.459 143.091 139.107 144.171 138.963 145.035 cv
138.459 147.123 135.867 147.195 134.355 146.331 cv
131.475 144.603 131.548 140.715 133.491 138.267 cv
136.875 134.163 142.924 135.171 146.019 138.987 cv
149.26 143.163 148.683 148.707 145.371 152.667 cv
140.548 157.923 132.915 157.995 127.371 153.747 cv
126.652 153.171 125.931 152.451 125.355 151.731 cv
125.427 151.515 li
ef
227.884 154.323 mo
227.092 155.331 226.083 156.267 225.003 157.131 cv
219.676 160.731 212.475 160.443 208.083 155.475 cv
204.627 151.299 204.555 144.891 209.163 141.435 cv
212.043 139.419 216.795 139.419 218.523 142.947 cv
219.099 144.099 219.171 145.539 218.379 146.547 cv
217.659 147.483 216.364 147.699 215.427 146.979 cv
214.563 146.259 213.915 147.339 214.132 148.203 cv
214.635 150.291 217.3 150.291 218.811 149.427 cv
221.619 147.555 221.404 143.595 219.387 141.219 cv
215.86 137.259 209.811 138.411 206.787 142.371 cv
203.691 146.619 204.411 152.235 207.867 156.051 cv
212.835 161.163 220.612 161.019 226.011 156.627 cv
226.731 155.979 227.379 155.259 227.955 154.539 cv
227.884 154.323 li
ef
261.939 125.163 mo
263.811 125.955 266.26 123.867 267.123 122.139 cv
270.003 115.587 264.171 109.035 258.196 107.091 cv
253.444 105.723 248.547 106.371 244.156 108.675 cv
232.059 115.227 229.612 129.843 234.723 141.003 cv
234.795 141.075 235.083 141.651 235.156 141.795 cv
234.867 142.227 234.723 142.299 234.364 142.731 cv
230.691 135.387 230.115 126.747 233.787 118.611 cv
234.579 117.099 235.444 115.659 236.523 114.291 cv
237.891 111.699 238.612 108.675 238.612 105.507 cv
238.323 97.083 232.563 89.739 223.924 88.947 cv
216.867 88.5149 209.955 93.3391 209.884 100.827 cv
209.955 105.507 213.555 110.475 218.74 109.611 cv
220.323 109.323 221.907 108.315 222.411 106.659 cv
222.771 105.219 222.052 103.707 220.612 103.275 cv
219.099 102.843 219.82 101.403 220.899 100.899 cv
223.419 99.8909 225.508 102.627 225.723 104.931 cv
225.939 109.395 221.619 112.131 217.515 111.843 cv
210.603 111.195 207.219 103.923 209.019 97.6589 cv
211.179 91.1069 217.659 87.5789 224.355 88.2991 cv
233.643 89.595 239.404 97.875 238.899 106.947 cv
238.683 109.323 238.107 111.483 237.171 113.499 cv
242.355 107.451 250.203 104.067 258.267 106.443 cv
264.82 108.531 270.939 115.659 267.555 122.787 cv
266.619 124.803 264.315 126.819 261.867 126.099 cv
260.572 125.739 258.844 124.083 259.059 122.715 cv
259.203 121.419 260.355 120.555 261.579 120.771 cv
262.875 120.915 263.74 122.067 263.595 123.291 cv
263.451 124.227 262.803 124.947 261.939 125.163 cv
ef
385.059 124.587 mo
396.723 123.147 414.939 126.891 414.939 141.651 cv
414.939 149.427 408.531 155.835 400.755 155.835 cv
392.979 155.835 386.499 149.427 386.499 141.651 cv
385.203 141.651 li
385.203 150.219 392.187 157.275 400.755 157.275 cv
400.755 157.203 li
405.075 157.203 408.963 155.475 411.771 152.667 cv
414.652 149.787 416.307 145.755 416.307 141.651 cv
416.307 125.883 397.444 121.707 384.844 123.219 cv
362.092 125.955 358.132 154.467 336.243 157.635 cv
332.572 158.139 328.612 157.923 325.011 157.131 cv
316.948 155.331 308.595 150.507 303.267 141.435 cv
302.907 141.651 302.475 141.867 302.043 142.083 cv
307.515 151.515 316.3 156.627 324.723 158.427 cv
328.468 159.291 332.572 159.579 336.459 159.003 cv
358.635 155.763 362.379 127.251 385.059 124.587 cv
f
386.643 143.307 mo
386.211 139.995 386.068 136.755 386.283 133.587 cv
386.355 132.075 386.499 130.563 386.787 128.907 cv
387.723 123.723 389.667 118.035 392.907 113.715 cv
396.075 109.467 400.468 106.515 406.227 106.875 cv
406.875 106.875 407.595 106.947 408.315 107.091 cv
412.132 107.739 415.371 109.971 417.459 112.923 cv
419.547 115.875 420.483 119.691 419.835 123.507 cv
419.115 127.395 416.955 130.635 414.003 132.723 cv
410.979 134.811 406.875 135.675 403.059 135.027 cv
403.347 135.027 li
403.132 136.395 li
407.379 137.187 411.483 136.107 414.795 133.803 cv
418.035 131.571 420.411 128.043 421.203 123.795 cv
421.924 119.547 420.844 115.371 418.612 112.131 cv
416.307 108.891 412.78 106.443 408.531 105.723 cv
407.811 105.579 407.019 105.507 406.3 105.507 cv
400.035 105.147 395.283 108.243 391.827 112.851 cv
388.444 117.387 386.427 123.291 385.419 128.691 cv
385.132 130.347 384.988 132.003 384.915 133.515 cv
384.699 136.611 384.844 139.851 385.275 143.091 cv
386.643 143.307 li
f
417.099 152.235 mo
407.667 141.579 401.619 126.531 384.915 127.827 cv
362.667 129.555 358.203 159.795 336.459 162.963 cv
321.483 165.123 307.227 156.051 301.323 142.371 cv
300.963 142.587 300.531 142.803 300.099 142.947 cv
306.219 157.131 321.123 166.563 336.676 164.259 cv
358.707 161.091 363.171 130.923 384.988 129.195 cv
400.612 127.971 406.948 142.299 416.019 152.811 cv
430.275 169.443 443.092 163.611 456.555 150.507 cv
460.587 146.619 465.627 142.875 471.531 142.803 cv
479.955 142.659 487.3 150.147 493.995 154.467 cv
497.955 157.059 500.979 158.211 505.587 159.075 cv
506.595 159.219 507.315 159.363 507.315 159.363 cv
506.595 159.147 505.948 159.003 505.3 158.859 cv
500.763 157.995 498.099 156.699 494.211 154.107 cv
487.083 149.355 480.028 141.867 471.531 141.579 cv
465.267 141.363 459.939 145.395 455.619 149.571 cv
442.875 161.883 430.995 167.859 417.099 152.235 cv
f
417.171 162.531 mo
415.731 164.259 414.003 165.627 412.059 166.779 cv
411.844 166.851 411.627 166.995 411.483 167.067 cv
411.699 166.995 411.844 166.923 412.059 166.851 cv
414.364 165.915 416.523 164.547 418.323 162.819 cv
420.052 161.163 421.419 159.147 422.427 156.915 cv
423.435 154.539 423.867 152.019 423.939 149.427 cv
423.939 148.851 423.939 148.275 423.867 147.699 cv
423.867 148.275 423.795 148.851 423.723 149.427 cv
423.508 151.947 422.86 154.323 421.78 156.627 cv
420.771 158.715 419.404 160.587 417.676 162.171 cv
417.459 162.315 417.315 162.387 417.171 162.531 cv
cp
420.915 155.259 mo
420.844 155.547 420.771 155.835 420.699 156.123 cv
420.123 158.067 419.26 159.867 418.035 161.523 cv
419.475 160.083 420.627 158.355 421.419 156.483 cv
422.427 154.251 422.86 151.803 422.931 149.427 cv
422.931 146.259 422.283 143.163 421.203 140.283 cv
421.924 143.235 422.427 146.331 422.211 149.355 cv
422.068 151.371 421.635 153.387 420.915 155.259 cv
cp
420.844 147.915 mo
420.771 142.587 418.755 137.547 416.236 132.939 cv
419.547 137.763 421.924 143.451 421.851 149.355 cv
421.851 151.011 421.563 152.667 421.059 154.251 cv
421.347 152.595 421.347 150.939 421.132 149.355 cv
421.059 148.851 420.988 148.419 420.844 147.915 cv
f
271.515 156.411 mo
281.884 151.011 292.395 145.899 302.835 140.787 cv
310.107 137.259 318.099 135.603 326.163 135.963 cv
333.795 136.323 341.283 138.411 348.411 141.291 cv
362.092 146.835 374.187 155.403 387.435 161.883 cv
392.619 164.475 398.307 165.987 404.139 165.555 cv
406.444 165.339 408.747 164.835 410.907 163.971 cv
412.851 163.107 414.579 161.955 416.092 160.515 cv
417.531 159.147 418.683 157.419 419.547 155.619 cv
420.123 154.179 420.483 152.739 420.699 151.227 cv
420.699 152.307 420.627 153.459 420.411 154.539 cv
420.267 154.971 420.123 155.403 419.907 155.763 cv
419.115 157.707 417.891 159.435 416.451 160.875 cv
414.867 162.315 413.068 163.539 411.052 164.331 cv
408.891 165.267 406.515 165.771 404.139 165.987 cv
398.307 166.419 392.475 164.835 387.219 162.243 cv
374.043 155.763 361.948 147.195 348.267 141.579 cv
341.211 138.699 333.795 136.611 326.092 136.179 cv
318.099 135.819 310.179 137.475 302.907 141.003 cv
294.123 145.251 285.34 149.643 276.555 154.107 cv
274.899 154.827 273.243 155.619 271.515 156.411 cv
cp
418.755 159.219 mo
418.179 160.011 417.603 160.731 416.884 161.379 cv
415.3 162.891 413.355 164.115 411.34 164.979 cv
409.035 165.915 406.659 166.419 404.211 166.563 cv
398.236 166.995 392.331 165.411 387.003 162.747 cv
373.827 156.195 361.803 147.555 348.123 141.939 cv
341.139 139.059 333.723 136.899 326.092 136.539 cv
318.099 136.107 310.251 137.691 303.052 141.147 cv
294.699 145.179 286.419 149.211 278.139 153.387 cv
303.34 141.795 li
310.468 138.555 318.171 137.115 326.019 137.619 cv
333.508 138.195 340.707 140.355 347.547 143.235 cv
361.083 149.067 373.035 157.779 386.139 164.403 cv
391.755 167.283 398.019 169.011 404.355 168.579 cv
405.147 168.507 405.939 168.435 406.731 168.291 cv
408.531 167.787 410.187 167.067 411.771 166.203 cv
413.86 164.979 415.659 163.467 417.171 161.667 cv
417.747 160.875 418.323 160.083 418.755 159.219 cv
f
343.011 99.2429 mo
342.867 99.675 343.444 100.251 343.875 100.395 cv
345.531 100.899 346.971 99.3149 347.26 97.803 cv
347.475 96.6511 347.187 95.499 346.539 94.491 cv
343.731 90.459 337.323 91.8989 335.811 96.219 cv
335.811 96.291 335.667 96.7949 335.74 96.7949 cv
335.811 96.8669 335.884 96.6511 335.955 96.6511 cv
336.676 95.6431 337.395 94.563 338.619 94.0588 cv
339.052 93.843 338.404 94.4189 338.331 94.491 cv
335.379 97.2271 335.092 101.475 337.395 104.715 cv
338.619 106.443 340.347 107.523 342.291 108.099 cv
342.795 108.099 343.3 108.099 343.803 108.171 cv
349.203 108.891 353.307 112.203 356.26 116.739 cv
363.315 129.123 358.203 144.171 347.331 152.523 cv
344.595 154.611 341.139 156.627 337.612 157.131 cv
353.379 152.379 363.891 133.227 355.755 118.107 cv
352.731 113.067 347.763 109.179 341.572 109.611 cv
338.763 110.043 335.955 111.411 334.948 114.291 cv
334.371 116.379 335.379 118.323 336.171 120.267 cv
335.667 119.763 335.236 119.187 334.875 118.683 cv
333.508 116.811 332.931 115.083 333.867 112.851 cv
335.092 110.187 337.612 108.819 340.347 108.315 cv
335.74 106.371 332.86 100.827 335.451 95.8591 cv
337.107 92.835 340.491 91.1069 343.875 92.259 cv
346.179 93.123 347.907 95.283 347.475 97.803 cv
347.115 99.459 345.531 101.187 343.731 100.539 cv
343.227 100.323 342.652 99.8191 342.795 99.2429 cv
342.867 98.8831 343.227 98.4509 343.515 98.4509 cv
343.875 98.4509 344.092 98.739 344.092 99.0271 cv
344.092 99.3149 343.803 99.531 343.515 99.531 cv
343.3 99.531 343.083 99.387 343.011 99.2429 cv
ef
337.251 115.227 mo
337.539 117.099 340.635 117.675 342.147 115.731 cv
343.731 113.787 347.763 112.923 349.995 114.003 cv
352.3 115.155 354.459 118.035 354.459 118.035 cv
354.459 118.035 351.652 115.659 349.995 115.587 cv
348.34 115.515 346.539 116.019 346.468 118.035 cv
346.468 120.051 349.132 120.267 351.075 119.979 cv
353.092 119.691 355.323 121.851 356.043 124.083 cv
356.763 126.243 356.475 126.963 356.475 126.963 cv
356.475 126.963 355.539 123.579 353.811 122.643 cv
349.78 120.267 346.683 125.019 352.875 126.387 cv
354.603 126.747 355.971 131.067 355.827 133.083 cv
355.612 135.171 355.395 135.747 355.395 135.747 cv
355.395 135.747 355.395 131.715 354.603 130.347 cv
353.884 128.979 351.723 128.907 351.219 131.067 cv
350.283 134.739 354.747 136.971 353.236 141.867 cv
352.803 143.235 350.716 148.203 350.716 148.203 cv
350.716 148.203 353.307 145.251 355.035 142.083 cv
358.707 134.739 359.355 126.099 355.251 118.467 cv
353.092 114.939 349.995 111.987 346.251 110.691 cv
343.371 109.899 336.603 111.051 337.251 115.227 cv
ef
460.948 146.763 mo
461.955 145.899 463.107 145.179 464.404 144.603 cv
470.379 142.227 477.291 143.955 480.531 149.787 cv
483.052 154.611 481.755 160.947 476.572 163.251 cv
473.26 164.691 468.652 163.683 467.716 159.795 cv
467.355 158.571 467.572 157.131 468.652 156.339 cv
469.515 155.619 470.811 155.691 471.531 156.555 cv
472.323 157.419 473.115 156.483 473.115 155.619 cv
473.043 153.459 470.451 152.883 468.795 153.459 cv
465.627 154.683 465.052 158.571 466.491 161.307 cv
469.156 165.987 475.275 166.059 479.019 162.891 cv
482.979 159.363 483.411 153.747 480.891 149.283 cv
477.075 143.163 469.515 141.723 463.323 144.891 cv
462.459 145.395 461.595 145.899 460.875 146.547 cv
460.948 146.763 li
ef
493.059 153.459 mo
493.995 154.251 495.003 154.827 496.156 155.403 cv
501.484 157.491 507.603 155.907 510.484 150.795 cv
512.643 146.547 511.563 140.931 506.955 138.843 cv
504.075 137.619 499.971 138.483 499.107 141.867 cv
498.82 143.019 499.035 144.243 499.899 144.963 cv
500.691 145.611 501.844 145.539 502.491 144.819 cv
503.139 144.027 503.86 144.819 503.86 145.611 cv
503.86 147.483 501.555 148.059 500.115 147.555 cv
497.236 146.403 496.731 143.019 498.028 140.571 cv
500.331 136.395 505.803 136.323 509.187 139.203 cv
512.643 142.299 513.003 147.267 510.771 151.227 cv
507.387 156.627 500.691 157.923 495.219 155.115 cv
494.427 154.683 493.707 154.251 493.059 153.675 cv
493.059 153.459 li
ef
271.371 156.555 mo
271.371 156.555 277.419 153.891 281.884 155.979 cv
286.419 157.995 290.307 157.779 293.835 157.347 cv
297.364 156.843 299.74 158.715 300.82 160.515 cv
301.899 162.315 302.043 163.539 302.043 163.539 cv
302.043 163.539 302.115 157.851 297.075 153.963 cv
289.587 147.987 277.924 150.723 271.371 156.555 cv
ef
271.587 157.131 mo
271.587 157.131 276.627 157.347 279.075 160.227 cv
281.451 163.179 284.187 164.331 286.78 165.123 cv
289.371 165.987 290.451 168.075 290.523 169.659 cv
290.667 171.243 290.379 172.107 290.379 172.107 cv
290.379 172.107 292.323 168.291 290.163 163.899 cv
286.924 157.347 278.068 155.331 271.587 157.131 cv
ef
278.931 151.443 mo
278.931 151.443 282.315 149.355 282.82 146.403 cv
283.323 143.451 284.763 141.579 286.203 140.067 cv
287.643 138.483 287.499 136.611 286.995 135.459 cv
286.419 134.307 285.844 133.875 285.844 133.875 cv
285.844 133.875 288.723 135.747 289.011 139.563 cv
289.371 145.323 284.043 150.147 278.931 151.443 cv
ef
497.379 155.835 mo
497.811 156.051 498.171 156.123 498.603 156.339 cv
503.068 158.571 508.035 159.579 512.931 158.859 cv
525.028 157.131 528.052 147.123 533.019 137.475 cv
528.196 147.267 525.459 157.203 513.075 159.219 cv
507.243 160.155 501.484 158.787 496.371 155.907 cv
497.379 155.835 li
ef
531.867 137.763 mo
532.587 137.331 533.595 137.691 533.955 138.411 cv
534.315 139.203 534.028 140.139 533.236 140.571 cv
532.444 140.931 531.508 140.643 531.147 139.851 cv
530.787 139.059 531.075 138.123 531.867 137.763 cv
ef
529.419 141.651 mo
530.427 141.147 531.723 141.579 532.227 142.587 cv
532.731 143.595 532.3 144.819 531.291 145.323 cv
530.283 145.827 529.059 145.395 528.555 144.387 cv
528.052 143.379 528.411 142.155 529.419 141.651 cv
ef
525.747 147.267 mo
527.115 146.619 528.771 147.123 529.419 148.491 cv
530.068 149.787 529.563 151.443 528.196 152.091 cv
526.827 152.811 525.243 152.235 524.595 150.867 cv
523.875 149.571 524.451 147.915 525.747 147.267 cv
ef
454.323 116.595 mo
454.035 116.883 454.323 117.531 454.612 117.819 cv
455.691 118.827 457.347 118.107 458.139 117.099 cv
458.787 116.235 458.931 115.227 458.787 114.219 cv
458.139 110.115 452.667 108.819 449.931 111.627 cv
449.86 111.699 449.572 111.987 449.643 112.059 cv
449.643 112.059 449.787 111.987 449.86 111.987 cv
450.723 111.483 451.731 110.907 452.811 110.979 cv
453.315 110.979 452.523 111.195 452.451 111.195 cv
449.139 112.203 447.411 115.443 447.988 118.755 cv
448.347 120.555 449.211 121.995 450.508 123.219 cv
450.867 123.363 451.3 123.579 451.659 123.795 cv
455.547 126.315 457.563 130.419 458.139 134.955 cv
459.003 147.195 449.499 156.915 438.052 159.435 cv
435.099 159.939 431.716 160.299 428.835 159.363 cv
442.731 161.451 457.924 150.579 457.275 135.891 cv
456.771 130.851 454.323 126.027 449.427 124.083 cv
447.052 123.363 444.387 123.435 442.587 125.235 cv
441.364 126.675 441.364 128.547 441.291 130.275 cv
441.147 129.771 441.003 129.195 440.86 128.619 cv
440.499 126.675 440.716 125.163 442.227 123.723 cv
444.171 122.139 446.619 121.995 448.924 122.643 cv
446.043 119.403 445.899 114.075 449.716 111.195 cv
452.163 109.467 455.404 109.395 457.563 111.483 cv
459.075 112.995 459.579 115.371 458.283 117.171 cv
457.419 118.251 455.619 119.043 454.468 117.891 cv
454.107 117.531 453.891 116.955 454.179 116.523 cv
454.323 116.235 454.755 116.019 455.043 116.163 cv
455.26 116.307 455.331 116.595 455.26 116.811 cv
455.115 117.027 454.827 117.171 454.612 117.027 cv
454.468 116.955 454.323 116.739 454.323 116.595 cv
ef
443.955 126.819 mo
443.523 128.403 445.683 129.987 447.627 129.051 cv
449.499 128.115 452.955 128.907 454.323 130.635 cv
455.619 132.291 456.267 135.315 456.267 135.315 cv
456.267 135.315 454.971 132.507 453.676 131.859 cv
452.451 131.139 450.867 130.851 450.075 132.435 cv
449.355 133.947 451.3 135.099 452.955 135.603 cv
454.612 136.107 455.547 138.627 455.26 140.571 cv
455.043 142.587 454.539 142.947 454.539 142.947 cv
454.539 142.947 455.043 140.067 454.035 138.627 cv
451.803 135.387 447.699 137.907 451.948 141.219 cv
453.171 142.155 452.595 145.971 451.731 147.483 cv
450.867 148.995 450.435 149.427 450.435 149.427 cv
450.435 149.427 451.948 146.259 451.875 144.963 cv
451.731 143.595 450.147 142.731 448.924 144.243 cv
446.835 146.763 449.499 150.147 446.475 153.315 cv
445.683 154.251 442.227 157.275 442.227 157.275 cv
442.227 157.275 445.323 155.907 447.844 154.107 cv
453.315 149.859 457.059 143.379 456.699 135.963 cv
456.34 132.435 455.043 129.051 452.667 126.675 cv
450.723 125.019 445.035 123.363 443.955 126.819 cv
ef
351.219 156.771 mo
352.227 155.907 353.379 155.187 354.676 154.611 cv
360.652 152.163 367.563 153.963 370.803 159.723 cv
373.323 164.547 372.028 170.883 366.844 173.259 cv
363.531 174.627 358.924 173.691 357.915 169.803 cv
357.627 168.579 357.844 167.139 358.851 166.275 cv
359.787 165.627 361.083 165.627 361.803 166.491 cv
362.523 167.427 363.387 166.491 363.387 165.627 cv
363.315 163.467 360.723 162.891 359.068 163.467 cv
355.899 164.691 355.323 168.579 356.763 171.315 cv
359.355 175.995 365.547 176.067 369.291 172.827 cv
373.251 169.299 373.683 163.755 371.092 159.219 cv
367.347 153.171 359.787 151.731 353.595 154.899 cv
352.659 155.331 351.867 155.907 351.147 156.483 cv
351.219 156.771 li
ef
388.803 121.347 mo
389.163 119.979 389.74 118.611 390.531 117.315 cv
394.419 111.411 401.691 108.747 408.171 111.915 cv
413.355 114.651 416.163 121.059 412.924 126.387 cv
410.907 129.699 406.156 131.643 402.915 128.835 cv
401.835 127.899 401.187 126.531 401.547 125.091 cv
401.907 123.939 403.132 123.219 404.355 123.507 cv
405.508 123.867 405.723 122.499 405.147 121.707 cv
403.78 119.835 401.115 120.915 399.963 122.427 cv
397.875 125.523 399.747 129.339 402.771 130.923 cv
407.955 133.443 413.499 129.771 414.939 124.515 cv
416.236 118.971 413.211 113.643 408.099 111.267 cv
401.043 108.171 393.34 111.555 389.74 118.179 cv
389.236 119.187 388.875 120.123 388.587 121.131 cv
388.803 121.347 li
ef
411.699 151.515 mo
410.835 152.523 409.827 153.459 408.676 154.251 cv
403.275 157.635 396.147 157.203 391.971 152.091 cv
388.659 147.843 388.731 141.435 393.411 138.195 cv
396.364 136.179 401.043 136.323 402.771 139.923 cv
403.275 141.075 403.275 142.515 402.411 143.523 cv
401.691 144.387 400.395 144.531 399.531 143.883 cv
398.667 143.091 398.019 144.171 398.163 145.035 cv
398.595 147.123 401.26 147.195 402.771 146.331 cv
405.652 144.603 405.579 140.715 403.635 138.267 cv
400.251 134.163 394.203 135.171 391.035 138.987 cv
387.867 143.163 388.444 148.707 391.755 152.667 cv
396.508 157.923 404.211 157.995 409.683 153.747 cv
410.475 153.171 411.123 152.451 411.771 151.731 cv
411.699 151.515 li
ef
309.171 154.323 mo
310.035 155.331 310.971 156.267 312.123 157.131 cv
317.451 160.731 324.652 160.443 328.971 155.475 cv
332.427 151.299 332.572 144.891 327.963 141.435 cv
325.011 139.419 320.331 139.419 318.531 142.947 cv
318.028 144.099 317.884 145.539 318.747 146.547 cv
319.468 147.483 320.763 147.699 321.627 146.979 cv
322.563 146.259 323.139 147.339 322.995 148.203 cv
322.491 150.291 319.827 150.291 318.315 149.427 cv
315.508 147.555 315.723 143.595 317.74 141.219 cv
321.267 137.259 327.243 138.411 330.34 142.371 cv
333.435 146.619 332.643 152.235 329.187 156.051 cv
324.219 161.163 316.515 161.019 311.115 156.627 cv
310.395 155.979 309.676 155.259 309.099 154.539 cv
309.171 154.323 li
ef
275.115 125.163 mo
273.243 125.955 270.795 123.867 270.003 122.139 cv
267.123 115.587 272.955 109.035 278.931 107.091 cv
283.683 105.723 288.579 106.371 292.971 108.675 cv
304.995 115.227 307.444 129.843 302.331 141.003 cv
302.331 141.075 302.043 141.651 301.971 141.795 cv
302.26 142.227 302.331 142.299 302.691 142.731 cv
306.364 135.387 307.011 126.747 303.34 118.611 cv
302.547 117.099 301.612 115.659 300.603 114.291 cv
299.236 111.699 298.515 108.675 298.444 105.507 cv
298.731 97.083 304.563 89.739 313.203 88.947 cv
320.26 88.5149 327.171 93.3391 327.243 100.827 cv
327.171 105.507 323.499 110.475 318.387 109.611 cv
316.731 109.323 315.147 108.315 314.716 106.659 cv
314.355 105.219 315.075 103.707 316.515 103.275 cv
317.955 102.843 317.307 101.403 316.227 100.899 cv
313.635 99.8909 311.547 102.627 311.404 104.931 cv
311.187 109.395 315.508 112.131 319.612 111.843 cv
326.523 111.195 329.907 103.923 328.035 97.6589 cv
325.948 91.1069 319.468 87.5789 312.771 88.2991 cv
303.483 89.595 297.723 97.875 298.227 106.947 cv
298.444 109.323 299.019 111.483 299.955 113.499 cv
294.771 107.451 286.924 104.067 278.86 106.443 cv
272.307 108.531 266.187 115.659 269.499 122.787 cv
270.508 124.803 272.811 126.819 275.26 126.099 cv
276.555 125.739 278.211 124.083 278.068 122.715 cv
277.924 121.419 276.771 120.555 275.475 120.771 cv
274.251 120.915 273.387 122.067 273.531 123.291 cv
273.676 124.227 274.323 124.947 275.115 125.163 cv
ef
268.491 144.603 mo
271.515 144.603 273.963 147.051 273.963 150.075 cv
273.963 153.099 271.515 155.547 268.491 155.547 cv
265.539 155.547 263.092 153.099 263.092 150.075 cv
263.092 147.051 265.539 144.603 268.491 144.603 cv
ef
268.491 134.955 mo
270.795 134.955 272.595 136.755 272.595 138.987 cv
272.595 141.291 270.795 143.091 268.491 143.091 cv
266.331 143.091 264.531 141.291 264.531 138.987 cv
264.531 136.755 266.331 134.955 268.491 134.955 cv
ef
268.707 126.963 mo
270.291 126.963 271.659 128.259 271.659 129.843 cv
271.659 131.499 270.291 132.795 268.707 132.795 cv
267.196 132.795 265.827 131.499 265.827 129.843 cv
265.827 128.259 267.196 126.963 268.707 126.963 cv
ef
222.411 558.027 mo
222.483 559.035 222.771 560.115 223.132 561.195 cv
219.676 559.899 216.147 558.747 212.691 558.027 cv
202.251 556.011 190.444 558.315 181.803 564.795 cv
172.3 571.851 174.963 584.307 184.035 589.779 cv
191.523 594.387 202.179 594.891 209.884 593.523 cv
217.3 592.155 223.995 588.483 231.34 586.971 cv
243.291 584.595 256.539 590.931 265.468 598.779 cv
265.971 599.211 273.028 605.691 269.355 606.915 cv
267.627 607.563 266.26 605.043 264.531 604.395 cv
258.123 602.019 251.572 599.067 244.731 597.411 cv
231.483 594.099 225.795 599.355 213.699 602.091 cv
192.315 606.843 156.459 604.899 154.587 576.747 cv
156.171 576.747 li
157.107 603.387 194.043 605.115 213.267 600.219 cv
225.291 597.123 231.771 591.723 245.307 595.323 cv
252.652 597.339 259.78 599.643 266.547 603.027 cv
259.276 593.883 243.364 586.827 231.771 589.275 cv
224.427 590.859 217.659 594.603 210.243 595.899 cv
201.891 597.339 190.659 596.763 182.667 591.939 cv
172.011 585.459 169.132 570.915 179.716 562.707 cv
188.572 555.795 204.052 553.779 212.979 555.363 cv
216.147 555.939 219.243 556.947 222.411 558.027 cv
cp
253.515 581.787 mo
245.811 579.483 236.955 577.611 229.035 579.699 cv
218.74 582.291 212.835 586.251 201.099 582.939 cv
194.548 581.067 192.963 578.043 194.115 575.091 cv
195.988 570.339 202.468 567.603 208.875 566.667 cv
216.364 565.587 221.907 567.819 227.884 570.483 cv
227.307 569.619 226.3 567.963 225.291 566.091 cv
220.035 563.931 214.78 562.563 208.011 563.499 cv
200.451 564.579 192.82 567.963 190.659 574.299 cv
188.499 580.635 193.683 584.163 200.092 586.035 cv
209.884 588.771 217.227 587.403 226.371 584.235 cv
235.444 581.139 243.219 582.147 252.435 584.955 cv
253.515 581.787 li
ef
183.028 560.475 mo
168.123 567.099 154.515 577.323 139.612 583.803 cv
108.867 597.051 87.4114 565.659 59.9792 556.083 cv
55.2273 554.427 50.2595 553.419 45.0754 553.419 cv
29.0913 553.419 17.2114 565.371 7.13135 576.171 cv
7.34741 576.315 li
22.7554 559.611 38.6675 548.235 60.2673 557.451 cv
84.6033 567.819 111.603 598.563 140.26 585.531 cv
154.803 578.979 170.572 568.611 183.028 562.563 cv
183.028 560.475 li
ef
180.939 561.771 mo
177.196 563.571 173.451 565.011 169.707 566.019 cv
167.979 566.523 166.107 566.883 164.092 567.243 cv
157.756 568.179 150.34 568.107 144.075 566.019 cv
137.884 564.003 132.844 560.043 130.971 553.203 cv
130.756 552.483 130.539 551.619 130.395 550.755 cv
129.676 546.003 130.971 541.395 133.635 537.867 cv
136.3 534.267 140.26 531.675 145.011 530.955 cv
149.763 530.235 154.371 531.531 157.971 534.195 cv
161.499 536.859 164.092 540.819 164.811 545.571 cv
166.468 545.355 li
165.676 540.171 162.867 535.707 158.907 532.827 cv
155.019 529.947 149.979 528.507 144.795 529.299 cv
139.539 530.091 135.147 532.899 132.267 536.859 cv
129.387 540.747 127.948 545.787 128.74 550.971 cv
128.884 551.907 129.099 552.843 129.315 553.707 cv
131.404 561.123 136.875 565.443 143.572 567.603 cv
150.123 569.763 157.756 569.835 164.379 568.899 cv
166.395 568.539 168.411 568.179 170.139 567.675 cv
173.884 566.667 177.555 565.227 181.156 563.499 cv
180.939 561.771 li
f
72.0754 563.499 mo
69.8435 562.419 67.6116 561.555 65.3074 560.907 cv
64.2273 560.619 63.0754 560.331 61.8513 560.187 cv
58.0354 559.611 53.4993 559.611 49.6833 560.907 cv
45.9392 562.131 42.8435 564.507 41.6914 568.683 cv
41.5474 569.187 41.4753 569.691 41.3313 570.195 cv
40.8994 573.075 41.6914 575.883 43.3474 578.043 cv
44.9314 580.203 47.3792 581.787 50.2595 582.219 cv
53.1394 582.651 55.9475 581.859 58.1072 580.275 cv
60.2673 578.691 61.8513 576.243 62.2834 573.363 cv
63.2913 573.507 li
62.8596 576.675 61.1316 579.339 58.7556 581.067 cv
56.3074 582.867 53.2834 583.731 50.1155 583.227 cv
46.9475 582.795 44.2834 581.067 42.4834 578.691 cv
40.7554 576.243 39.8914 573.219 40.3235 570.051 cv
40.4673 569.475 40.5393 568.971 40.6833 568.395 cv
41.9795 563.859 45.2913 561.267 49.3235 559.899 cv
53.3552 558.603 58.0354 558.531 61.9954 559.179 cv
63.2913 559.323 64.4436 559.611 65.5955 559.899 cv
67.8274 560.547 70.0593 561.411 72.2913 562.419 cv
72.0754 563.499 li
f
112.612 545.787 mo
124.132 558.891 131.619 577.323 152.068 575.739 cv
158.763 575.163 164.092 572.571 168.844 568.827 cv
168.699 568.251 168.627 567.603 168.555 567.027 cv
163.875 570.843 158.548 573.507 151.924 574.011 cv
132.771 575.523 125.068 558.027 113.979 545.139 cv
106.275 536.211 99.0032 532.539 91.8035 532.683 cv
88.7795 534.627 li
96.4114 533.331 104.26 536.355 112.612 545.787 cv
f
129.243 551.547 mo
127.156 548.667 124.924 546.003 122.475 543.627 cv
121.323 542.547 120.099 541.467 118.659 540.387 cv
114.196 537.003 108.508 533.979 102.82 532.971 cv
97.2751 531.963 91.7312 532.899 87.4114 537.363 cv
86.9792 537.867 86.4753 538.443 86.0432 539.019 cv
83.5232 542.331 82.5872 546.435 83.0916 550.251 cv
83.6672 554.067 85.6833 557.739 88.9954 560.259 cv
92.3792 562.779 96.4114 563.643 100.227 563.139 cv
104.043 562.563 107.716 560.619 110.236 557.235 cv
111.387 558.099 li
108.652 561.771 104.619 564.003 100.444 564.579 cv
96.1956 565.155 91.8035 564.147 88.1316 561.411 cv
84.4592 558.675 82.2273 554.643 81.6516 550.467 cv
81.0754 546.219 82.0833 541.827 84.8196 538.155 cv
85.3235 537.507 85.8274 536.859 86.4036 536.355 cv
91.0833 531.459 97.0593 530.451 103.035 531.531 cv
109.011 532.611 114.915 535.779 119.523 539.235 cv
120.963 540.315 122.331 541.467 123.483 542.547 cv
125.86 544.851 128.092 547.515 130.179 550.323 cv
129.243 551.547 li
f
8.35547 574.371 mo
8.35547 574.371 9.00342 573.435 9.36328 572.931 cv
9.72339 572.355 10.5874 570.771 10.8035 569.475 cv
11.1633 567.675 10.0115 567.243 8.42749 567.243 cv
7.20337 567.171 6.19531 567.459 5.97949 568.755 cv
5.90747 569.259 5.83545 569.547 5.69141 569.619 cv
5.04346 569.763 4.39526 568.683 3.09937 569.475 cv
1.65942 570.411 .219482 572.931 2.59546 573.795 cv
3.74731 574.299 6.4834 574.659 6.9873 574.659 cv
7.41943 574.659 7.7793 574.515 7.92334 574.803 cv
8.06738 575.091 7.85132 575.379 7.41943 575.163 cv
6.9873 574.875 5.1875 574.803 4.61133 574.803 cv
1.01147 574.515 -.0686035 578.115 2.95532 578.907 cv
4.25146 579.267 4.61133 578.691 4.61133 578.907 cv
4.61133 579.123 4.10742 579.627 4.75537 580.275 cv
6.19531 581.643 9.21948 580.851 8.57129 578.547 cv
8.28345 577.539 8.1394 576.315 8.1394 575.883 cv
8.21143 575.451 8.35547 575.235 8.49927 575.307 cv
8.71533 575.379 9.07544 578.331 9.21948 579.051 cv
10.0115 582.075 14.1875 580.563 13.7554 578.331 cv
13.6113 577.611 13.4673 577.539 13.6833 577.467 cv
13.8274 577.395 14.4753 577.539 14.9795 576.603 cv
16.2754 574.371 14.2593 571.275 11.8113 573.003 cv
11.0193 573.579 9.21948 574.803 8.85938 574.947 cv
8.49927 575.163 8.35547 575.091 8.28345 574.875 cv
8.1394 574.659 8.35547 574.371 8.35547 574.371 cv
ef
166.395 545.139 mo
166.395 545.139 165.315 543.987 164.74 543.411 cv
164.092 542.763 162.364 541.251 160.78 540.531 cv
158.548 539.595 157.612 540.963 157.179 542.907 cv
156.82 544.491 156.82 545.859 158.475 546.507 cv
159.052 546.723 159.483 546.939 159.483 547.155 cv
159.411 547.947 157.827 548.595 158.548 550.395 cv
159.267 552.555 162.147 555.075 163.948 552.339 cv
164.884 550.971 166.179 547.587 166.323 546.939 cv
166.468 546.363 166.323 545.859 166.827 545.787 cv
167.26 545.715 167.475 546.003 167.043 546.507 cv
166.612 547.011 165.963 549.315 165.82 550.035 cv
164.451 554.571 168.699 557.091 170.643 553.347 cv
171.435 551.835 170.86 551.115 171.075 551.187 cv
171.364 551.259 171.867 552.123 172.948 551.403 cv
175.107 549.963 174.891 545.859 171.795 546.003 cv
170.355 546.075 168.771 545.931 168.196 545.787 cv
167.691 545.571 167.404 545.355 167.548 545.139 cv
167.691 544.851 171.652 545.355 172.659 545.355 cv
176.763 545.139 175.971 539.379 173.019 539.235 cv
172.011 539.235 171.939 539.379 171.867 539.163 cv
171.795 538.875 172.227 538.155 171.147 537.147 cv
168.699 534.915 164.092 536.571 165.603 540.171 cv
166.107 541.395 167.115 544.059 167.26 544.635 cv
167.404 545.139 167.331 545.283 167.043 545.355 cv
166.683 545.427 166.395 545.139 166.395 545.139 cv
ef
65.3074 571.635 mo
65.3074 571.635 65.6672 570.555 65.8835 569.979 cv
66.0994 569.331 66.5315 567.603 66.3875 566.307 cv
66.2434 564.507 65.0193 564.291 63.5076 564.723 cv
62.3552 565.011 61.4192 565.587 61.5632 566.883 cv
61.6355 567.387 61.6355 567.675 61.4915 567.747 cv
60.9153 568.035 59.9792 567.171 58.9714 568.323 cv
57.8196 569.547 57.0994 572.355 59.6194 572.643 cv
60.9153 572.787 63.5793 572.427 64.0833 572.283 cv
64.5154 572.139 64.8752 571.923 65.0193 572.211 cv
65.2356 572.427 65.0916 572.715 64.6594 572.643 cv
64.1555 572.499 62.3552 572.931 61.8513 573.003 cv
58.3235 573.723 58.1794 577.467 61.3474 577.467 cv
62.6433 577.467 62.8596 576.819 62.9314 576.963 cv
63.0032 577.179 62.5715 577.827 63.4353 578.331 cv
65.1633 579.267 67.8992 577.611 66.6755 575.595 cv
66.0994 574.659 65.5955 573.579 65.5232 573.147 cv
65.4514 572.715 65.5232 572.427 65.7395 572.499 cv
65.9553 572.499 67.0354 575.307 67.3953 575.955 cv
68.9792 578.619 72.5793 576.027 71.6433 574.011 cv
71.2834 573.363 71.1394 573.363 71.2834 573.219 cv
71.4275 573.075 72.0754 573.075 72.3635 571.995 cv
72.9392 569.547 70.2751 567.099 68.3313 569.403 cv
67.6833 570.123 66.3152 571.779 65.9553 572.067 cv
65.6672 572.355 65.5955 572.355 65.3792 572.211 cv
65.2356 571.995 65.3074 571.635 65.3074 571.635 cv
ef
110.307 556.083 mo
110.307 556.083 109.083 556.011 108.508 555.867 cv
107.86 555.795 106.059 555.723 104.835 556.155 cv
103.035 556.659 103.179 557.883 103.827 559.251 cv
104.404 560.331 105.052 561.195 106.347 560.763 cv
106.78 560.547 107.139 560.475 107.211 560.619 cv
107.643 561.123 106.995 562.203 108.291 562.995 cv
109.731 563.859 112.612 564.003 112.395 561.483 cv
112.251 560.259 111.387 557.667 111.171 557.235 cv
110.955 556.803 110.595 556.515 110.884 556.299 cv
111.099 556.011 111.387 556.083 111.387 556.587 cv
111.387 557.091 112.107 558.747 112.323 559.251 cv
113.691 562.563 117.435 561.915 116.787 558.819 cv
116.499 557.595 115.78 557.451 115.995 557.379 cv
116.211 557.307 116.86 557.523 117.147 556.659 cv
117.723 554.715 115.635 552.411 113.907 553.995 cv
113.115 554.715 112.107 555.435 111.676 555.579 cv
111.315 555.723 111.028 555.723 111.028 555.507 cv
110.955 555.291 113.548 553.707 114.052 553.203 cv
116.355 551.115 113.115 548.091 111.315 549.459 cv
110.74 549.963 110.811 550.107 110.667 549.963 cv
110.451 549.819 110.307 549.243 109.227 549.171 cv
106.707 549.027 104.835 552.195 107.427 553.635 cv
108.364 554.067 110.236 555.147 110.595 555.363 cv
110.884 555.579 110.884 555.723 110.811 555.939 cv
110.667 556.155 110.307 556.083 110.307 556.083 cv
ef
106.995 601.299 mo
104.331 605.835 103.395 610.947 104.043 615.771 cv
103.971 611.739 104.979 607.635 107.211 603.891 cv
116.716 587.979 127.515 596.115 139.899 592.659 cv
147.676 590.499 153.364 584.451 155.523 577.179 cv
152.931 583.299 147.676 588.267 140.763 590.211 cv
128.163 593.739 116.499 585.315 106.995 601.299 cv
ef
239.26 529.659 mo
247.899 527.427 257.763 530.955 260.499 540.027 cv
261.867 545.211 260.068 551.403 254.523 553.131 cv
251.499 553.995 249.123 552.987 247.107 550.683 cv
245.451 548.811 245.092 551.403 245.451 552.771 cv
246.963 557.379 252.723 558.099 256.683 556.587 cv
265.035 553.059 266.404 542.907 262.3 535.563 cv
256.539 526.059 244.659 523.899 234.939 528.435 cv
222.411 534.915 218.019 549.387 222.555 562.275 cv
227.523 575.091 239.547 582.579 252.652 582.939 cv
252.795 582.651 253.011 582.291 253.227 581.931 cv
247.683 581.787 242.139 580.275 236.955 577.179 cv
228.099 571.635 222.555 562.419 222.771 551.835 cv
223.275 541.611 229.251 532.611 239.26 529.659 cv
ef
219.243 555.939 mo
215.931 549.963 212.331 547.731 211.035 544.563 cv
209.092 539.739 209.884 538.515 205.203 537.795 cv
204.771 537.723 204.267 537.795 203.835 537.867 cv
204.483 537.507 205.203 537.147 205.924 536.787 cv
211.035 534.483 215.211 537.147 217.227 542.115 cv
218.523 545.211 217.444 549.315 219.243 555.939 cv
ef
219.676 543.555 mo
219.243 538.227 217.371 535.491 217.444 532.827 cv
217.587 528.795 218.523 528.147 215.427 526.131 cv
215.139 525.987 214.78 525.915 214.419 525.771 cv
214.995 525.699 215.643 525.627 216.219 525.627 cv
220.612 525.627 222.771 528.867 222.627 533.043 cv
222.555 535.707 220.539 538.299 219.676 543.555 cv
ef
224.86 534.483 mo
225.939 531.027 225.508 528.795 226.3 527.139 cv
227.451 524.547 228.243 524.403 226.731 522.315 cv
226.587 522.099 226.371 522.027 226.227 521.811 cv
226.587 521.955 227.019 522.099 227.379 522.243 cv
230.187 523.395 230.691 525.987 229.539 528.579 cv
228.747 530.235 226.803 531.387 224.86 534.483 cv
ef
148.468 576.963 mo
141.699 577.827 138.315 580.347 134.931 580.419 cv
129.676 580.491 128.884 579.267 126.435 583.443 cv
126.219 583.803 126.147 584.235 126.075 584.667 cv
125.931 583.947 125.86 583.155 125.787 582.363 cv
125.499 576.747 129.531 573.795 134.86 573.723 cv
138.243 573.723 141.699 576.171 148.468 576.963 cv
ef
135.075 572.571 mo
129.676 572.139 126.579 573.579 123.988 573.003 cv
119.884 572.211 119.379 571.131 116.86 573.939 cv
116.643 574.227 116.499 574.515 116.355 574.875 cv
116.355 574.299 116.427 573.651 116.499 573.003 cv
117.219 568.611 120.891 567.027 124.995 567.819 cv
127.659 568.395 129.891 570.843 135.075 572.571 cv
ef
127.156 544.635 mo
126.075 537.867 127.444 533.907 126.508 530.667 cv
124.995 525.627 123.627 525.195 126.867 521.667 cv
127.156 521.379 127.587 521.163 127.948 520.947 cv
127.227 521.019 126.435 521.163 125.643 521.379 cv
120.171 522.747 118.587 527.499 120.099 532.539 cv
121.107 535.851 124.419 538.371 127.156 544.635 cv
ef
130.756 537.795 mo
132.411 532.611 131.763 529.299 132.844 526.851 cv
134.643 523.035 135.795 522.819 133.563 519.723 cv
133.419 519.435 133.132 519.219 132.771 519.003 cv
133.419 519.147 133.995 519.363 134.572 519.579 cv
138.747 521.307 139.468 525.195 137.667 529.083 cv
136.587 531.531 133.635 533.115 130.756 537.795 cv
ef
139.539 530.091 mo
142.059 526.851 142.347 524.331 143.787 522.891 cv
145.948 520.659 146.811 520.803 146.019 518.067 cv
146.019 517.779 145.803 517.563 145.659 517.347 cv
146.019 517.635 146.451 517.923 146.811 518.211 cv
149.26 520.443 148.827 523.395 146.595 525.627 cv
145.227 527.139 142.707 527.499 139.539 530.091 cv
ef
90.2913 532.035 mo
84.8196 532.467 81.7952 531.027 79.1316 531.603 cv
75.0994 532.395 74.5955 533.475 72.0754 530.667 cv
71.8596 530.451 71.7156 530.091 71.4993 529.731 cv
71.5715 530.379 71.6433 530.955 71.7156 531.603 cv
72.4353 535.995 76.0354 537.651 80.2112 536.787 cv
82.8752 536.211 85.1072 533.763 90.2913 532.035 cv
ef
83.6672 537.075 mo
79.4915 539.307 76.6116 539.307 74.6672 540.675 cv
71.7874 542.763 71.7874 543.843 68.7634 542.475 cv
68.4753 542.331 68.2595 542.115 67.9714 541.899 cv
68.2595 542.403 68.4753 542.907 68.8352 543.339 cv
70.9236 546.579 74.3792 546.579 77.4036 544.419 cv
79.2751 543.051 80.2112 540.243 83.6672 537.075 cv
ef
79.7073 544.851 mo
77.6194 548.235 75.4592 549.387 74.6672 551.187 cv
73.3713 553.995 73.8035 554.715 70.9954 555.003 cv
70.7795 555.003 70.4915 554.931 70.2034 554.859 cv
70.6355 555.147 70.9954 555.363 71.4275 555.579 cv
74.3074 557.091 76.8274 555.651 78.1233 552.843 cv
78.9875 551.043 78.4832 548.595 79.7073 544.851 cv
ef
27.6514 557.811 mo
22.9714 558.171 20.3074 556.947 18.0034 557.451 cv
14.4753 558.171 14.0435 559.107 11.8113 556.659 cv
11.5955 556.443 11.5234 556.155 11.3794 555.867 cv
11.3794 556.371 11.4514 556.947 11.5234 557.523 cv
12.1714 561.339 15.3394 562.707 18.9395 561.987 cv
21.2434 561.483 23.1875 559.323 27.6514 557.811 cv
ef
30.5315 558.171 mo
27.8674 562.131 27.6514 565.011 26.1394 566.811 cv
23.7634 569.547 22.7554 569.475 23.8354 572.571 cv
23.9075 572.859 24.1233 573.147 24.3394 573.363 cv
23.9075 573.075 23.4033 572.787 22.9714 572.427 cv
19.9473 570.051 20.2354 566.595 22.6833 563.787 cv
24.1953 562.059 27.0034 561.411 30.5315 558.171 cv
ef
36.1475 553.203 mo
30.6033 552.267 27.8674 550.107 25.0593 550.035 cv
20.8113 549.819 20.0913 550.827 18.2195 547.371 cv
18.0034 547.083 18.0034 546.651 17.9314 546.291 cv
17.7874 546.939 17.7153 547.587 17.6433 548.235 cv
17.2834 552.771 20.5234 555.291 24.8435 555.435 cv
27.6514 555.579 30.5315 553.635 36.1475 553.203 cv
ef
52.7795 552.195 mo
46.3713 549.603 43.7795 546.291 40.4673 545.427 cv
35.4275 544.059 34.3474 544.995 33.0513 540.387 cv
32.9075 539.955 32.9795 539.523 32.9795 539.019 cv
32.6914 539.739 32.4033 540.459 32.1155 541.251 cv
30.4595 546.579 33.6274 550.467 38.7395 551.835 cv
42.0513 552.699 45.9392 551.187 52.7795 552.195 cv
ef
118.083 589.635 mo
111.243 589.347 107.643 587.187 104.26 587.475 cv
99.0032 587.907 98.2834 589.131 95.5476 585.243 cv
95.2595 584.883 95.1873 584.451 95.0432 584.019 cv
94.9714 584.811 94.8992 585.603 94.9714 586.395 cv
95.1873 592.011 99.5076 594.531 104.763 594.099 cv
108.147 593.811 111.387 591.003 118.083 589.635 cv
ef
269.716 578.259 mo
268.924 578.907 269.355 580.491 269.931 581.283 cv
272.236 584.019 276.483 582.867 278.716 580.563 cv
280.371 578.763 281.163 576.387 281.092 573.939 cv
280.659 563.859 267.988 559.251 260.643 565.155 cv
260.499 565.227 259.707 565.875 259.851 566.019 cv
259.851 566.091 260.283 565.947 260.355 565.947 cv
262.659 565.011 265.251 563.931 267.699 564.363 cv
268.78 564.579 266.979 564.795 266.835 564.867 cv
258.699 566.307 253.515 573.435 253.875 581.643 cv
254.307 587.907 257.763 593.091 262.731 596.835 cv
263.092 597.051 263.523 597.339 263.811 597.627 cv
264.676 598.275 264.028 598.131 263.451 597.915 cv
262.587 597.627 261.723 597.195 260.86 596.691 cv
249.123 589.419 247.827 571.347 260.283 564.003 cv
266.547 560.619 274.251 561.411 278.931 567.027 cv
281.955 571.131 282.531 576.891 278.931 580.779 cv
276.555 583.227 271.948 584.451 269.572 581.355 cv
268.851 580.419 268.491 578.979 269.355 578.043 cv
269.787 577.539 270.867 577.107 271.515 577.539 cv
272.019 577.899 272.163 578.547 271.803 579.123 cv
271.444 579.627 270.723 579.771 270.219 579.411 cv
269.86 579.123 269.643 578.691 269.716 578.259 cv
ef
314.716 558.027 mo
314.572 559.035 314.283 560.115 313.924 561.195 cv
317.451 559.899 320.979 558.747 324.435 558.027 cv
334.875 556.011 346.683 558.315 355.323 564.795 cv
364.827 571.851 362.163 584.307 353.092 589.779 cv
345.603 594.387 334.948 594.891 327.171 593.523 cv
319.827 592.155 313.059 588.483 305.716 586.971 cv
293.835 584.595 280.515 590.931 271.587 598.779 cv
271.083 599.211 264.099 605.691 267.699 606.915 cv
269.427 607.563 270.867 605.043 272.595 604.395 cv
278.931 602.019 285.555 599.067 292.323 597.411 cv
305.572 594.099 311.26 599.355 323.355 602.091 cv
344.811 606.843 380.667 604.899 382.539 576.747 cv
380.884 576.747 li
379.948 603.387 343.011 605.115 323.86 600.219 cv
311.835 597.123 305.355 591.723 291.82 595.323 cv
284.475 597.339 277.347 599.643 270.508 603.027 cv
277.851 593.883 293.691 586.827 305.355 589.275 cv
312.699 590.859 319.468 594.603 326.884 595.899 cv
335.236 597.339 346.468 596.763 354.459 591.939 cv
365.115 585.459 367.995 570.915 357.34 562.707 cv
348.483 555.795 333.003 553.779 324.075 555.363 cv
320.979 555.939 317.811 556.947 314.716 558.027 cv
cp
283.612 581.787 mo
291.243 579.483 300.099 577.611 308.092 579.699 cv
318.315 582.291 324.291 586.251 335.955 582.939 cv
342.508 581.067 344.163 578.043 343.011 575.091 cv
341.068 570.339 334.659 567.603 328.251 566.667 cv
320.763 565.587 315.147 567.819 309.243 570.483 cv
309.82 569.619 310.827 567.963 311.835 566.091 cv
317.019 563.931 322.276 562.563 329.043 563.499 cv
336.676 564.579 344.236 567.963 346.395 574.299 cv
348.627 580.635 343.444 584.163 337.035 586.035 cv
327.243 588.771 319.899 587.403 310.755 584.235 cv
301.612 581.139 293.907 582.147 284.691 584.955 cv
283.612 581.787 li
ef
354.099 560.475 mo
368.931 567.099 382.539 577.323 397.444 583.803 cv
428.26 597.051 449.716 565.659 477.075 556.083 cv
481.899 554.427 486.867 553.419 492.052 553.419 cv
508.035 553.419 519.844 565.371 529.995 576.171 cv
529.707 576.315 li
514.371 559.611 498.459 548.235 476.86 557.451 cv
452.523 567.819 425.523 598.563 396.795 585.531 cv
382.323 578.979 366.483 568.611 354.099 562.563 cv
354.099 560.475 li
ef
356.187 561.771 mo
359.86 563.571 363.603 565.011 367.347 566.019 cv
369.075 566.523 371.019 566.883 372.963 567.243 cv
379.371 568.179 386.787 568.107 393.052 566.019 cv
399.171 564.003 404.283 560.043 406.156 553.203 cv
406.371 552.483 406.587 551.619 406.659 550.755 cv
407.379 546.003 406.156 541.395 403.491 537.867 cv
400.827 534.267 396.795 531.675 392.043 530.955 cv
387.364 530.235 382.755 531.531 379.156 534.195 cv
375.555 536.859 373.035 540.819 372.315 545.571 cv
370.659 545.355 li
371.451 540.171 374.26 535.707 378.147 532.827 cv
382.107 529.947 387.147 528.507 392.331 529.299 cv
397.515 530.091 401.907 532.899 404.86 536.859 cv
407.74 540.747 409.107 545.787 408.315 550.971 cv
408.243 551.907 408.028 552.843 407.811 553.707 cv
405.723 561.123 400.251 565.443 393.555 567.603 cv
387.003 569.763 379.3 569.835 372.747 568.899 cv
370.659 568.539 368.716 568.179 366.915 567.675 cv
363.243 566.667 359.572 565.227 355.899 563.499 cv
356.187 561.771 li
f
464.979 563.499 mo
467.211 562.419 469.515 561.555 471.82 560.907 cv
472.827 560.619 473.979 560.331 475.203 560.187 cv
479.092 559.611 483.627 559.611 487.444 560.907 cv
491.187 562.131 494.283 564.507 495.435 568.683 cv
495.579 569.187 495.652 569.691 495.723 570.195 cv
496.156 573.075 495.364 575.883 493.78 578.043 cv
492.196 580.203 489.747 581.787 486.867 582.219 cv
483.988 582.651 481.179 581.859 478.948 580.275 cv
476.787 578.691 475.203 576.243 474.771 573.363 cv
473.763 573.507 li
474.267 576.675 475.995 579.339 478.371 581.067 cv
480.747 582.867 483.844 583.731 487.011 583.227 cv
490.179 582.795 492.844 581.067 494.572 578.691 cv
496.371 576.243 497.236 573.219 496.731 570.051 cv
496.659 569.475 496.587 568.971 496.444 568.395 cv
495.147 563.859 491.835 561.267 487.731 559.899 cv
483.771 558.603 479.092 558.531 475.059 559.179 cv
473.835 559.323 472.612 559.611 471.531 559.899 cv
469.3 560.547 467.068 561.411 464.835 562.419 cv
464.979 563.499 li
f
424.444 545.787 mo
412.924 558.891 405.508 577.323 385.059 575.739 cv
378.364 575.163 372.963 572.571 368.283 568.827 cv
368.355 568.251 368.427 567.603 368.572 567.027 cv
373.251 570.843 378.579 573.507 385.203 574.011 cv
404.283 575.523 412.059 558.027 423.147 545.139 cv
430.78 536.211 438.123 532.539 445.323 532.683 cv
448.347 534.627 li
440.716 533.331 432.867 536.355 424.444 545.787 cv
f
407.811 551.547 mo
409.899 548.667 412.203 546.003 414.652 543.627 cv
415.731 542.547 417.028 541.467 418.468 540.387 cv
422.931 537.003 428.619 533.979 434.307 532.971 cv
439.851 531.963 445.395 532.899 449.643 537.363 cv
450.147 537.867 450.652 538.443 451.083 539.019 cv
453.603 542.331 454.539 546.435 453.963 550.251 cv
453.459 554.067 451.444 557.739 448.132 560.259 cv
444.747 562.779 440.716 563.643 436.899 563.139 cv
433.011 562.563 429.411 560.619 426.891 557.235 cv
425.74 558.099 li
428.475 561.771 432.435 564.003 436.683 564.579 cv
440.86 565.155 445.323 564.147 448.995 561.411 cv
452.667 558.675 454.827 554.643 455.404 550.467 cv
456.052 546.219 455.043 541.827 452.236 538.155 cv
451.803 537.507 451.227 536.859 450.723 536.355 cv
446.043 531.459 440.068 530.451 434.019 531.531 cv
428.115 532.611 422.211 535.779 417.603 539.235 cv
416.092 540.315 414.795 541.467 413.643 542.547 cv
411.196 544.851 408.963 547.515 406.948 550.323 cv
407.811 551.547 li
f
528.771 574.371 mo
528.771 574.371 528.123 573.435 527.763 572.931 cv
527.404 572.355 526.539 570.771 526.323 569.475 cv
525.963 567.675 527.115 567.243 528.699 567.243 cv
529.851 567.171 530.931 567.459 531.075 568.755 cv
531.147 569.259 531.291 569.547 531.435 569.619 cv
532.011 569.763 532.731 568.683 534.028 569.475 cv
535.395 570.411 536.835 572.931 534.531 573.795 cv
533.307 574.299 530.643 574.659 530.139 574.659 cv
529.635 574.659 529.276 574.515 529.203 574.803 cv
529.059 575.091 529.203 575.379 529.707 575.163 cv
530.139 574.875 531.939 574.803 532.444 574.803 cv
536.043 574.515 537.196 578.115 534.171 578.907 cv
532.875 579.267 532.444 578.691 532.515 578.907 cv
532.515 579.123 533.019 579.627 532.371 580.275 cv
530.931 581.643 527.907 580.851 528.555 578.547 cv
528.844 577.539 528.988 576.315 528.915 575.883 cv
528.915 575.451 528.771 575.235 528.555 575.307 cv
528.339 575.379 528.052 578.331 527.907 579.051 cv
527.043 582.075 522.939 580.563 523.3 578.331 cv
523.444 577.611 523.587 577.539 523.444 577.467 cv
523.3 577.395 522.652 577.539 522.075 576.603 cv
520.851 574.371 522.795 571.275 525.243 573.003 cv
526.107 573.579 527.907 574.803 528.267 574.947 cv
528.627 575.163 528.699 575.091 528.844 574.875 cv
528.988 574.659 528.771 574.371 528.771 574.371 cv
ef
370.731 545.139 mo
370.731 545.139 371.811 543.987 372.387 543.411 cv
372.963 542.763 374.691 541.251 376.347 540.531 cv
378.508 539.595 379.515 540.963 379.948 542.907 cv
380.307 544.491 380.307 545.859 378.652 546.507 cv
378.003 546.723 377.643 546.939 377.643 547.155 cv
377.643 547.947 379.227 548.595 378.579 550.395 cv
377.787 552.555 374.979 555.075 373.107 552.339 cv
372.171 550.971 370.948 547.587 370.803 546.939 cv
370.659 546.363 370.731 545.859 370.3 545.787 cv
369.867 545.715 369.579 546.003 370.083 546.507 cv
370.515 547.011 371.092 549.315 371.307 550.035 cv
372.676 554.571 368.355 557.091 366.483 553.347 cv
365.691 551.835 366.267 551.115 365.979 551.187 cv
365.763 551.259 365.187 552.123 364.179 551.403 cv
362.019 549.963 362.236 545.859 365.26 546.003 cv
366.699 546.075 368.355 545.931 368.86 545.787 cv
369.435 545.571 369.652 545.355 369.508 545.139 cv
369.364 544.851 365.404 545.355 364.468 545.355 cv
360.364 545.139 361.156 539.379 364.107 539.235 cv
365.115 539.235 365.187 539.379 365.26 539.163 cv
365.26 538.875 364.899 538.155 365.979 537.147 cv
368.427 534.915 373.035 536.571 371.523 540.171 cv
371.019 541.395 370.011 544.059 369.867 544.635 cv
369.723 545.139 369.795 545.283 370.083 545.355 cv
370.371 545.427 370.731 545.139 370.731 545.139 cv
ef
471.747 571.635 mo
471.747 571.635 471.387 570.555 471.243 569.979 cv
471.028 569.331 470.595 567.603 470.74 566.307 cv
470.884 564.507 472.107 564.291 473.619 564.723 cv
474.771 565.011 475.707 565.587 475.491 566.883 cv
475.491 567.387 475.491 567.675 475.635 567.747 cv
476.139 568.035 477.147 567.171 478.156 568.323 cv
479.236 569.547 479.955 572.355 477.508 572.643 cv
476.211 572.787 473.547 572.427 473.043 572.283 cv
472.612 572.139 472.251 571.923 472.035 572.211 cv
471.891 572.427 471.963 572.715 472.468 572.643 cv
472.971 572.499 474.699 572.931 475.275 573.003 cv
478.803 573.723 478.948 577.467 475.78 577.467 cv
474.483 577.467 474.196 576.819 474.196 576.963 cv
474.123 577.179 474.483 577.827 473.691 578.331 cv
471.963 579.267 469.227 577.611 470.451 575.595 cv
471.028 574.659 471.459 573.579 471.531 573.147 cv
471.603 572.715 471.603 572.427 471.387 572.499 cv
471.171 572.499 470.019 575.307 469.659 575.955 cv
468.075 578.619 464.475 576.027 465.483 574.011 cv
465.844 573.363 465.988 573.363 465.844 573.219 cv
465.699 573.075 465.052 573.075 464.763 571.995 cv
464.187 569.547 466.851 567.099 468.795 569.403 cv
469.444 570.123 470.811 571.779 471.099 572.067 cv
471.387 572.355 471.531 572.355 471.747 572.211 cv
471.891 571.995 471.747 571.635 471.747 571.635 cv
ef
426.82 556.083 mo
426.82 556.083 427.971 556.011 428.619 555.867 cv
429.267 555.795 430.995 555.723 432.291 556.155 cv
434.019 556.659 433.948 557.883 433.227 559.251 cv
432.723 560.331 432.003 561.195 430.78 560.763 cv
430.275 560.547 429.988 560.475 429.844 560.619 cv
429.483 561.123 430.132 562.203 428.835 562.995 cv
427.395 563.859 424.444 564.003 424.731 561.483 cv
424.875 560.259 425.74 557.667 425.955 557.235 cv
426.171 556.803 426.459 556.515 426.243 556.299 cv
426.028 556.011 425.74 556.083 425.74 556.587 cv
425.74 557.091 425.019 558.747 424.803 559.251 cv
423.435 562.563 419.691 561.915 420.34 558.819 cv
420.627 557.595 421.275 557.451 421.132 557.379 cv
420.915 557.307 420.196 557.523 419.907 556.659 cv
419.331 554.715 421.491 552.411 423.219 553.995 cv
424.011 554.715 425.019 555.435 425.451 555.579 cv
425.811 555.723 426.099 555.723 426.099 555.507 cv
426.171 555.291 423.579 553.707 423.075 553.203 cv
420.771 551.115 424.011 548.091 425.74 549.459 cv
426.387 549.963 426.315 550.107 426.459 549.963 cv
426.603 549.819 426.747 549.243 427.899 549.171 cv
430.419 549.027 432.291 552.195 429.627 553.635 cv
428.763 554.067 426.891 555.147 426.531 555.363 cv
426.171 555.579 426.171 555.723 426.315 555.939 cv
426.459 556.155 426.82 556.083 426.82 556.083 cv
ef
430.059 601.299 mo
432.795 605.835 433.731 610.947 433.083 615.771 cv
433.156 611.739 432.147 607.635 429.915 603.891 cv
420.411 587.979 409.612 596.115 397.227 592.659 cv
389.379 590.499 383.691 584.451 381.603 577.179 cv
384.196 583.299 389.451 588.267 396.364 590.211 cv
408.963 593.739 420.627 585.315 430.059 601.299 cv
ef
297.867 529.659 mo
289.156 527.427 279.364 530.955 276.627 540.027 cv
275.26 545.211 277.059 551.403 282.531 553.131 cv
285.627 553.995 288.003 552.987 290.019 550.683 cv
291.603 548.811 292.035 551.403 291.676 552.771 cv
290.163 557.379 284.331 558.099 280.371 556.587 cv
272.092 553.059 270.723 542.907 274.755 535.563 cv
280.587 526.059 292.395 523.899 302.187 528.435 cv
314.716 534.915 319.107 549.387 314.572 562.275 cv
309.531 575.091 297.579 582.579 284.475 582.939 cv
284.26 582.651 284.115 582.291 283.899 581.931 cv
289.371 581.787 294.988 580.275 300.171 577.179 cv
309.028 571.635 314.499 562.419 314.355 551.835 cv
313.851 541.611 307.875 532.611 297.867 529.659 cv
ef
317.884 555.939 mo
321.196 549.963 324.795 547.731 326.092 544.563 cv
328.035 539.739 327.171 538.515 331.924 537.795 cv
332.355 537.723 332.787 537.795 333.291 537.867 cv
332.643 537.507 331.924 537.147 331.203 536.787 cv
326.092 534.483 321.844 537.147 319.899 542.115 cv
318.603 545.211 319.683 549.315 317.884 555.939 cv
ef
317.379 543.555 mo
317.884 538.227 319.755 535.491 319.683 532.827 cv
319.539 528.795 318.531 528.147 321.699 526.131 cv
321.988 525.987 322.347 525.915 322.707 525.771 cv
322.132 525.699 321.483 525.627 320.835 525.627 cv
316.444 525.627 314.283 528.867 314.427 533.043 cv
314.572 535.707 316.587 538.299 317.379 543.555 cv
ef
312.267 534.483 mo
311.115 531.027 311.619 528.795 310.827 527.139 cv
309.676 524.547 308.884 524.403 310.395 522.315 cv
310.468 522.099 310.683 522.027 310.899 521.811 cv
310.539 521.955 310.107 522.099 309.676 522.243 cv
306.939 523.395 306.435 525.987 307.587 528.579 cv
308.379 530.235 310.323 531.387 312.267 534.483 cv
ef
388.587 576.963 mo
395.427 577.827 398.811 580.347 402.196 580.419 cv
407.379 580.491 408.243 579.267 410.619 583.443 cv
410.835 583.803 410.907 584.235 411.052 584.667 cv
411.196 583.947 411.267 583.155 411.34 582.363 cv
411.627 576.747 407.523 573.795 402.267 573.723 cv
398.884 573.723 395.427 576.171 388.587 576.963 cv
ef
401.979 572.571 mo
407.451 572.139 410.475 573.579 413.139 573.003 cv
417.243 572.211 417.676 571.131 420.267 573.939 cv
420.483 574.227 420.627 574.515 420.771 574.875 cv
420.771 574.299 420.699 573.651 420.555 573.003 cv
419.907 568.611 416.236 567.027 412.059 567.819 cv
409.468 568.395 407.163 570.843 401.979 572.571 cv
ef
409.899 544.635 mo
411.052 537.867 409.612 533.907 410.619 530.667 cv
412.132 525.627 413.499 525.195 410.26 521.667 cv
409.971 521.379 409.539 521.163 409.179 520.947 cv
409.899 521.019 410.691 521.163 411.483 521.379 cv
416.884 522.747 418.539 527.499 417.028 532.539 cv
416.019 535.851 412.635 538.371 409.899 544.635 cv
ef
406.371 537.795 mo
404.716 532.611 405.364 529.299 404.211 526.851 cv
402.483 523.035 401.331 522.819 403.491 519.723 cv
403.707 519.435 403.995 519.219 404.283 519.003 cv
403.707 519.147 403.132 519.363 402.483 519.579 cv
398.379 521.307 397.659 525.195 399.387 529.083 cv
400.539 531.531 403.491 533.115 406.371 537.795 cv
ef
397.515 530.091 mo
395.068 526.851 394.707 524.331 393.34 522.891 cv
391.179 520.659 390.315 520.803 391.035 518.067 cv
391.107 517.779 391.323 517.563 391.468 517.347 cv
391.035 517.635 390.676 517.923 390.315 518.211 cv
387.795 520.443 388.3 523.395 390.459 525.627 cv
391.899 527.139 394.347 527.499 397.515 530.091 cv
ef
446.835 532.035 mo
452.236 532.467 455.331 531.027 457.995 531.603 cv
462.028 532.395 462.531 533.475 465.052 530.667 cv
465.267 530.451 465.411 530.091 465.555 529.731 cv
465.555 530.379 465.483 530.955 465.411 531.603 cv
464.691 535.995 461.019 537.651 456.915 536.787 cv
454.251 536.211 452.019 533.763 446.835 532.035 cv
ef
453.459 537.075 mo
457.563 539.307 460.515 539.307 462.387 540.675 cv
465.34 542.763 465.34 543.843 468.364 542.475 cv
468.652 542.331 468.867 542.115 469.083 541.899 cv
468.867 542.403 468.579 542.907 468.291 543.339 cv
466.132 546.579 462.676 546.579 459.723 544.419 cv
457.78 543.051 456.915 540.243 453.459 537.075 cv
ef
457.419 544.851 mo
459.508 548.235 461.667 549.387 462.459 551.187 cv
463.755 553.995 463.323 554.715 466.059 555.003 cv
466.347 555.003 466.563 554.931 466.851 554.859 cv
466.491 555.147 466.132 555.363 465.699 555.579 cv
462.747 557.091 460.227 555.651 458.931 552.843 cv
458.139 551.043 458.643 548.595 457.419 544.851 cv
ef
509.404 557.811 mo
514.156 558.171 516.82 556.947 519.123 557.451 cv
522.652 558.171 523.083 559.107 525.315 556.659 cv
525.459 556.443 525.603 556.155 525.747 555.867 cv
525.747 556.371 525.676 556.947 525.603 557.523 cv
524.955 561.339 521.787 562.707 518.187 561.987 cv
515.884 561.483 513.939 559.323 509.404 557.811 cv
ef
506.595 558.171 mo
509.187 562.131 509.404 565.011 510.988 566.811 cv
513.291 569.547 514.3 569.475 513.291 572.571 cv
513.147 572.859 513.003 573.147 512.787 573.363 cv
513.219 573.075 513.723 572.787 514.156 572.427 cv
517.179 570.051 516.82 566.595 514.444 563.787 cv
512.931 562.059 510.052 561.411 506.595 558.171 cv
ef
500.979 553.203 mo
506.523 552.267 509.26 550.107 511.995 550.035 cv
516.315 549.819 517.035 550.827 518.907 547.371 cv
519.052 547.083 519.123 546.651 519.196 546.291 cv
519.339 546.939 519.411 547.587 519.484 548.235 cv
519.844 552.771 516.603 555.291 512.211 555.435 cv
509.475 555.579 506.595 553.635 500.979 553.203 cv
ef
484.347 552.195 mo
490.683 549.603 493.347 546.291 496.587 545.427 cv
501.627 544.059 502.78 544.995 504.075 540.387 cv
504.147 539.955 504.147 539.523 504.147 539.019 cv
504.435 539.739 504.723 540.459 504.939 541.251 cv
506.667 546.579 503.499 550.467 498.387 551.835 cv
495.075 552.699 491.115 551.187 484.347 552.195 cv
ef
419.043 589.635 mo
425.884 589.347 429.483 587.187 432.867 587.475 cv
438.052 587.907 438.844 589.131 441.579 585.243 cv
441.795 584.883 441.939 584.451 442.083 584.019 cv
442.156 584.811 442.156 585.603 442.156 586.395 cv
441.939 592.011 437.619 594.531 432.291 594.099 cv
428.907 593.811 425.74 591.003 419.043 589.635 cv
ef
267.34 578.259 mo
268.059 578.907 267.699 580.491 267.196 581.283 cv
264.891 584.019 260.643 582.867 258.411 580.563 cv
256.755 578.763 255.963 576.387 255.963 573.939 cv
256.395 563.859 269.068 559.251 276.483 565.155 cv
276.627 565.227 277.419 565.875 277.276 566.019 cv
277.276 566.091 276.844 565.947 276.771 565.947 cv
274.468 565.011 271.875 563.931 269.283 564.363 cv
268.203 564.579 270.075 564.795 270.291 564.867 cv
278.427 566.307 283.612 573.435 283.179 581.643 cv
282.82 587.907 279.291 593.091 274.323 596.835 cv
273.963 597.051 273.603 597.339 273.243 597.627 cv
272.451 598.275 273.028 598.131 273.676 597.915 cv
274.539 597.627 275.404 597.195 276.196 596.691 cv
288.003 589.419 289.3 571.347 276.771 564.003 cv
270.508 560.619 262.875 561.411 258.196 567.027 cv
255.099 571.131 254.595 576.891 258.123 580.779 cv
260.499 583.227 265.107 584.451 267.483 581.355 cv
268.203 580.419 268.563 578.979 267.699 578.043 cv
267.267 577.539 266.187 577.107 265.612 577.539 cv
265.107 577.899 264.963 578.547 265.323 579.123 cv
265.683 579.627 266.404 579.771 266.907 579.411 cv
267.196 579.123 267.411 578.691 267.34 578.259 cv
ef
487.371 31.4189 mo
484.419 29.6189 481.468 27.8191 478.515 26.019 cv
469.659 20.5471 460.659 12.699 449.86 12.1951 cv
443.236 11.907 437.404 15.5789 435.603 21.5549 cv
433.011 30.3391 440.139 38.4749 448.924 39.051 cv
458.86 39.627 471.387 34.2271 480.82 32.571 cv
483.052 32.2109 485.211 31.7791 487.371 31.4189 cv
cp
481.107 34.803 mo
471.676 36.0989 458.931 40.7791 449.068 39.771 cv
440.283 38.835 433.083 30.4829 435.028 21.699 cv
436.468 15.075 442.731 10.7551 449.86 10.6829 cv
461.236 10.6111 471.315 17.595 480.243 23.9309 cv
485.86 27.8909 497.163 32.355 500.547 38.979 cv
494.283 33.5789 488.595 33.8669 481.107 34.803 cv
ef
511.78 40.1311 mo
497.74 31.3469 484.924 19.395 467.499 25.2271 cv
449.355 31.3469 436.035 50.9309 413.211 37.0349 cv
404.643 31.8511 396.364 23.2109 386.572 20.907 cv
379.156 19.251 369.579 20.7629 365.187 27.675 cv
360.364 35.3789 364.395 47.7629 373.179 50.6431 cv
379.587 52.803 383.547 48.627 388.371 45.0271 cv
383.547 48.699 379.731 52.947 373.107 50.8591 cv
364.035 48.051 359.86 35.3789 364.683 27.387 cv
369.147 20.259 379.011 18.3149 386.643 20.115 cv
396.939 22.563 405.291 29.979 413.716 36.0271 cv
436.971 49.2029 447.915 29.907 467.499 23.2109 cv
485.355 17.0911 498.747 29.259 513.291 38.043 cv
513.867 38.4749 513.939 39.2668 513.579 39.843 cv
513.147 40.4189 512.355 40.491 511.78 40.1311 cv
ef
474.411 16.6589 mo
470.955 16.5149 467.499 17.019 464.187 17.811 cv
469.515 16.155 475.059 15.4351 480.603 16.2991 cv
486.364 17.1628 491.691 19.5391 496.587 22.563 cv
491.547 19.8269 486.219 17.595 480.531 16.875 cv
478.444 16.5869 476.427 16.5149 474.411 16.6589 cv
cp
485.283 18.8909 mo
483.699 18.3149 482.115 17.811 480.459 17.3789 cv
479.019 17.0911 477.579 16.875 476.211 16.731 cv
477.652 16.731 479.019 16.875 480.459 17.0911 cv
486.291 17.9548 491.763 20.4031 496.731 23.499 cv
499.683 25.3708 502.491 27.387 505.227 29.5471 cv
502.347 27.531 499.539 25.6589 496.515 23.9309 cv
492.988 21.843 489.243 20.043 485.283 18.8909 cv
cp
495.364 24.4351 mo
495.579 24.5789 495.795 24.6511 496.011 24.7949 cv
502.419 28.6111 508.323 33.363 514.083 38.043 cv
508.539 33.0029 502.707 28.179 496.371 24.219 cv
493.276 22.3469 490.035 20.6909 486.652 19.467 cv
489.747 20.835 492.627 22.563 495.364 24.4351 cv
f
409.035 48.915 mo
407.667 46.6829 405.652 44.9548 403.491 43.5869 cv
401.043 42.147 398.307 41.1389 395.572 40.491 cv
392.763 39.915 389.884 39.771 387.075 40.1311 cv
384.411 40.491 381.891 41.283 379.659 42.7949 cv
375.699 45.459 371.379 47.835 366.699 49.0588 cv
363.459 49.9231 359.931 50.2109 356.619 49.4189 cv
353.955 48.771 351.579 47.4031 349.635 45.459 cv
347.907 43.5869 346.683 41.355 346.035 38.907 cv
345.387 36.459 345.315 33.8669 345.82 31.3469 cv
346.395 28.8269 347.547 26.4509 349.275 24.5071 cv
351.219 22.3469 353.74 20.835 356.547 19.9709 cv
360.147 18.8909 364.035 18.8191 367.78 19.323 cv
381.459 21.1951 391.395 29.835 403.059 36.2429 cv
408.459 39.123 414.291 40.9231 420.411 40.563 cv
429.052 39.9871 437.043 35.739 444.028 30.915 cv
450.219 26.739 456.771 22.7791 463.899 20.3311 cv
469.156 18.603 474.699 17.811 480.243 18.603 cv
483.771 19.179 487.156 20.3311 490.395 21.843 cv
488.884 20.979 487.444 20.259 485.86 19.6111 cv
484.059 19.0349 482.187 18.603 480.315 18.3149 cv
474.699 17.4509 469.083 18.2429 463.827 20.043 cv
456.627 22.491 450.075 26.4509 443.884 30.699 cv
436.899 35.4509 428.979 39.699 420.411 40.2749 cv
414.291 40.635 408.531 38.835 403.203 36.0271 cv
391.468 29.6189 381.531 20.979 367.78 19.1069 cv
364.035 18.603 360.147 18.675 356.475 19.7551 cv
353.667 20.6909 351.075 22.2029 349.132 24.363 cv
347.404 26.3789 346.179 28.7551 345.676 31.3469 cv
345.099 33.8669 345.171 36.459 345.82 38.907 cv
346.468 41.427 347.763 43.731 349.491 45.603 cv
351.435 47.5471 353.884 48.915 356.619 49.563 cv
359.931 50.355 363.459 50.0669 366.771 49.2029 cv
371.451 47.979 375.771 45.603 379.731 42.8669 cv
381.963 41.427 384.483 40.635 387.075 40.2749 cv
389.884 39.915 392.763 40.0588 395.499 40.635 cv
398.307 41.283 400.971 42.291 403.347 43.803 cv
403.491 43.803 403.563 43.875 403.635 43.947 cv
405.723 45.2429 407.667 46.8989 409.035 48.915 cv
cp
479.163 17.595 mo
473.907 17.0911 468.652 17.8831 463.612 19.6111 cv
456.411 22.0588 449.86 26.019 443.595 30.3391 cv
436.683 35.019 428.907 39.2668 420.411 39.915 cv
414.364 40.2749 408.676 38.4749 403.347 35.667 cv
391.612 29.259 381.603 20.6909 367.78 18.8191 cv
364.035 18.3149 360.075 18.387 356.404 19.5391 cv
353.523 20.4749 350.931 21.9871 348.988 24.219 cv
347.187 26.2351 345.963 28.6829 345.459 31.2749 cv
344.884 33.7949 344.955 36.459 345.603 38.979 cv
346.323 41.499 347.547 43.875 349.347 45.7471 cv
351.364 47.7629 353.811 49.1311 356.547 49.7791 cv
359.931 50.571 363.459 50.283 366.771 49.3469 cv
371.523 48.123 375.844 45.7471 379.803 43.011 cv
381.963 41.499 384.555 40.707 387.075 40.3469 cv
389.884 39.9871 392.763 40.1311 395.499 40.7791 cv
397.659 41.2109 399.676 41.8591 401.619 42.8669 cv
399.676 41.9309 397.587 41.283 395.499 40.8511 cv
392.763 40.3469 389.884 40.2029 387.147 40.635 cv
384.627 40.9949 382.107 41.7869 380.019 43.2991 cv
376.059 46.1069 371.667 48.5549 366.915 49.8511 cv
363.531 50.7869 359.931 51.147 356.404 50.355 cv
353.523 49.707 350.931 48.2668 348.915 46.179 cv
346.971 44.2351 345.603 41.8591 344.884 39.1951 cv
344.163 36.531 344.092 33.7949 344.595 31.1311 cv
345.171 28.323 346.395 25.803 348.267 23.6431 cv
350.355 21.2668 353.092 19.6111 356.115 18.603 cv
359.931 17.3789 363.963 17.3069 367.924 17.739 cv
381.891 19.5391 392.043 28.179 403.995 34.5869 cv
409.035 37.251 414.508 38.907 420.267 38.5471 cv
428.547 37.8989 436.107 33.7229 442.803 29.115 cv
447.771 25.6589 452.955 22.491 458.499 19.9709 cv
460.083 19.467 461.667 18.9631 463.251 18.531 cv
468.435 17.1628 473.835 16.6589 479.163 17.595 cv
f
345.459 28.395 mo
342.147 32.7151 337.971 36.603 333.867 39.5549 cv
332.787 40.3469 331.563 41.1389 330.196 41.9309 cv
325.948 44.3069 320.619 46.251 315.579 46.395 cv
310.683 46.6111 306.003 45.1709 302.835 40.8511 cv
302.475 40.3469 302.115 39.771 301.827 39.1951 cv
300.028 36.0271 299.74 32.427 300.676 29.187 cv
301.539 25.875 303.771 22.9949 306.939 21.1951 cv
310.107 19.467 313.707 19.1069 316.948 20.043 cv
320.26 20.979 323.139 23.1389 324.939 26.3789 cv
326.019 25.731 li
324.075 22.2029 320.907 19.8269 317.307 18.8191 cv
313.78 17.811 309.82 18.1709 306.291 20.115 cv
302.835 22.0588 300.459 25.2271 299.451 28.8269 cv
298.371 32.355 298.731 36.3149 300.676 39.843 cv
301.035 40.4189 301.395 40.9949 301.827 41.571 cv
305.283 46.323 310.323 47.907 315.652 47.6909 cv
320.907 47.4749 326.379 45.459 330.771 43.011 cv
332.211 42.291 333.508 41.427 334.587 40.635 cv
338.835 37.5391 342.579 33.5789 345.963 29.187 cv
345.459 28.395 li
f
402.844 4.49097 mo
407.307 1.10693 413.716 .74707 417.531 5.28296 cv
419.619 7.875 420.052 11.835 417.387 14.2109 cv
415.803 15.4351 414.219 15.4351 412.491 14.6431 cv
411.123 13.9949 411.483 15.5071 412.059 16.2271 cv
414.075 18.459 417.531 17.5229 419.475 15.6511 cv
423.364 11.6189 421.635 5.427 417.531 2.25903 cv
411.844 -1.77295 404.572 -.116943 400.107 4.9231 cv
394.563 11.6909 395.572 21.051 401.331 27.3149 cv
408.459 34.5149 419.331 35.0911 427.612 29.6189 cv
431.211 27.0989 434.451 23.427 435.891 19.251 cv
436.179 18.531 435.603 19.6829 435.603 19.7551 cv
431.283 28.179 422.86 33.5071 413.211 32.283 cv
406.803 31.2749 401.404 27.3149 398.884 21.2668 cv
396.652 15.291 397.875 8.66699 402.844 4.49097 cv
ef
481.683 33.5071 mo
481.755 38.187 482.907 42.939 485.139 47.4749 cv
492.267 60.8669 508.899 67.9949 522.508 59.7151 cv
530.931 54.3149 535.971 42.147 528.699 33.7949 cv
526.323 31.1311 522.723 29.4031 519.123 30.4109 cv
516.099 31.3469 514.156 34.3708 514.948 37.5391 cv
515.884 40.635 512.427 41.0669 510.339 39.627 cv
505.587 36.0989 508.251 29.187 512.283 26.3069 cv
520.131 20.979 529.995 25.731 534.028 33.4351 cv
540.579 46.8269 531.147 61.155 517.683 64.8269 cv
503.355 68.283 489.747 60.4351 483.484 47.4031 cv
481.539 42.939 480.531 38.3311 480.459 33.7949 cv
481.683 33.5071 li
ef
392.547 54.603 mo
392.043 53.9548 390.747 54.3149 390.171 54.8191 cv
387.939 56.6909 388.948 60.075 390.747 61.875 cv
392.26 63.2429 394.132 63.8191 396.147 63.7471 cv
404.283 63.387 407.955 53.0911 403.132 47.115 cv
403.059 46.9709 402.555 46.395 402.411 46.467 cv
402.34 46.467 402.483 46.8269 402.483 46.8989 cv
403.203 48.771 404.139 50.7869 403.78 52.875 cv
403.635 53.739 403.419 52.2271 403.419 52.083 cv
402.123 45.531 396.364 41.427 389.74 41.7869 cv
384.627 42.147 380.523 45.0271 377.499 49.0588 cv
377.283 49.3469 377.139 49.635 376.924 49.9231 cv
376.347 50.571 376.491 50.0669 376.635 49.635 cv
376.851 48.915 377.211 48.1951 377.643 47.5471 cv
383.404 37.9709 398.019 36.8191 403.995 46.8269 cv
406.803 51.8669 406.227 58.1311 401.691 61.947 cv
398.451 64.467 393.771 64.9709 390.603 62.0911 cv
388.587 60.147 387.579 56.4749 390.028 54.459 cv
390.82 53.8831 391.971 53.595 392.763 54.3149 cv
393.196 54.675 393.483 55.5391 393.196 56.043 cv
392.907 56.4749 392.331 56.5471 391.899 56.259 cv
391.468 55.9709 391.395 55.395 391.612 55.0349 cv
391.827 54.675 392.187 54.531 392.547 54.603 cv
ef
386.572 41.6431 mo
393.267 39.627 400.468 39.4829 407.092 41.8591 cv
421.851 47.259 423.003 60.6511 426.676 74.187 cv
423.147 60.5071 422.427 47.259 407.307 41.427 cv
400.251 38.6909 392.547 38.835 385.347 41.1389 cv
386.572 41.6431 li
ef
425.236 73.5391 mo
426.099 74.259 427.395 74.043 428.115 73.179 cv
428.763 72.3149 428.619 71.0911 427.755 70.3708 cv
426.891 69.6511 425.595 69.7949 424.948 70.6589 cv
424.227 71.595 424.371 72.8191 425.236 73.5391 cv
ef
423.291 67.9231 mo
424.444 68.7869 426.099 68.6431 426.963 67.491 cv
427.899 66.3391 427.683 64.6829 426.531 63.8191 cv
425.379 62.8831 423.723 63.0989 422.86 64.251 cv
421.924 65.3311 422.139 66.9871 423.291 67.9231 cv
ef
420.123 59.8591 mo
421.635 61.083 423.867 60.8669 425.019 59.355 cv
426.243 57.843 425.955 55.6111 424.444 54.459 cv
423.003 53.2351 420.771 53.4509 419.547 54.9631 cv
418.395 56.4749 418.612 58.707 420.123 59.8591 cv
ef
299.74 36.0989 mo
299.092 34.5149 298.227 33.0029 297.147 31.491 cv
291.891 25.083 282.891 22.7791 275.691 27.387 cv
269.931 31.2749 267.411 39.1951 271.803 45.0271 cv
274.683 48.699 280.515 50.427 284.043 46.6829 cv
285.123 45.459 285.771 43.731 285.123 42.147 cv
284.547 40.7791 283.035 40.0588 281.667 40.563 cv
280.3 41.1389 279.939 39.5549 280.444 38.5471 cv
281.884 36.1709 285.123 37.1069 286.635 38.7629 cv
289.515 42.147 287.787 46.8989 284.404 49.1311 cv
278.572 52.731 271.587 49.0588 269.283 43.083 cv
267.123 36.675 270.003 30.051 275.619 26.595 cv
283.683 22.0588 293.115 25.083 298.227 32.499 cv
298.875 33.5789 299.451 34.731 299.884 35.811 cv
299.74 36.0989 li
ef
466.563 73.7551 mo
461.092 72.8909 456.34 68.499 456.988 62.667 cv
457.419 59.355 459.939 56.259 463.539 56.5471 cv
465.483 56.835 466.635 57.9871 467.211 59.7869 cv
467.716 61.2271 468.579 59.8591 468.652 58.9949 cv
468.939 56.043 465.771 54.1709 463.179 54.0989 cv
457.491 54.0989 454.251 59.571 454.827 64.7551 cv
455.835 71.595 462.099 75.699 468.795 75.4829 cv
477.508 74.835 483.555 67.635 484.059 59.0669 cv
484.347 48.9871 477.219 40.707 467.499 38.5471 cv
463.251 37.6111 458.355 37.8269 454.395 39.699 cv
453.676 39.9871 454.827 39.627 454.971 39.627 cv
463.971 36.8909 473.691 39.2668 479.451 47.043 cv
483.196 52.4431 484.059 58.9949 481.395 65.043 cv
478.659 70.803 473.043 74.4749 466.563 73.7551 cv
ef
342.364 33.7229 mo
339.052 36.3149 336.531 39.5549 335.019 43.4431 cv
333.579 47.979 333.219 53.595 336.603 57.3391 cv
338.619 59.355 341.499 60.291 344.092 58.707 cv
344.019 58.707 li
343.803 58.635 343.587 58.563 343.444 58.563 cv
339.123 57.123 336.028 52.947 335.307 48.5549 cv
334.659 42.8669 337.827 37.467 342.147 33.939 cv
342.147 33.939 345.747 31.2029 342.364 33.7229 cv
ef
332.139 41.355 mo
328.323 43.2271 325.227 45.8909 323.068 49.491 cv
320.763 53.667 319.323 59.0669 321.915 63.387 cv
323.499 65.7629 326.092 67.2029 328.971 66.1951 cv
328.971 66.1951 328.971 66.1951 328.899 66.123 cv
328.755 66.051 328.539 65.979 328.395 65.907 cv
324.435 63.675 322.132 58.9949 322.347 54.531 cv
322.78 48.843 326.884 44.0911 331.78 41.499 cv
331.851 41.499 335.884 39.4829 332.139 41.355 cv
ef
325.515 24.075 mo
327.171 24.075 328.468 25.4431 328.468 27.0271 cv
328.468 28.6111 327.171 29.979 325.515 29.979 cv
323.931 29.979 322.563 28.6111 322.563 27.0271 cv
322.563 25.4431 323.931 24.075 325.515 24.075 cv
ef
318.243 46.6829 mo
315.291 47.043 312.555 48.123 310.251 50.0669 cv
307.659 52.2991 305.427 55.6829 306.147 59.2109 cv
306.652 61.2271 308.092 62.811 310.251 62.811 cv
310.251 62.739 li
310.107 62.595 310.035 62.5229 309.963 62.4509 cv
307.803 60.0029 307.371 56.259 308.523 53.3069 cv
310.179 49.563 314.068 47.3311 318.028 46.7551 cv
318.099 46.7551 321.267 46.323 318.243 46.6829 cv
ef
49.6833 31.4189 mo
52.6355 29.6189 55.5872 27.8191 58.6116 26.019 cv
67.4675 20.5471 76.3953 12.699 87.2673 12.1951 cv
93.8914 11.907 99.7234 15.5789 101.451 21.5549 cv
104.043 30.3391 96.9875 38.4749 88.1316 39.051 cv
78.2673 39.627 65.6672 34.2271 56.3074 32.571 cv
54.0754 32.2109 51.9153 31.7791 49.6833 31.4189 cv
cp
56.0193 34.803 mo
65.4514 36.0989 78.1956 40.7791 88.0593 39.771 cv
96.8435 38.835 104.043 30.4829 102.099 21.699 cv
100.587 15.075 94.3953 10.7551 87.2673 10.6829 cv
75.8914 10.6111 65.7395 17.595 56.8835 23.9309 cv
51.2673 27.8909 39.9634 32.355 36.5073 38.979 cv
42.8435 33.5789 48.5315 33.8669 56.0193 34.803 cv
ef
25.3474 40.1311 mo
39.3875 31.3469 52.1316 19.395 69.6272 25.2271 cv
87.7712 31.3469 101.019 50.9309 123.915 37.0349 cv
132.483 31.8511 140.691 23.2109 150.483 20.907 cv
157.899 19.251 167.548 20.7629 171.939 27.675 cv
176.763 35.3789 172.659 47.7629 163.948 50.6431 cv
157.539 52.803 153.579 48.627 148.756 45.0271 cv
153.579 48.699 157.323 52.947 163.948 50.8591 cv
173.092 48.051 177.267 35.3789 172.371 27.387 cv
167.979 20.259 158.115 18.3149 150.411 20.115 cv
140.115 22.563 131.763 29.979 123.411 36.0271 cv
100.083 49.2029 89.2112 29.907 69.6272 23.2109 cv
51.7712 17.0911 38.3794 29.259 23.8354 38.043 cv
23.2593 38.4749 23.1155 39.2668 23.5474 39.843 cv
23.9795 40.4189 24.7715 40.491 25.3474 40.1311 cv
ef
62.7156 16.6589 mo
66.1711 16.5149 69.6272 17.019 72.9392 17.811 cv
67.6116 16.155 62.0676 15.4351 56.5232 16.2991 cv
50.7634 17.1628 45.4353 19.5391 40.4673 22.563 cv
45.5076 19.8269 50.9075 17.595 56.5955 16.875 cv
58.6116 16.5869 60.6995 16.5149 62.7156 16.6589 cv
cp
51.7712 18.8909 mo
53.3552 18.3149 55.0115 17.811 56.6672 17.3789 cv
58.1072 17.0911 59.4753 16.875 60.9153 16.731 cv
59.4753 16.731 58.0354 16.875 56.5955 17.0911 cv
50.7634 17.9548 45.3635 20.4031 40.3235 23.499 cv
37.4434 25.3708 34.6355 27.387 31.8994 29.5471 cv
34.7073 27.531 37.5874 25.6589 40.6113 23.9309 cv
44.1394 21.843 47.8835 20.043 51.7712 18.8909 cv
cp
41.7634 24.4351 mo
41.5474 24.5789 41.3313 24.6511 41.1155 24.7949 cv
34.6355 28.6111 28.8035 33.363 22.9714 38.043 cv
28.5874 33.0029 34.3474 28.179 40.7554 24.219 cv
43.8513 22.3469 47.0193 20.6909 50.4036 19.467 cv
47.3792 20.835 44.4993 22.563 41.7634 24.4351 cv
f
128.092 48.915 mo
129.459 46.6829 131.475 44.9548 133.635 43.5869 cv
136.083 42.147 138.747 41.1389 141.555 40.491 cv
144.364 39.915 147.243 39.771 150.052 40.1311 cv
152.643 40.491 155.236 41.283 157.468 42.7949 cv
161.427 45.459 165.747 47.835 170.427 49.0588 cv
173.667 49.9231 177.123 50.2109 180.508 49.4189 cv
183.099 48.771 185.548 47.4031 187.491 45.459 cv
189.219 43.5869 190.444 41.355 191.092 38.907 cv
191.74 36.459 191.811 33.8669 191.236 31.3469 cv
190.731 28.8269 189.508 26.4509 187.851 24.5071 cv
185.907 22.3469 183.315 20.835 180.579 19.9709 cv
176.979 18.8909 173.092 18.8191 169.347 19.323 cv
155.667 21.1951 145.731 29.835 133.995 36.2429 cv
128.595 39.123 122.835 40.9231 116.643 40.563 cv
108.003 39.9871 100.083 35.739 93.0994 30.915 cv
86.9075 26.739 80.3552 22.7791 73.2273 20.3311 cv
67.8992 18.603 62.3552 17.811 56.8835 18.603 cv
53.3552 19.179 49.9714 20.3311 46.7312 21.843 cv
48.1711 20.979 49.6833 20.259 51.2673 19.6111 cv
53.0676 19.0349 54.9392 18.603 56.8113 18.3149 cv
62.3552 17.4509 67.9714 18.2429 73.2996 20.043 cv
80.4993 22.491 87.0515 26.4509 93.2434 30.699 cv
100.227 35.4509 108.075 39.699 116.716 40.2749 cv
122.835 40.635 128.523 38.835 133.924 36.0271 cv
145.659 29.6189 155.595 20.979 169.347 19.1069 cv
173.092 18.603 176.979 18.675 180.652 19.7551 cv
183.459 20.6909 185.979 22.2029 187.995 24.363 cv
189.723 26.3789 190.875 28.7551 191.451 31.3469 cv
192.028 33.8669 191.955 36.459 191.307 38.907 cv
190.587 41.427 189.364 43.731 187.563 45.603 cv
185.691 47.5471 183.171 48.915 180.508 49.563 cv
177.196 50.355 173.667 50.0669 170.355 49.2029 cv
165.676 47.979 161.355 45.603 157.323 42.8669 cv
155.163 41.427 152.643 40.635 150.052 40.2749 cv
147.243 39.915 144.364 40.0588 141.555 40.635 cv
138.82 41.283 136.156 42.291 133.707 43.803 cv
133.635 43.803 133.563 43.875 133.419 43.947 cv
131.331 45.2429 129.459 46.8989 128.092 48.915 cv
cp
57.9631 17.595 mo
63.2195 17.0911 68.4753 17.8831 73.4436 19.6111 cv
80.6433 22.0588 87.2673 26.019 93.5315 30.3391 cv
100.371 35.019 108.219 39.2668 116.716 39.915 cv
122.763 40.2749 128.451 38.4749 133.707 35.667 cv
145.515 29.259 155.523 20.6909 169.275 18.8191 cv
173.092 18.3149 177.052 18.387 180.723 19.5391 cv
183.531 20.4749 186.123 21.9871 188.139 24.219 cv
189.939 26.2351 191.092 28.6829 191.667 31.2749 cv
192.243 33.7949 192.171 36.459 191.451 38.979 cv
190.803 41.499 189.508 43.875 187.707 45.7471 cv
185.763 47.7629 183.315 49.1311 180.579 49.7791 cv
177.196 50.571 173.667 50.283 170.283 49.3469 cv
165.603 48.123 161.283 45.7471 157.251 43.011 cv
155.092 41.499 152.572 40.707 149.979 40.3469 cv
147.171 39.9871 144.364 40.1311 141.555 40.7791 cv
139.468 41.2109 137.379 41.8591 135.508 42.8669 cv
137.451 41.9309 139.468 41.283 141.627 40.8511 cv
144.364 40.3469 147.171 40.2029 149.979 40.635 cv
152.499 40.9949 154.948 41.7869 157.035 43.2991 cv
161.068 46.1069 165.459 48.5549 170.139 49.8511 cv
173.595 50.7869 177.196 51.147 180.723 50.355 cv
183.531 49.707 186.196 48.2668 188.211 46.179 cv
190.156 44.2351 191.523 41.8591 192.243 39.1951 cv
192.963 36.531 193.035 33.7949 192.531 31.1311 cv
191.955 28.323 190.659 25.803 188.86 23.6431 cv
186.771 21.2668 184.035 19.6111 181.011 18.603 cv
177.196 17.3789 173.092 17.3069 169.132 17.739 cv
155.236 19.5391 145.083 28.179 133.132 34.5869 cv
128.019 37.251 122.619 38.907 116.787 38.5471 cv
108.579 37.8989 101.019 33.7229 94.3235 29.115 cv
89.3552 25.6589 84.1711 22.491 78.6272 19.9709 cv
77.0432 19.467 75.4592 18.9631 73.8035 18.531 cv
68.6912 17.1628 63.2913 16.6589 57.9631 17.595 cv
f
191.667 28.395 mo
194.979 32.7151 199.156 36.603 203.26 39.5549 cv
204.34 40.3469 205.563 41.1389 206.931 41.9309 cv
211.179 44.3069 216.508 46.251 221.475 46.395 cv
226.444 46.6111 231.123 45.1709 234.291 40.8511 cv
234.652 40.3469 234.939 39.771 235.3 39.1951 cv
237.099 36.0271 237.387 32.427 236.451 29.187 cv
235.515 25.875 233.355 22.9949 230.187 21.1951 cv
227.019 19.467 223.419 19.1069 220.107 20.043 cv
216.867 20.979 213.988 23.1389 212.187 26.3789 cv
211.107 25.731 li
213.052 22.2029 216.219 19.8269 219.747 18.8191 cv
223.347 17.811 227.307 18.1709 230.763 20.115 cv
230.835 20.115 li
230.763 20.115 li
234.291 22.0588 236.667 25.2271 237.676 28.8269 cv
238.683 32.355 238.323 36.3149 236.379 39.843 cv
236.092 40.4189 235.659 40.9949 235.3 41.571 cv
231.844 46.323 226.803 47.907 221.475 47.6909 cv
216.219 47.4749 210.747 45.459 206.283 43.011 cv
204.915 42.291 203.619 41.427 202.468 40.635 cv
198.291 37.5391 194.548 33.5789 191.092 29.187 cv
191.667 28.395 li
f
134.211 4.49097 mo
129.82 1.10693 123.34 .74707 119.523 5.28296 cv
117.508 7.875 117.003 11.835 119.74 14.2109 cv
121.251 15.4351 122.907 15.4351 124.563 14.6431 cv
126.003 13.9949 125.572 15.5071 125.068 16.2271 cv
123.052 18.459 119.523 17.5229 117.652 15.6511 cv
113.763 11.6189 115.491 5.427 119.595 2.25903 cv
125.283 -1.77295 132.555 -.116943 137.019 4.9231 cv
142.563 11.6909 141.555 21.051 135.795 27.3149 cv
128.667 34.5149 117.723 35.0911 109.444 29.6189 cv
105.844 27.0989 102.676 23.427 101.163 19.251 cv
100.948 18.531 101.451 19.6829 101.523 19.7551 cv
105.844 28.179 114.267 33.5071 123.915 32.283 cv
130.323 31.2749 135.723 27.3149 138.243 21.2668 cv
140.404 15.291 139.251 8.66699 134.211 4.49097 cv
ef
55.4436 33.5071 mo
55.2996 38.187 54.2195 42.939 51.9153 47.4749 cv
44.7874 60.8669 28.2273 67.9949 14.5474 59.7151 cv
6.12329 54.3149 1.15527 42.147 8.42749 33.7949 cv
10.8035 31.1311 14.4033 29.4031 18.0034 30.4109 cv
21.0273 31.3469 22.9714 34.3708 22.1794 37.5391 cv
21.2434 40.635 24.6274 41.0669 26.7153 39.627 cv
31.4673 36.0989 28.8035 29.187 24.8435 26.3069 cv
16.9954 20.979 7.13135 25.731 3.02734 33.4351 cv
-3.52466 46.8269 5.97949 61.155 19.3713 64.8269 cv
33.7715 68.283 47.3792 60.4351 53.6433 47.4031 cv
55.5872 42.939 56.5232 38.3311 56.5955 33.7949 cv
55.4436 33.5071 li
ef
144.579 54.603 mo
145.083 53.9548 146.379 54.3149 146.955 54.8191 cv
149.187 56.6909 148.179 60.075 146.379 61.875 cv
144.867 63.2429 142.924 63.8191 140.979 63.7471 cv
132.844 63.387 129.171 53.0911 133.995 47.115 cv
134.068 46.9709 134.572 46.395 134.716 46.467 cv
134.787 46.467 134.643 46.8269 134.643 46.8989 cv
133.924 48.771 132.988 50.7869 133.347 52.875 cv
133.491 53.739 133.707 52.2271 133.707 52.083 cv
134.931 45.531 140.763 41.427 147.387 41.7869 cv
152.427 42.147 156.603 45.0271 159.555 49.0588 cv
159.771 49.3469 159.988 49.635 160.203 49.9231 cv
160.707 50.571 160.635 50.0669 160.491 49.635 cv
160.203 48.915 159.844 48.1951 159.483 47.5471 cv
153.723 37.9709 139.107 36.8191 133.059 46.8269 cv
130.323 51.8669 130.899 58.1311 135.435 61.947 cv
138.676 64.467 143.355 64.9709 146.523 62.0911 cv
148.539 60.147 149.548 56.4749 147.028 54.459 cv
146.307 53.8831 145.083 53.595 144.364 54.3149 cv
143.931 54.675 143.643 55.5391 143.931 56.043 cv
144.219 56.4749 144.795 56.5471 145.227 56.259 cv
145.659 55.9709 145.731 55.395 145.444 55.0349 cv
145.227 54.675 144.867 54.531 144.579 54.603 cv
ef
150.555 41.6431 mo
143.86 39.627 136.659 39.4829 130.035 41.8591 cv
115.275 47.259 114.123 60.6511 110.451 74.187 cv
113.907 60.5071 114.699 47.259 129.747 41.427 cv
136.875 38.6909 144.579 38.835 151.707 41.1389 cv
150.555 41.6431 li
ef
111.891 73.5391 mo
110.955 74.259 109.731 74.043 109.011 73.179 cv
108.291 72.3149 108.508 71.0911 109.371 70.3708 cv
110.236 69.6511 111.459 69.7949 112.179 70.6589 cv
112.899 71.595 112.756 72.8191 111.891 73.5391 cv
ef
113.835 67.9231 mo
112.683 68.7869 111.028 68.6431 110.163 67.491 cv
109.227 66.3391 109.444 64.6829 110.523 63.8191 cv
111.676 62.8831 113.331 63.0989 114.267 64.251 cv
115.132 65.3311 114.988 66.9871 113.835 67.9231 cv
ef
116.931 59.8591 mo
115.491 61.083 113.26 60.8669 112.035 59.355 cv
110.884 57.843 111.099 55.6111 112.612 54.459 cv
114.123 53.2351 116.355 53.4509 117.508 54.9631 cv
118.731 56.4749 118.444 58.707 116.931 59.8591 cv
ef
237.387 36.0989 mo
238.035 34.5149 238.899 33.0029 239.979 31.491 cv
245.236 25.083 254.163 22.7791 261.435 27.387 cv
267.196 31.2749 269.643 39.1951 265.251 45.0271 cv
262.444 48.699 256.612 50.427 253.083 46.6829 cv
252.003 45.459 251.355 43.731 252.003 42.147 cv
252.579 40.7791 254.092 40.0588 255.459 40.563 cv
256.827 41.1389 257.187 39.5549 256.612 38.5471 cv
255.243 36.1709 251.931 37.1069 250.419 38.7629 cv
247.612 42.147 249.34 46.8989 252.723 49.1311 cv
258.555 52.731 265.539 49.0588 267.771 43.083 cv
270.003 36.675 267.123 30.051 261.435 26.595 cv
253.444 22.0588 243.939 25.083 238.899 32.499 cv
238.251 33.5789 237.676 34.731 237.171 35.811 cv
237.387 36.0989 li
ef
70.4915 73.7551 mo
76.0354 72.8909 80.7874 68.499 80.1394 62.667 cv
79.7073 59.355 77.1155 56.259 73.5872 56.5471 cv
71.5715 56.835 70.4915 57.9871 69.9153 59.7869 cv
69.4114 61.2271 68.5476 59.8591 68.4753 58.9949 cv
68.1873 56.043 71.3552 54.1709 73.9475 54.0989 cv
79.5632 54.0989 82.8035 59.571 82.2996 64.7551 cv
81.2913 71.595 75.0276 75.699 68.3313 75.4829 cv
59.6194 74.835 53.5715 67.635 52.9954 59.0669 cv
52.7073 48.9871 59.9075 40.707 69.5554 38.5471 cv
73.8752 37.6111 78.6995 37.8269 82.7312 39.699 cv
83.4514 39.9871 82.2996 39.627 82.1555 39.627 cv
73.1555 36.8909 63.4353 39.2668 57.6755 47.043 cv
53.9314 52.4431 52.9954 58.9949 55.6594 65.043 cv
58.4675 70.803 64.0833 74.4749 70.4915 73.7551 cv
ef
194.691 33.7229 mo
198.075 36.3149 200.595 39.5549 202.035 43.4431 cv
203.548 47.979 203.907 53.595 200.451 57.3391 cv
198.508 59.355 195.627 60.291 193.035 58.707 cv
193.035 58.707 193.035 58.707 193.107 58.707 cv
193.323 58.635 193.468 58.563 193.683 58.563 cv
197.931 57.123 201.099 52.947 201.82 48.5549 cv
202.468 42.8669 199.3 37.467 194.979 33.939 cv
194.907 33.939 191.379 31.2029 194.691 33.7229 cv
ef
204.988 41.355 mo
208.803 43.2271 211.827 45.8909 214.059 49.491 cv
216.364 53.667 217.803 59.0669 215.139 63.387 cv
213.627 65.7629 210.963 67.2029 208.156 66.1951 cv
208.156 66.1951 208.156 66.1951 208.227 66.123 cv
208.371 66.051 208.515 65.979 208.731 65.907 cv
212.691 63.675 214.924 58.9949 214.78 54.531 cv
214.347 48.843 210.243 44.0911 205.275 41.499 cv
205.203 41.499 201.243 39.4829 204.988 41.355 cv
ef
211.612 24.075 mo
209.955 24.075 208.659 25.4431 208.659 27.0271 cv
208.659 28.6111 209.955 29.979 211.612 29.979 cv
213.196 29.979 214.491 28.6111 214.491 27.0271 cv
214.491 25.4431 213.196 24.075 211.612 24.075 cv
ef
218.811 46.6829 mo
221.835 47.043 224.572 48.123 226.875 50.0669 cv
229.468 52.2991 231.699 55.6829 230.907 59.2109 cv
230.475 61.2271 229.035 62.811 226.875 62.811 cv
226.875 62.739 li
226.948 62.595 227.092 62.5229 227.163 62.4509 cv
229.323 60.0029 229.755 56.259 228.603 53.3069 cv
226.875 49.563 222.988 47.3311 219.099 46.7551 cv
219.028 46.7551 215.86 46.323 218.811 46.6829 cv
ef
237.099 233.235 mo
234.939 238.347 236.163 244.755 241.491 247.275 cv
244.515 248.571 248.475 248.067 250.059 244.899 cv
250.851 243.099 250.491 241.515 249.267 240.075 cv
248.26 238.923 249.844 238.851 250.635 239.283 cv
253.371 240.579 253.3 244.251 252.003 246.483 cv
249.052 251.307 242.643 251.163 238.539 247.995 cv
233.283 243.531 233.068 236.043 236.74 230.499 cv
241.924 223.443 251.211 222.075 258.699 226.107 cv
264.963 229.779 268.347 236.115 268.635 242.883 cv
268.347 242.955 268.132 243.027 267.915 243.171 cv
267.771 240.939 267.34 238.635 266.475 236.331 cv
263.884 230.355 258.771 226.179 252.219 225.243 cv
245.955 224.595 239.835 227.403 237.099 233.235 cv
ef
270.291 242.739 mo
270.652 237.771 270.219 232.803 268.924 227.835 cv
266.043 218.619 259.995 208.971 249.988 206.811 cv
244.227 205.803 238.468 207.675 236.019 213.291 cv
236.019 213.291 236.019 213.291 236.163 213.219 cv
236.523 213.147 236.884 213.003 237.243 212.859 cv
246.028 210.051 256.179 213.291 262.515 219.699 cv
268.132 226.035 270.291 234.387 269.931 242.667 cv
270.075 242.667 270.147 242.667 270.291 242.739 cv
ef
223.419 237.699 mo
218.236 234.315 212.619 232.515 206.427 232.443 cv
199.515 232.587 191.667 234.891 188.139 241.443 cv
186.34 245.187 186.483 249.507 189.867 252.315 cv
189.867 252.315 189.867 252.315 189.867 252.243 cv
189.867 251.955 189.867 251.667 189.867 251.379 cv
189.652 244.755 193.899 238.419 199.587 235.323 cv
207.075 231.579 216.075 233.235 222.988 237.411 cv
223.059 237.483 228.531 241.083 223.419 237.699 cv
ef
229.035 241.803 mo
224.572 238.923 219.676 237.339 214.347 237.267 cv
208.371 237.411 201.531 239.355 198.508 245.043 cv
196.924 248.283 197.068 252.027 200.019 254.475 cv
200.019 254.475 200.019 254.475 200.019 254.403 cv
200.019 254.115 200.019 253.899 200.019 253.683 cv
199.803 247.923 203.475 242.451 208.371 239.715 cv
214.924 236.547 222.627 237.987 228.676 241.587 cv
228.747 241.659 233.499 244.755 229.035 241.803 cv
ef
231.988 243.891 mo
228.243 241.875 224.139 241.011 219.891 241.371 cv
215.139 241.947 209.811 244.035 207.867 248.787 cv
206.86 251.523 207.219 254.547 209.811 256.275 cv
209.811 256.203 li
209.811 255.987 209.74 255.771 209.74 255.627 cv
209.092 251.019 211.612 246.339 215.355 243.819 cv
220.323 240.723 226.587 241.299 231.699 243.747 cv
231.771 243.747 235.803 245.835 231.988 243.891 cv
ef
237.459 246.483 mo
237.459 246.411 li
235.731 244.755 233.787 242.955 231.699 241.227 cv
229.612 239.499 227.379 237.699 225.003 236.043 cv
212.763 227.259 197.068 219.627 182.379 217.827 cv
180.508 217.611 178.491 217.539 176.331 217.539 cv
169.563 217.539 161.931 218.763 155.667 221.859 cv
149.619 224.955 144.939 229.851 144.075 237.195 cv
143.931 238.059 143.931 238.923 143.931 239.859 cv
143.931 244.899 145.948 249.435 149.26 252.747 cv
152.572 256.059 157.107 258.147 162.147 258.147 cv
162.147 258.075 li
162.147 258.147 li
167.187 258.147 171.795 256.059 175.035 252.747 cv
178.347 249.435 180.435 244.899 180.435 239.859 cv
182.163 239.859 li
182.163 245.403 179.931 250.371 176.331 254.043 cv
172.731 257.643 167.691 259.875 162.147 259.875 cv
156.603 259.875 151.635 257.643 148.035 254.043 cv
144.364 250.371 142.132 245.403 142.132 239.859 cv
142.132 238.851 142.203 237.915 142.275 236.979 cv
143.283 228.915 148.323 223.587 154.875 220.275 cv
161.355 217.035 169.347 215.739 176.331 215.739 cv
178.491 215.739 180.652 215.883 182.523 216.099 cv
197.572 217.899 213.555 225.675 226.011 234.603 cv
228.459 236.331 230.691 238.131 232.851 239.859 cv
234.939 241.659 236.884 243.459 238.683 245.187 cv
237.459 246.483 li
f
144.508 232.515 mo
138.82 234.963 132.915 236.763 127.156 237.411 cv
125.643 237.627 123.915 237.699 122.187 237.699 cv
116.643 237.699 110.307 236.691 105.196 234.171 cv
100.227 231.651 96.3396 227.547 95.6194 221.499 cv
95.5476 220.851 95.4753 220.059 95.4753 219.339 cv
95.4753 215.163 97.2034 211.419 99.9392 208.683 cv
102.603 206.019 106.419 204.291 110.523 204.291 cv
114.699 204.291 118.444 206.019 121.179 208.683 cv
123.844 211.419 125.572 215.163 125.572 219.339 cv
127.011 219.339 li
127.011 214.803 125.139 210.627 122.187 207.675 cv
119.236 204.723 115.059 202.851 110.523 202.851 cv
105.988 202.851 101.884 204.723 98.8596 207.675 cv
95.9075 210.627 94.0354 214.803 94.0354 219.339 cv
94.0354 220.131 94.1072 220.923 94.1794 221.715 cv
94.9714 228.339 99.1472 232.731 104.548 235.467 cv
109.875 238.131 116.427 239.139 122.187 239.139 cv
123.988 239.139 125.716 239.067 127.3 238.851 cv
133.203 238.203 138.82 236.475 144.652 233.955 cv
144.508 232.515 li
f
103.251 234.459 mo
99.2913 232.731 95.1873 231.507 91.1555 231.003 cv
90.0754 230.931 88.9236 230.859 87.6995 230.859 cv
83.8835 230.859 79.4915 231.507 75.9631 233.307 cv
72.4353 235.107 69.7712 237.843 69.2673 242.091 cv
69.1956 242.595 69.1956 243.099 69.1956 243.603 cv
69.1956 246.483 70.3474 249.075 72.2195 250.947 cv
74.1633 252.891 76.7556 254.043 79.6355 254.043 cv
82.5154 254.043 85.1072 252.891 86.9792 250.947 cv
88.9236 249.075 90.0754 246.483 90.0754 243.603 cv
91.0833 243.603 li
91.0833 246.771 89.7874 249.651 87.6995 251.667 cv
85.6833 253.755 82.8035 255.051 79.6355 255.051 cv
76.4675 255.051 73.5872 253.755 71.5715 251.667 cv
69.4832 249.651 68.1873 246.771 68.1873 243.603 cv
68.1873 243.027 68.1873 242.523 68.2595 241.947 cv
68.8352 237.339 71.7156 234.315 75.4592 232.443 cv
79.2034 230.571 83.7395 229.851 87.6995 229.851 cv
88.9954 229.851 90.1472 229.923 91.2996 229.995 cv
95.3313 230.499 99.5793 231.795 103.612 233.523 cv
103.251 234.459 li
f
20.5955 243.675 mo
21.3154 243.891 22.1794 243.027 22.3953 242.307 cv
23.2593 239.643 20.6675 237.411 18.2913 236.907 cv
16.4194 236.619 14.6194 237.123 13.0354 238.131 cv
6.69946 242.595 9.00342 252.747 15.9153 255.123 cv
15.9873 255.123 16.7073 255.411 16.7793 255.267 cv
16.8513 255.195 16.5635 254.979 16.5635 254.979 cv
14.9795 253.827 13.1794 252.603 12.4595 250.803 cv
12.0994 250.011 13.0354 251.091 13.1074 251.235 cv
17.4275 255.843 24.1953 256.203 29.3794 252.531 cv
32.0435 250.587 33.7715 247.851 34.7073 244.755 cv
34.7073 243.963 34.7073 243.171 34.7793 242.379 cv
35.8594 233.739 41.0435 227.187 48.1711 222.507 cv
65.1633 212.715 85.3235 217.395 99.1472 229.851 cv
98.6433 230.643 li
85.5393 219.123 66.5315 214.515 50.4036 223.299 cv
42.4114 228.195 36.2913 236.115 37.0835 245.835 cv
37.7314 250.371 40.0354 254.763 44.5715 256.347 cv
47.8835 257.211 50.9792 255.627 54.0032 254.403 cv
53.2112 255.123 52.3474 255.843 51.4832 256.491 cv
48.6033 258.651 45.8674 259.587 42.3394 258.147 cv
38.0913 256.131 35.8594 252.171 35.0674 247.779 cv
31.9714 255.195 23.2593 259.803 15.3394 255.771 cv
10.5154 253.107 7.7793 247.779 9.50732 242.451 cv
10.8035 238.779 14.3313 235.971 18.2913 236.691 cv
20.8833 237.195 23.6194 239.643 22.6113 242.523 cv
22.3235 243.315 21.5315 244.179 20.5234 244.035 cv
20.0193 243.963 19.2993 243.387 19.3713 242.883 cv
19.3713 242.379 19.7314 242.019 20.2354 242.019 cv
20.7395 242.019 21.0994 242.451 21.0994 242.883 cv
21.0994 243.243 20.8833 243.531 20.5955 243.675 cv
ef
125.068 221.715 mo
125.139 221.427 117.795 220.491 115.203 224.307 cv
113.548 226.899 111.459 227.259 109.948 226.683 cv
108.435 226.107 107.427 225.171 107.427 225.171 cv
107.427 225.171 109.156 228.843 113.26 228.987 cv
116.643 229.059 123.627 225.171 125.068 221.715 cv
ef
125.355 222.075 mo
125.355 222.075 124.995 222.939 123.915 224.091 cv
120.315 228.195 113.619 231.939 108.795 227.691 cv
108.003 227.043 107.572 226.611 107.572 226.611 cv
107.572 226.611 110.163 231.075 113.043 231.795 cv
115.924 232.515 116.427 232.227 116.427 232.227 cv
116.427 232.227 114.627 233.667 116.283 234.315 cv
120.891 236.187 124.851 228.483 125.283 223.299 cv
125.355 222.075 li
ef
126.003 219.555 mo
126.579 219.555 127.011 220.059 127.011 220.635 cv
127.011 221.139 126.579 221.643 126.003 221.643 cv
125.427 221.643 124.995 221.139 124.995 220.635 cv
124.995 220.059 125.427 219.555 126.003 219.555 cv
ef
181.156 236.763 mo
181.875 236.763 182.523 237.411 182.523 238.131 cv
182.523 238.851 181.875 239.499 181.156 239.499 cv
180.364 239.499 179.787 238.851 179.787 238.131 cv
179.787 237.411 180.364 236.763 181.156 236.763 cv
ef
180.579 236.403 mo
180.652 236.691 173.307 237.555 170.787 233.739 cv
169.059 231.147 167.043 230.859 165.459 231.363 cv
163.948 231.939 162.939 232.947 162.939 232.947 cv
162.939 232.947 164.667 229.203 168.771 229.131 cv
172.156 229.059 179.211 232.947 180.579 236.403 cv
ef
180.867 235.971 mo
180.867 235.971 180.508 235.107 179.427 233.955 cv
175.827 229.923 169.132 226.179 164.307 230.355 cv
163.515 231.075 163.083 231.507 163.083 231.507 cv
163.083 231.507 165.676 227.043 168.555 226.251 cv
171.435 225.531 171.939 225.819 171.939 225.819 cv
171.939 225.819 170.139 224.451 171.867 223.731 cv
176.475 221.931 180.364 229.563 180.795 234.819 cv
180.867 235.971 li
ef
90.4353 240.939 mo
91.0833 240.939 91.5872 241.515 91.5872 242.163 cv
91.5872 242.811 91.0833 243.315 90.4353 243.315 cv
89.7874 243.315 89.2112 242.811 89.2112 242.163 cv
89.2112 241.515 89.7874 240.939 90.4353 240.939 cv
ef
90.2195 240.651 mo
90.3635 240.795 85.2512 241.443 83.4514 238.779 cv
82.2996 237.051 80.8596 236.763 79.7795 237.195 cv
78.6995 237.555 78.0515 238.275 78.0515 238.275 cv
78.0515 238.275 79.2034 235.683 82.0833 235.611 cv
84.4592 235.539 89.2834 238.275 90.2195 240.651 cv
ef
90.5076 240.363 mo
90.5076 240.363 90.2195 239.787 89.4993 238.923 cv
86.9792 236.115 82.3713 233.523 78.9875 236.475 cv
78.4114 236.907 78.1233 237.267 78.1233 237.267 cv
78.1233 237.267 79.9236 234.171 81.9392 233.595 cv
83.9553 233.091 84.2434 233.307 84.2434 233.307 cv
84.2434 233.307 83.0193 232.371 84.1711 231.867 cv
87.4114 230.571 90.1472 235.899 90.4353 239.499 cv
90.5076 240.363 li
ef
92.9553 223.659 mo
91.8752 222.219 90.4353 219.771 90.5793 217.251 cv
90.7952 213.363 89.5715 210.483 88.2034 208.035 cv
86.8352 205.587 87.4832 203.283 88.5632 201.987 cv
89.6433 200.691 90.5076 200.187 90.5076 200.187 cv
90.5076 200.187 86.2595 201.699 84.7473 206.595 cv
82.7312 213.219 86.9792 220.347 92.3792 223.947 cv
92.5955 223.875 92.7395 223.731 92.9553 223.659 cv
ef
141.123 236.907 mo
140.043 238.347 138.603 240.723 138.747 243.243 cv
138.963 247.203 137.74 250.011 136.371 252.531 cv
135.003 254.979 135.652 257.283 136.731 258.579 cv
137.811 259.875 138.603 260.379 138.603 260.379 cv
138.603 260.379 134.355 258.795 132.915 253.971 cv
130.899 247.347 135.147 240.219 140.548 236.619 cv
140.691 236.691 140.907 236.835 141.123 236.907 cv
ef
45.2195 230.427 mo
44.4275 232.011 43.4915 234.747 44.2112 237.123 cv
45.2913 240.939 44.6433 243.963 43.7795 246.699 cv
42.9875 249.363 44.1394 251.523 45.4353 252.531 cv
46.7312 253.611 47.6672 253.899 47.6672 253.899 cv
47.6672 253.899 43.2034 253.251 40.7554 248.787 cv
37.3713 242.739 40.0354 234.891 44.5715 230.211 cv
44.7874 230.283 45.0032 230.355 45.2195 230.427 cv
ef
159.988 221.643 mo
158.619 222.795 156.603 224.811 156.171 227.259 cv
155.523 231.147 153.652 233.667 151.78 235.683 cv
149.835 237.771 149.979 240.219 150.699 241.731 cv
151.419 243.243 152.139 243.891 152.139 243.891 cv
152.139 243.891 148.395 241.371 148.035 236.331 cv
147.603 229.419 153.364 223.515 159.483 221.211 cv
159.627 221.355 159.844 221.499 159.988 221.643 cv
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 11.0.0
%%For: (pingwin pingwin) (home)
%%Title: (Page rules II [Converted].eps)
%%CreationDate: 4/2/2015 8:55 AM
%AI9_DataStream
%Gb!R&CN!e+FX9#>"mA/^(hb&b=KM+M3"PhK7+lI#Vkeo:G&-"o$ET_u.^mE/K#p]co]mmUhJ;L!pKluLQ=jH9FPAG94SP@jmb"_N
%i^Z60`P^G305k3Go8AAgs6O290#hb<W69@hmctC5n=q*(fA#3=]K(9"Eo)NS%plEf0X[h1b;tm$rFEGiqhUmCo&9*3roVb[kDp./
%Rl>8g*pt'jhu)j#(O+Jd5IQ(Aq60(Ms*/m7o8aECpX`1WbN3-Kq+H)(TANn'F7Z^GqesW,p$-Mjp>sQ^mIrOmIs'ZJrJgd!qPF/\
%`Qck1CL?sjIJrH_s3H2`^\kEr_>`>:n`,,th9@mfDk8#RT5G`WrS(-;oZr#ppijK_H%#)[d,*A\L$.2T?MsBVlg)$(:Yqb&I&d/.
%dn_UcMZ<S5\$$s#A%u4$V^D<:&0J@\[tR*In#%E0Im/&T?hj*S@_O8iS^0P#-,),0"3YX\CA[1N58_^1J=lhn)Mqo#rQY<,]Bc@6
%S&f;N01pR's0!JXdpi>>%[Z34ZrW6SV-MMenNXK@s3&"BHoreQk2#FLT71tR?Z3)ShE5h=J,]68`U.$d>h6SpCh9@9GAlqf*rl&d
%m1Ul6kJ,`!#(HO?o&`\&qtWJ5?"7(8;6g/G-[pRDps%&^>G;XPD_V8W]@[>dgMbs*^UX:2k-=g)DdVD7qYe=H=@7SLPkedl4u%Cg
%cbm>!9T+C0]@`uuk4D:D*l$9QD2Weu(>s*QDnii2oeSIArUQR%DdVY,>c3M)s-GVBEpN^;fDi(7XiF452m9`Us5DMOX+u%\0GaSI
%IaM3bX1#D(*kpUJjra;8m@/$$ZaD.Tni%*H#Ign`Ors\]2u[aMQ_30KD?'B,Nt6/9s6A.d%mU!.O+70"iN&H+c``tTD;4^Fe]Tm9
%\Y.1H]^VOMl&4;?&meo%^Ac6p?hng8q!,>lr8!EPhgBe@qhKs=GX!;.5K.9hm/(]bjWj<bF!#)qpc#nalMBr:p7'+gfAGF+SpUJn
%ruN8.cYl&0ZX4\g@%R8TnNY"5c@>BCmpH.0^4"Nim)9cZDkCpQ7h>?tU%C"Pq"FPA`-Chp]-fh>rCq2grSEOE8cRc"]:6Eff/G,h
%a`[L=s1!N*rCMY5h>LCcGIMMYF%eVdr:d,%WpR=:XuZ2gqnHLus5re9QYj5)]BQ4XrTHHBp\\XtItR$6qX+jVgh6Zce\e"cfj>O[
%CT[S;*_?>)PDdb9F+&OZnTXAg05d7o^PR`#Mr3NDouGB#Xs*V3`&]FJn8h.[YOCu4Ir#)W^RFLb(ZjZ.(]X>M_o9e@[XW)-[26Mm
%hu!>_[JStPJ,"YScWYDZ+4g/:hlc&_++hhBn!]QTnO@s+eS4&=cYNEU5Pt\;E:OO3++F!;c[V(LN#2M:_u6=Co4Ws+qrNn:4(iaW
%r#^?<i`6#6jR$NVdeA0@NRm(cbNl&a[m0`[1C:8enE90>UN?D/*<grfoo%_7,M)nknc/EJO109(`DcZN2]"^XoDRLGp;Bbs^L"=U
%ob/mZ++<t_"7ND]hWfsrij3""%j1cIds&"gc_(16naZJOB&)9+?,(2=plB+-q!W+>]BdMll`]_a9"t,X[,h,3OT3)9j6uT=_md+!
%0->+=l)E,Hh*'Ie^;o!3hEIXDJ*6k*GL(EsB5arH.C!Ob'B].pkhA\HnZu#)m>q:N=)Yf8]RBDDE<#\$H+IqjoUdfhlH41sA,l2-
%GG!O6[R/l!^O(g?r7ra'e:7MPB]IIjno&>d5!!Xih3p,aIUC-tn'#iGjR2!ra.&Efd*Yo*YMM2Zs66(R-iUkf)h3k(q#9`[:EQj*
%@<hD:TDin-dl2K[L]>&J;X;^H%rWO#2\mS7*d@%JjkkL!V%MS^lutD?GMfa/nD/F$c]<9CdG+,"YQ"HIYJ.]\rT;j10SPju?EWUu
%I4tJp:-@.E5Ma&$qY&tJX7LWt:1aE2p5aWHY'XM=4>gX@`Qd"1*[Uc<]m'#"0-21KDd>Koa7nohDC=6>/nap.m'64*f8VCl@\SE`
%q=@sQj$a)X/-^Uoiqh1aDm-pd\bQ*]p"S)r/),OCq;]_hS&]_3(Vd`\o@(ZC]Y&[(rp'4Fp.=OtWHGB6M>cH1n`d*0lc5>.#KoMp
%(QVukIe;$+*cIe-++<pb>V:.Ke+WcRVlgINIC*q17j%`qga5"1mUT&PJZ$QS=)VDP[n/c2f=lM,o&@p]?Z'o$2#dBklg*.]O6p<C
%hqhKM0oj=@.MbhYp?g>p[ndgT]70?no6C-Kchq@o8PQ9V5Pk&tRr:ObPMp1,BOtK)[`>PCDHd'YbYS-*dslbq*/TI%^2FS6Q9+fm
%?f/N/I='k"oA;URnD%bieu=Xa/]suLhZ#Xm-&'7mVEcrAC'n:]^:cXGo(Ci+RoA#=op\0\^r%.;IJpJCM15H)Mk@b4HAHR"jY1fR
%DRfI&Rf6t2rq,$kiMeE&YHI>s?QG`+q4liSZ+IVrF`[*&[brMsqW@&4iK'ZJ`qMTD\@[1F(+E]eIr:b:)l/6Rnrq\R#7p9@*a^/Q
%S%>MWd,EsRjitt]k2bO.h`O%"FoS&6iNlL*T09o9HunPgUGIQ$m()F`Y9':@7m;Q<:T8PVhONfRo-`G03dg:^G3H>^nab/[H2m1p
%^V9'[bNIa>Sp5MYo'OJhGk9=,*$.l)f#\S-(a"%_iDj(^:VP+<r&HspX^9IEcTU!hmth7;L\Eq-GkU?)T7?EVP<HMd?MbrAa:`/^
%277Mr@&JlXTD]O:"udWLj5#M#G^XmCT01ZDnB"!c++EDpg[i[PrdO:O=#]"nL&^T5loKFWX'9C7Fn7bu^Nk$EpOSBRrT`Y<c.fGY
%I&MC:k2kFba0-R_R69(HJ*t#g5-bcl*VaR@s*/g=rV4Dl%psg7km$[U5QBBH5bIQ@e&1KIJ,$17jZ*b<H+Ku8S!Rb>s+KS4Q@Hd3
%g%%p`ppfGKlMqHbXn1*9is1o4*dm=;U*"aUFYcd2?[_nBd>pNch0Ju;l\ussSEbI5rUT)dS>!X.pq4JPVuPAd=&6;$GN[AKo1%H-
%p%@_.#IcFZI"NF,`u[9*B:aJ:nG)SFW>Y#1TKTcbnBdZBiRJ1BW'BqNmN?X+5-OYW\a-ksbBKTTi3se3L3W(DnXFdX#9VB`Si[/G
%bj1$C[i\apGcXX=lYdjds72;m*Zf6hC&5)7I(4O9$qoh8PSS`/@@aI&+.b['PON7`$(kRID/"ICU;/!\h*0Y%^HO_ShtOX'jnau:
%l;O:&prJVZ#JX`$p4H/T]QnSqc)Zncqs2jpQf_n.E96#WDjuK.F7V]JC!ZbB';%>nUOD'C+'1,_WG_Q/eQA_^[8qYD(,_u0LIU+N
%bA$kC&,K47*'a:ESf46jE-H&5A\?gUg\.BSX*_OMhtq(OC<r>#m?s;I(\8gKfq/$C(ZN]g*?TY,qW.rGMWac^I.7*<CsQMThE@?L
%3-uJ]j6#kko(^$:p^b7?kR+SdqaNZUmr$>Ylb)JsO5LNUW.(nI0As&tkAWZG]Y/7\id99Q+&`E*c)c;?F+a3MI\>G?oZ\Ir?T5t#
%lAm#eKeOjB7el-A?N.EhY>B5jpG$/=mAYU1r/6KjT)-)iE>Un3!rb.$3Dh8>;6pd'@ed9ZHG"]`'?,F_Z'k>I3:S4(4+-`T*_lFK
%H_Um`5(`sPml[lL54lg@,7+;('k.DLN#hia.!G)/YoUL:6NNa_O+P&kaDf&9m4/QIi%WKF4C<VE[GOOb)G61=C65Q&g1pr6Y)%G\
%0?0mPVHP,[+F`k2%tF*/s#Em8s.&E1rb#sFdsgkOM\iR5A$i4b/n4h+^\VNr-tbdBZMi,didb5'p=)mDrEl;MctX[&n>@B-i3!!.
%=#_'TOk5(WL#fV-bC,lSMm<bX9<HsfI1rdN\/9tbU9*tJel;.G9UFKpN>H/q0B]n6(K9"UiS=F-D"Vi)b&hXRIQ,T>lSq5`rcN,Y
%0oarL3k)TXL[27RdFn9;3_o(ubC2G[l\6LQ$X`gS_W>ejF8O+c>V>WX[BIf@_ebC!b@Op*<6]cE['[R6Mg]_P0$CIb1g\HX5U,Ss
%q_Hi4$le+-lcpR%rGigW\$iuD%N)P+?G<gkNhp&W;]4sWqkp\.72Zn[-JjF5:$k'D(r`mhf#>uCM[s.IVTY[+WrI+?m8q(VP_("E
%><=Ib`dP?:f@GK'O1M^;=S?p"Y05H5k2kHSV>Y*%f!f!<gZ?*:5!)DO?WuT888n9Fqngd9WqE(PmFQ$Ebr^C)hRK>eD:$:G:ubVg
%[bbs%d5J^;Bn*R&Z#0?#[A&mD5f7cm<fBaGBgYd21iKcJ<(a\@VD^3s2d<gDeUB<#A+hgRqhQ?=^0KCknlD#:\HLqO9Uq\8[W](H
%[CL2h4`?^6]rSiZ:2%GU?Z'G]#5CeBP>>)'eN2BmG0It3?7l<a[&e*e+_YfHMLF2"n<$jcbZnG%YSZ:n8fOLQBqN<:_9fRJ>k_OA
%feu/9o!Sdlk%J86@qo(`7@U`r'VF%&(M$;.lsFIbh.LTFnpgo_g-i"ZK(^,;OVjF)D;Uk"O.d$CeCM%8[WR"#YoVuD2m6gRi^[Rj
%*(F-4D=J.=+^!;'518T5hp\#RXnu^kfX&##-G0ARX`_#<RC<-r4Z$N+=MpV/XL=^;E(q?R&6-j*N4Wdis4[mt=s)KkDjoddN@1G:
%T.5HH)7J)I^NCNrak+/u&N!TAfYq\U1#Gf8XUi,Wg[Bln>dT2qrtdc*4kG/5<6[DSe^V[MfK>eld+3lR+`B_('Hc=GC&_VQ[;n:9
%d;?"VTNG6%#&OX>=g^'?R+Zf(-^s>)eQlPrUU+g@?-Wh4\ZM="?prE)@QJiU8)H%<8_Z_Rg,;qi:2RTRK52rD)d$"8c.:!\/@:G@
%J?fVJD/Ek;CklJ<dl:iuW7C8oFhi*'ZX'UmoZG2*<8_#\9<n+j>OcbR`6hWNm&Of;c9uY@^,EerHXL,q?o^Ym-+@`$WjfC2rEusU
%Pr>-*K7]AK/^s@<2Yjm_2>9g8f^<Hlhe[SFZ,Y@23WjG[QeH%p*ArmS2)_D,<8*tA)4P#:9f$fNr?oW@W2Gcu<?#hF^i:4G[g#',
%FrX]G3;Am#)/B+.9YMsLE,^hr'DFSqdPg#+D*qfSKT5=_ZGGi'%S9llY)WCUC(amS9qn&.E&>O@0EAP\+>O,PT!N8sO&GW#8)>N/
%]H+b%>'1HQXu"d0<6Lb7o'X*KBnm$j%+FP]PVr[A]NjfuIKO/eXqtqlgTJL0Bp#"/?C8s_IB8KXZAJ,mTEWdICU"'Zs#Dq/C44%s
%J0Jjr`Qr6LiF7FI/`lJ0't,onqPkKL>>W[!S"GT`<paQM*E-d$'YbLOjM]3YU"#YNZ#&1+[o%"cg(3_^2f,D"T<td4F/S<X#+Ht]
%%p0M4?%.a@dB_6Xf:XPpBE]sOIJ!eR-Q?l`<YIYZ:E/\ah4&7n&,t,OL.PPR:%+&\a4ORS=bg#r2W*2e<1BJ"/$!BGVZ0nlq&$P@
%>M&C4Qq>KJ2'$GZO-+;K"!*i]B;'$CP?^8K;H)+l5C51%HJ,[K1>"LW(9NVj27!so[KtYPD2R1n,<jN[hKM[mH`"s>p9aYO7fWG:
%:0:lbm7#F%C#XuXNYq(r)JE5\U?qB:7T[iJ]rcMUfuS65EX:BggDOLEcJY^JRPq13ZMM!dCV0(0BL?T.AnpY\N"7IM1E<:#J';lI
%&$8WNb,s.odNob/A_XdC[%?!dQn>Q>/no7r,6LQ[LTfrg;_,;cD5?0=CjSJA*e\*n4)5<=g=;DOD[:0SS)/[5[bkq>k@#M"bL=2s
%?rqjIN2m;a\06@Sp?-6]T"f`ND1drgXTc*M]3#Fsf-6R5Z1(2sk2tK:(J*?=BW$onYZuZP!j-:V[C[H9,7A@%QBUdhFqEBq_Q_d/
%;W]i3&M-gA!on&UK$8Cq[PqFF-a7;hBjTFJ2MX7@>_us5q^KC'Xt<GU6)E2[!;@.1ZYLRAc.m5NPr0(8n`:fDDd1C\N7LT?*83^P
%&dV4$6,N5+0FaK2e-'qA?hKmi_ABpuggijhE:t`&X1$9PYM(=C@p#Xu]kjMLC+BEC!J-4K4;>7.1!?G1Ri`f7+D87UaG.W<\2sJh
%Jm^D=I'c?jSN'WE7458*$.B+r:tl>%7#H:o([fL*8T+;\6Wi7;#1P5"Gg*6`EoCc"G69G4@2[=9R*8Gnn(Q)u#XUK?fV_(Em:=BK
%D8JRm23Yog`m3:nd**WcA'e7gA59klT^_2J/mTH)TOiYMA1tu\gFWn3fPV,LiqhM,/1uA&R-eH%6B&FH'66#S1"Bcs@67UW`s2>&
%+Ah95Zad'H0)#nlcD8\(ELJaMMa%Yhh6h3qnTVbZ(L)jWD8P-9PtT69<B7[&c_("Y24:id&mpo@kLgW%`3jB\OR@>K;m,ca9rjnn
%rV'oqa(Q2N^qn8;o>>eLh.D[Pl`[;cK,\as;oGru#0IZi>;p^DT8r&6SA-tai=FiCf'l_IPmt>4#Dhink,FbX_HucmU+Id,XTS2k
%nVG$(,@P=VSHYR'8=R;Dj2m>_8aLYMb'-Y/r.6#,.V*\f14gWMr[U3Cg<\P`fsq%C\3jZ4#)kA8XF74n8/U18L6hJFM9f-_'dhgJ
%.hrPC\'OC]%58&m#;:O4S<'M-nQYd0Q)h$TkI*)4?0LG[!`?p`#_N:.mYE9HH/l,#Wt"P(ASb;tbZ5[UYq6X`flWmH=E&-YEWql'
%&?9<9TfCLAeHpk!K-0IVSLm@O1UKR?,+lVPfCQk0:\tZ,W:i;UPAU!HOMEGf)[cj,((MU5>'fr,c'[4THNsg@`-sKIaG`Fp+WKVG
%ch8Gj*V[iT6JKaZCD(!.Xc)>FfagTAX\cn=6TMc1Ck#Y"Z16C+j]H;Fg-_X=nG(DHiL-Vr+[E[+7gk=DM5S+JU+K>$+6OIdjpgXH
%55:pVb:p4k*>2:40>>.Cg&4uaA_O>2=s4:]iFj[hAl21!$o=@2XUdTq9g>$<dJ@^,"Y7t2L@u?Dhb<#ZDt[1I^[$OoEfDBhq)MgS
%^*!1uiWo31o"u=9Z5$_\mTd4uKD1e/Oo(ioCkhRJr,#:R[HTapI]D(`RLgJqc%5,tC%BOkF,.MiQ(<K:Bi6-j*_Mhq#F]PJe2@37
%J)=D4s7qF7fYN^AL]7C']d[tUH*?X_B-,V5>+Bq;QAi6"6Cah>A'VT2GVTjREU1=Z#JU/@mq_B[fG%(%_5bEr6/[LA?k(06IYtV\
%g$ZHB?g49ZQ!WK4[7iWWG97F^/d<=3#56gHmd@2]+J`]TZi*QlE,Wd"DuYCEAh"W-23c_g39jIIh0BqU5L8+7Yo)rZH`.3rQS]O\
%aq&q*=r]jPI@M7Z=EZ<hN!M>F`@N_@DXh[lBb$2r0't@^c+\6^:!M=1YA.\m`dTipH:T2)`sIBBGcV9&:P]"?'&U6A+L-an:7[/!
%YG7V9RXF6Cg</9#5]OLo3_cr3#G,XaPp*8O&QbFHjr\n)U:;jMVpPSObpr?dmE1_G<R+rH:`PWsdhb2Gj5<Go]aM*c_%R!AGUeUj
%[_luT&V!.ONe@!-m;AuMpX*+,Hm6aDb@KBB6XCUIBkB(8YF4S^@tiB"Ij8uFc'kB%^/Mj,ZW$a7_LAn3Hi'L2/:M7?[Fsj5?";XB
%:22Abc$H%L#GjZ5':>58mU:iinIY:YZ[,m*-a,XF9aH@_&j)AI!1#VrF:Xp"!QN9r<S:gA*3`Jg4#Q1j9nL=^a6#Kd48;2;/t1/\
%/O&@oB(Vk9R_A5')__*EB#jeYq)/SP86o/7B<4;(*"\TTL4(HHU\^Ra<4UBW::7iYUK:BY5AO'JlIb@&NBI((1P9W?>T_+B%6Qo6
%Y*nh,AhOX)o7cOHYnd^k<dU%t+'Yjj!f`C&pYZF;,<bng_..p*F4m-<I4DPfL'9bK>PI!@S#&"s9X`Xd]eoV/S/AFrE5iSZqjm\@
%Fkbe`"uKZGS$\0Y*B)g6M:k[kkRKq](>dT+]^o98j8C7=ceJXks5:Fhg2))pb'W,frc.Xf_J.WIO%HE0=p<Flo"D4s#%P60hp,^n
%hXI_?-#"_o;cBs&G`ZtjZ<p/K%.n:_R85+LPLrEF1?"#PHgP_]UGcVGfP,SQnhY?ZC6`CfhpI;CMg]o=c=nl7iPZ`3nNWG%l^feo
%khn8Z@H#lU"a];`&+!nh,b>ERXt0dtW!?#LY-MX6W@i'CBsZ$(D$Th!D2F=\_^B=e8:801hpg3"9Ke#@6;8R3j9)p>X_JIjA'X!h
%/#J;6.eAi%;t_hjOe()4UHr;]]=uU'\f!>E^Y'C2!M&MHM;nbXR0jIhQ#G@o(P4q^H<MZQq.Of56iXsT0CE,`.^Ek$AYG0^`><G"
%W\<.6BqaXXWOd=KTfnP\UZC@\`Akd1R.BD8W_O0K9VIo?Y@>CFHZu-25BAM@m:*M@;'sUWE"G0Edf-[2Virg"90\TV8Hs.HBTg7L
%?_c]?[^8,Sq3\h1HrW`608;/!(9_2rO*c*/7#t;c=:)U?.`CkC9`Z&hQG:!d[hB-B+Yb#RN91kXs#=Rh,_M/gAW4.Rc;P0iJ>FJu
%Fs5Cd*FNY"nH`t<pC!(NTj\ME;UIku2qO`2_k3$80Q@FaF+PcK-f$SN>MU@;J][id.\A;R^1F&lCu`BISjLU:@<1IZ@NgL-TWB;C
%ja+TMp+6e/i%UK(M^X0GA5jb)";(198tep^;0B@94*]8?:"gGp8,1A>7._'&^NFCP>l-ofE)ti0RFnSJ(`A.a-AIp#oJRGdB/o9:
%`(ak?&5RQY!"uW2OO1C&9+l^#UTpSL"K"cI+MqTD/YM@:"VA>Q%pKR&)\Hr\/G+EK$pH=@JY#JCUtNI@VN^;]\p<gb,_u>7-hmo!
%<fQ>$c+:A(]>k.Q^P">tRDt<+>8.CGURSISA\0=],+lEFdL1X%etn@G;$??(QQ3Sqo?'`s<&,nkVm:mI+^(-]/ni.7^?%9%MeLGh
%O5#W)Ogm/QMB>Pb0G_!Knj?*@D017>bHqBJ?j#@2$AC6Z<eM1=(l5'df&$@`pe@U0WaK=DZ![en!hF:i@#7\YUXb@pVLWJ5U"otb
%/X)7`3_6G.Dfi3E0l%-fE3!dd]Y/1H[eN#<hPS+MMD:K87I5XcD"E#aS5$L$d95$rH2i:8GE9<%*e1CATMbE6?L8;ZnjY2PM<IrR
%M:J^U9]W)<#r`0=JbQV*\=-_bl7^kucAW/h<M\P6;Au^h"s;c_7u@a,[`mFYjuGCp=i.E5+<4u>?<u-@(ghe)i!euUF/CTg32t7W
%?Gr@7pUM`Ih-K8N4>tp[jGWeWs##\`U3MIII+#8e`4<q0g_ZIHH^B#3>ntn2U"Q+!CE+^=r#0P_PWX1+@$tk3TE)quJ1NrOeYU=-
%.s#`e:CW5FK[m1]%%a#c;-SXgZ\)>o48@#R+1O(>2R)8e^4uf-*%GeX'IG4@3\]rP$986?#M/"11EQ#HGcGgd5/]Pf2(F611-,U_
%nGjF3POn$/0mC<*N]EFSj'+O;5"l?^aaQ0>fCB?*KOtBL^AI`(iPrTBm49/iLMQXZ7=u9p=X$q!EFP1ZdmP$GDRGmJBORG`8*f)3
%a/gFC;U-u]2U.7$r4K6Tg2Am(X(<rDUBU=bJ9NieT'FMD(+4PhHAW!G@;61bnf=T,A1*d$Z]W+66-F86)YQ0PgB!7YpWYNNi800j
%J%77L`N=#DR<NPD[&r-m*"N^t3@r=T(16Xiq&E3]ERC5.'8;YHSNl1^PBK^hSqRWn'_qL(<:Z<`glI#&qIp2,$%#11p<"if%"dU2
%bd-4W3juB7b7VB>FBiO;a-:$E(-2&m2Gs00p%kDIU\[m.b*f3*+cpu(D/]ZG=gi1(i5q,.a/(If@hOaV4+GIS%?F!br4$YH-M@WY
%9R3TeP::;slWD0L83t`OO%Z!;RplT^3ng2AX;PG/Gk(fI3b$l:A2.*LJLPPN)Sp3ik=)M;>:>3ZphZD/L:=+3*F5r*HWdUh4/I[/
%II(rhe4!JG"pn_q,YOM8j.]F,<_oHBI]c/k@Sor+hYp:%Y3cZ?ilDP2?>'Bne0YtViP+l_j/Ej*hJ<85-d9AOkKbhC^fU_?,(49^
%*Zun9VM+<d"#idB<h\34>u`V[[sDj@gJ&a-O496@lSCo??mBn-IUT[57$?AjjuW;o<s1a02WncLlm[SXkL7@O"O`?SaDRRaR?YmK
%NJ]^P<1"FeWHaiEBI&K4A:IC2.D"1oe"[dC9i$G^1_)"HSO0e],MaGPHW[b_W8M=\s-P-EF-WU\:Sekra"^"lLmH[TGM-*'1bm:,
%0Rd$k!$UF%o.*MV=M(U2*gNab1Z,"'BgSWOM_Bjg6T^:#Q1[l#Un%9>GuWDd<Ao4t,X<OF<_/FIl@q?OWMY-AI.CgYDAt*7&sQd6
%d^7uGY\r;k't@3Q/t)YdDG@9-d&tOFCojMb@GZAm7OT$j3.<],2-3nuPo_:c0A$>W:sj<=U"s5pcB\lc)^h3IHYpb<;qEA%BnBc&
%qFq]V#Z>nrE!rdF"b&]J\rB*0-g)&`Y3"<XJqr`t;oRKU0'6BM:<#Q7TeiT`gS0LJ7HK,\kiQdPb'8(+gUub1.?TMCK\+j]D,Wm7
%6+4)k+"G^d#qS&eL@g9G9C,rpX1j()a2?E?gr=?eZ<(JFUI*H<\-?$*ODkSg<#@;AI(>56P2-EL?e-RWr(WRIHr4Zg=C97KUUjQn
%*q&",1,CFb?b$.j+818<+8KeUl@?\^Z(./g6g#[c/Je4`*[t&+&eF+5Yo3q#O[c!X#ZNpuMqP\X;g0.S,]..rG+c`IlOH]Ek-RXK
%ISb1Gc6ULC"c,"%+lT$G<8;Nd.c9se@t(pe,2=:aZmHg8BjfEpXn3mj_"^8_Z7k(O;r<&0ck9MbU'-bJPm`J<S<)^\RD!2l79&9k
%_aG:gMmR+r8T.fu%HgkC/3s_XAERQVE`?L-0<F"@7*<0jWXGca]Fu74+Uub.00WZB#$#CgJm'jCSrkAN$&LhISHL`:3pR&`LfBXd
%8Fh@%Ag'3sTqtmM`[SempJ@hSL>f3*-pt(A:VI*G(hN#$)']'r^B8)(g4Ogq6N.<R]PL_-:rcRk8\tn:AWYIpEJ>5$58NolNEr*3
%([7':&2G.j1EShlJ%9(T4:7.8E5O_R$DVs!6uCM0LDL+RXOA<0.3XIhS?ko?gGLZp)5'>r<Y0tJTL2[?fOT,l_`I"kLmO)^]i:>V
%<qmTt@#&l&8l+B_C*d6aQD*D$cWQ2Nr*en.boQls_6:uu!aU%\>]ogR@M&&scXaAL&Kc+N.=jNSm;`db&.u8;F!`.VeqY2SWYu3!
%=V!r[.%.;qVG98G8h;1?lgBF6IMc6!MT\o7iqIX1MAVcW^,QujB1@%Yo,+A6&(lm\Hs(Yi`%n9i:f,+(+eClN,0g0+:M\k-;pbsh
%d73nmB]Wb-'G7@g;iKFHcu<k9";5]DOl9&_2%H&mjk5Ih#`1Mc@T$LZ&;YS.?bHjdiddR*LY2;bf;IX?kF&JE5l0WCNS=IGk>cLG
%!>4LSkBJV82@CQTl(Ei'Xoo(dU&om4`/hH(&qsGC0l7S.<nM%sHV3Tk8bc?QObcI$F^Yk4l9p@Y%GeUo2EAU0FfF&3ZVg!#2+S-Z
%i0buNk?M#[7LSbE2I[C>H5tP<0<]M!rH3lg/6W>]-=V0[%#3%33nt5#oa%#m+T^dBi5aaC0aND>qT)@*%\Itu1gRNqBt+O[\hL!M
%J7?I64+O%CP?'uZZK<`8I8#GcfiA.g,=i])?pRDY$COgDkGU_*n/;p+pr%tX$(i%l@=_45\EVD1YVH(fS[-Dm]BT)Yo[Ys;iY+$l
%0`kI,(ps>ug4V?,RS0JE.%UfR\BsahSGb?!h9m2*icOZXXGSF+2Lo6K)G`mFX=r.>$DU_^Y:M6^Zo)&(fqea"@QAd=Z%FOW7:<*6
%kSD"BKNH+kZ)gcW=2ZH7dGf[Fpgac;Ion">N_73B/>C1C:)%BI3d<Lq0oP!bopA0]&0<4;/@pEVDP<#1Q=^K,#YjDR1DK<C\hh]j
%d!;c03j^)1,7??]C+)kBB7s<=2J2qMd>I+E2\knO*Sb2>mKlpaJ`\iE;IIIUpF??8@)]Z+-ml1X$uEAsZL#:C/tafm%^%dp<Bcbc
%($Ci3;G#>_>nld'Zm(1q56r!o=!^.7&j.fSpNL#aH'qX.9<dE7R\NT=4<+P]Co<]0OMH`0Jf"TpK/S':psFalV=>R0E?9dG&mB:0
%`A_T><fA91_^\"8k-L"38;K(qPjpjE-Q+[!B"OZ[*E80#JKCfSMWP2D\8.;RnT'\K&F>1u]<:LNMW_hm>]*aV<.ooj:7BG4oFb[k
%_q9%2b6pmSpiKi272Q&[S97C0<1ISM\+lI6=q&Aqj,3sF*E!L3N_a%L'sY474Q3i+Qh)>qL-lpHV!4P0BW3),Jh!KNXPHt4Ol:C9
%77%_4,aa3\77`6!Ff6KRao`A!<:O5g_C'tK]17r;LEni&<"TbPNB4!^KEQIEC)[4uSci'3X53+,TSbbU64-'=<k^']+`Tng/lA^"
%f-iBfk#%_CY_j8p[fSUl@Ts5qR)1=^=#(Sl-HpfXpIn]B(3b99]qTf:kZZ3[?DY@t[,S_R'e1KG]WO:c=[OsJU&WRbJ<6ICd78j"
%'4;D%T8*9l72$H*$3Dd(Q+AIGMn->Z`$1MH]5L(gg.Za#O$3jqIX6*l`V3L"%Tj-nT7Fnb8<`4gnWL[<7]`]3/&L)8g81]^L76UE
%,p)U@n:OT,&h$+<Lfkm1bL-G%,77G6hHiCB#3;7aJT]jKU,#PTO:_Cq'MqXJ^I'R#ccU=$J\-F_SrVo4*5Kdd#cq^/_t0'%<lFg-
%\fF_1fITP?_#kCuXBmX>300(i'*rS!QXa!hrCVWqI**U'"=iD,+12TX#bb<NZ+@t^D3cZ"HO*_2PX%YoL^lMm%-U6N^5O#+o8JhZ
%;R(@JIA>U%M+FbAXA=WA9(a-;>^&0H8E5rfO%qY!KN,l5]IuE#$O=/1O2B2a7+Z-R:&p/c$nCi^M0U*m;;]_&'NIl#,q0caQa'5W
%*hI&!NOCYI:CKHVkX5[^X:0Jc3_$GgeU;V*L.mr4""7c/;#nT-P6=^hDf&#6`(6*s4>BP+!%:<R7?:8uONC$['Y>GBJW\bZOCIF`
%!%CBo97R_O!3/O<LArE]@d*oNiFVZn70mUW9IGBX-=[-rec?MZ.L>]HM*"ri4*?6Vlm.Ee4;-)rPYJ3H3a_Wq-'"EdX<M2()QW]r
%%KdL/8(hXl-ZYaL9a(99U3VGn`&uNuZ&2EDdUO"JgnloMm[oRh,i)rFUD,DOIbMX0WXUD:*ig.T77k>NS[C!5A2lENMYJ04HGRq:
%OeRV&Iom$Zq$CI5RI;>N%O%Md_cf>D(d1nSCn[W]1#t-$9SFj9U(sB*JlR>.-3W.W,#MRp,8R%h0J\sHI"AnO#PrO!Fg/tF8_>5'
%89,k7DD?Q>a"=0TciFr&,VZjr8V24%h33AIo-@RR#@*cH'o*1-LeoF6/;[W%BAl3=j<B6cMc'i&;%DS+Sm'c4`M"Fu%2.'HOLSWb
%i/9B@YMK"%I*oSr>O7"ril(TNksR2aaC@(9iJZYOW_gRVs.,ui68,4b-oK[P"!^fYP839D>fF2*5o:d;XY8Vb>T#F6MK,d++"!"f
%"ttr25JjDY7?5\<N,c#CZm:SB11+aI0kMJ%0Li_/O+7_[3#CQM"CoA[UoPZ!&T/b#H\l5h(XUG2!?(&5?nX#?T8O8D*KUk"?`4#]
%6K21*8B.(tc+N1DFC#4T#`7<QC(DTX=`toW#V@q^$tIm3a"X7,5"6QI&[%6XRmJhriYbpB/:Nm=7Z<*Q7A8l+&r94O1L_>0%<Z>R
%$o_P=U^:YYOc"m*S;XJ;%aBf2\Is^0;Ij>FcA70q#%rUe`6ZE.<'j:Z5l?^L8N\4u(^HUV`jni:M#-[*hZm,%g$]&#@c;T+7#8i#
%^4X<HM.iE;+ESWuYo?`\)J?t\DF^Wp]Za0pkS4_cdrpCZbSV?TMte/U_iAKMfA)Q^<$V6,`3,jRcT?B#T]S"*=Q<Xs(!PG<,:taM
%W@K_Z4'X#!bX8#47S'%59=VuDq&QQaFqoR`fbQje+`WjCK/CkBeg)DuGV?Hur(_-Q@N$t3mT'\DL^A+WhVp%H*Y>,e/gVMH9;!$Q
%T7Snk%:Ce@L=$X^#gGu*LPd66K-6.p<=6?j1a5-LZs6!U6JreWLr-][B=1)`c;iteWZm+LA'E&aQf/4pGk?[&#SM&66Z!CE[GTp\
%B<0LM'$`I<nU3Hg0b9]_c\Nb'X/O:9B,DuVaI\Hh``O]=!KE0]_#RC[#s-^1&n-#11mb(d'>]R^pCbr"FJ/G><S@.l<A01^VD&o(
%Y>X+N3d>U65iiK4Bsbb%4b8/<#sE03U0]i*M(n:LK!=<oVXtJr[DXnF$+>)[Fqp$!;eM?e?OU@"/7)>@B((*0IE(Pmjd)9'/1;Fb
%P95<)!#):c='(/l`6Z*ESV8`*:d*RSP+:0C*N!g7i!!E;ad?a#V7l$D(7tF06mG+Y48H%0Vrb>N9S,XK8t:Pkc:^,QkFWup0m6eG
%)PKqd*Lg$%_lP];(/4K!kFl+uCF5[Q:8Z6kiH4e;Bu1bN`F32T3'hl3;]!T\XBJ2PAXlh&rNj?_5@P1\:.*$E4!^T#-ik$E>r1AE
%(rko`LLE#Nj4H'*e\bc0@M&Z+TK3MA]Z<)HLiHb^-47\I<jP%F6&b"[ZdE%:7g%[jZ)Uj*6STd$m&%0eN0sKM:p][U>Q)8b.R6PZ
%71Wn8SFXZ<(G?7:<&CYG>ZMng84HQ6\`'W#-gGnXh;D\\3XW.KTc&uKAlb6HL+FTHaNmHf<X+(c@:iAg0T?h*/=R2>NZfRo2,T?U
%'P<W7`[o:GXq<7^_j/#,$r*9Jnqhp;043'q89b;'@N/0/64f,kUepH_HI\j?(SC<$fteW^MIb43#Y,SH&Pc&ZA"?T>g4:5@&'&iJ
%KoR6q;`KpBF`cb0G!JQVQ*2*7*O.`^W$^4q,EQ;'bdn<=d>iIi_bn90emVR`:*L`6#JSEHc*#.UflX7@UJ<YL3m]*$moY07f]2K5
%fXsliAk_,mSObT3\0"o4Ro%2He(qgWEj$9"k-=8`@AX;ZH6PQZ:e<s)&3HS#KB#+Y#,5Gr?q2aCe)A4m('UAk,pDNf'gf;VhP<&B
%QOXTZ#6;7=J"a26#qr,:ZQN[-\t3kTp2EOQOUJgT.4'[#"(^/(7s,&Ze=m;GUWPHg63T_g;qM*k+nIH)iZ,@*"6O7tR>Eo9#c$h1
%Qk8G:60!qG*A\Jsq@`#u@9>&Zem7g80LL"00,*RU)0:DZ!SpZ]2CbHO6QHc@iWTWNgE@_0;&IVBWdP!9#amn06s97G`R&fD/9GPq
%%%#:U7-&RNAsAp$!Z(\\gsPi#+G]CDE/k*F`8;j8:;eB1mKuH!ENZ2fV2bVC`&o4V7L"5$<e1*fGbH>6TF5+_$B9F)$EYkn>LA-A
%JWl)/kkV);$TcWZK[e(P#K?PG(i*XqF(>pWfEq@R+NZ.7o`]]Lb!GL*Q^Pgp"s*%B_RRM#rG!eNXDh.@;3-(JC<(#c=Wa8mTW;tC
%K0:ES_hqA-1er\U;EZs"l%n_7NsaA!)O1Ij7n$*Ym`LnY;r+0nAdMuj8#"G/LHHUa=nJ]+?3bb76:.9-ptKRnX7Cm0YpJ>5CSpCL
%<:_,!cs>oe!0?X(\04g+^]7[d_lY>((lqLSD#t@>(fAEU4J'e.QgYcV[Y]3e5[U=R/NDs:Mo7\d->C1>hD)kJ.`OmV>e<Dh@qMsB
%K0(8&iRK^r!NNLB"F%cqGa9TENfZ]6_ADnoI[C*t6KI)-2/Ue/3!rDKjL7WAigmeo*V"r8o9':mZ;72\lMutO.l1J.P1idG185R+
%KoPI"NsW^[SH@Paj38sScd/JGiJL':S7<W!%Buec1ZE?j4QnB@,:ZK`6r93G]W"e2Qq,XOm^hK[NbCMX=j!5,a*CSqK0YJR:fse3
%ZS&"``n#&5Gs%7XGHs\I.1qV[lra$N`$6PLEJ-%;Wq+mI4O0FP/QM9uDo'K0_eB;\be3NWn2T0G-.XfOEJSajDp!+?`&a?ZA_5=+
%K?T7<"*7E>r:lMQ\JeSj/?Y!_nC]6[KQaH*&?RrUgehcl!?Q%0:6OTO8WV#Z)N`!+UG!aNaCgm6/^S"EANJ?$\^2V5s$=Fj#d)U1
%^rJM-iW']56GP)0%f'5dC)'#VkEE4XbmZ6ZXE`)P\^eg][Q;S^B;Q5HK;\B'r$.^746m3&`8<rg&cd2<;q.8%N)O^(+csYm'8^=0
%/kg(YWb"I+M\T-@JV:a]>+SIT]M"u:rD8sVlsCV%P8L*KK8`WQi#nd9U4Ya$8OU?:O!M/Tj$asu'&Va&>oXq=p808+RReLQi?4io
%Ls"2K$uMM:.BI;BcA%OO/[fYSK:KF4R$AZnl<FB6kNs5p3U]i0`dl2?kGsbC!h&2!;QqX$ORjO$MaTlu_YQ_;+3aVLKchqA3I7$-
%Kj?!p6:+#u]G0U4cF[sB&eK*?`NkP0@D!k:ORoVX'G(mlRa=uf>g<TFlHFc?!Cc/$-&Ug@HNrBYLLeIFqit8neg!t=H-!hNc$l.7
%)[5btlM$Y,V^OP"9c7jG`'Zl'n1>XaDb$Id_GQZ1kXB7XH-ZsG<":ntk'Jb4AdhbG`Ba\S8/a&NR1b[K*.4\5Uds4R8fVgG`KDLg
%E8-C88%U$W;[(cZO!OP?:<804Y7eh/=W^H:Y#86mS[AU7'F0@fbt&^E0,Pp?e-Q@cKu3TJ?A8;Z7l@MhiWkC^FBM5M-m\W%:?\hF
%hP>K`c?a^0f^aOXgsEc^YSYo2f<n=Zftj=D"O%Am>sH4^`S'NbaG9g-a,jsq[$lj<Q1/AX__SqNn(S/BhA(.^p:Y=4HH@4*_A"2S
%YkXB<@'O&bTmMS44hljlO%1mjd'.nQrp7?4U1hd=#A;Xr8\0B0B+@X5pSB,l5Z%d9O()(ua'_E>]]K:t&!Le[%UN$$<@rasg@W?o
%/$V\;+T$$3]8P(liIc.8jT>Ui`!G7I9ss">n2XDo<t8F'"J#Vc.)kjGD&K]/>PJ'=>/Rk=-[4"MV]=qP*6UInJ&[spo'e/;OY+8B
%PQE,E";d?!:HM'AM3*A-=54lOfII.,BDf\OGct2:Fup\1`;=^%6Y&kc69?hWhP/Bt(9*;7kYA/dI;L,jC$Pi^J10'@#kkS@b92Qf
%=L\Z#XbFr4$rapFTFqm@'OH[FRI`gu:WQdf+YdhjSjg+E:,L:+WE^I'8NaHQ)SCbP8'HSJPi30AM&77Bb_##EgCN,$>$32>/VWSd
%)AQM,AD*?X$KnY(HGd%0'f;)^"q/8[62XOZM=C<&JKul=6*NDp=Gl(tU8Dnh'_E"ROqHBZN/?[06mJ$+8@_>')b(4J.8-"b)Fn-g
%X6pe*6=V`dK-'np/i?<mYV3N@'b``F)\[0'O.]g%:m'Y."J5-#!M%A+Z@u4=P4]KOCa<N#&:/cA8-/sAOd1Y-Hj":2__O7t%5_*#
%(/[jK8ZZer^Q[#/'9Ydjlfe+m#[m8.RD+.dEf*0B>9psR^9=;DZ>/:fbm&tB2cnh)An>$jFE\bG_6hoNXTL]IMf'-^AgGE[c(,*J
%0m#Ua>);43[-+.b6RT-H_Ul0e_VT%A;q\I<'GZ[.Cn@lDng[26T8K3L]Kp>9<Mk]1JJk[USd@O$RF2OhN(VN;#-gX7brV.V5nmkF
%#<'a$W2]hZ'3=7M9dQf`IZtKiJe=Y&UJDgJAW1)BS/dP)P.DZZ8PJL-mp$Tp08'b,]lN`ae7)o1Qng@o5$)sJ"-43T,D!7YZH+O<
%.6f=_\e6-h8FYe^>riPR5Xq'M<#Qn_j@8rQB,s[7cq_SQSJQr5RV"$Z)AZZU:^C`*Ml)G"7mgluH1[=Cb5%ng]uI]4/qr/f(S+XU
%[=;%.Oh)t,Y8[`QD1uZ5d^IYe:-4)SrQ+$E&i\N$6+E-&Tfei4#YaQ+)K=Eo'uY..7:J@rEm[RM9HPl=r6Em,efQllFM2-7dKqAY
%RJPDdjO@IMrH^sMWJ1We4D?$MkJV4Hr<A1L%(-Q745X`*WA],SCVf#YZX$*Em<Z._Q&[[',ecrNJ(Vi'ggRXtcpO6Ke3k,WekenA
%fjJ[17`0KI0Mq#Q*H.K\`22:mUnp:qfqMCH8]ORk>'YNcC1@(6S,$%9\1s!kO1MeTPgCk.aG=QmnM"gu$cN\jQcO:S9jF>)Vbp'.
%@NA$^YT4&1K04ME2!NH1UNSDV)5f'8k$).>14&<\7X&f]@%qP\GLsu)`si"WYSFY@>@aS$&Z.rY'm%*,i^?A-,eG8L,rZ:8)lse+
%6CeF9-06J//0ui/n#rgl\;mOI\kHdLW(aNBM9VKlo';8tI#uC%(?<Pk-Yq,\.up+EVR1b!X)hHe`60p,<oN7("*Rk\Jh>4%Bp#)8
%;]*"?3maP+Qm""bRalTSmmoOs$0'_.l.Mkd%\`?OHqY<?N;[R*\cfMfMOH).=SQ85*$fD)G!=!S%^\ma;8MF##KrI]Kil%/K4`hP
%$bo5VW.qnNrg%I+R4CK^@,7bpSLf_CpV%WM-`(G(SZ,8IHUG9hB#/o@Tkc%1:)@tTjV5cB`Qk.*RBEP1*faCS@iPC/n9XtS.GqYa
%[MuDI*U0QFa+hOL%@n`8#H%EA]=Q100U9M#^uc3[DPc3fZK2go5saIrKZ'`b:V0o=jXiihr2n4hnh=[Y'p'm8)pqcBMI`)scR-+;
%U4KNt<]RT-:Fj*7(!+De/m@4gYX%8I.I5jZ:>L/S)=Sr]PN3#J<nd:q0OD[W/P]E#jHt)RhHTAZj5rX?lc(neKDg\7KfL;IX8rS+
%R76:OlL'Ae!g*2R+%mjfBe%c]QAesf.(*eK#5At;:ITUS$Fm<Zh9pUu"'p;8VtjKY)#IQo>0$MVKAHP]Y9At+b$DJ*X;H;,A)s38
%hJKHuke=X!#Id^-Qu;I[PB)gc:2XHUINoj9^7-sVpmo5=[P@&t9[B+m$9Ao'(Lh#RIe14%lo4X-%0pnCpIC.hYDEd$&C\/3pYSSe
%r>mmW<p]0"%*Q&!%9q,'n7MmG`C\;toU8DY3./;hG$Qp<;lXl#Uo6rBpXJTZmX6qS$g3;a_Pne9kTM7'&4`OjrD3Rra:@W58YfQa
%-%Y!Gceg#7+cB]R*H<Veqd:b"/L:AUO[AdNUc$Tbf8,1mfI78SU"5$U2(<u'PlYfh%VMf#o:ZJU&QD$/c9Rjj^ud\q3oLHH8p?l7
%%8pmCZV%;X,I'N2Ubr_<N"mP=@DOlS&e==pX.!2o^[pI`:2N70F!If<caaQ>X`<2^?Utsgo+dU,,7&k3fcr4iW/V5)G%r6(Y>Q<q
%::ckVC*Ot%S_?=od=!aL%1)k7e#41nFQHImDr>30_FK<*j(gDLchaPgcPhko)r5OV^*_XJ54s4(:UoZGkm[o$SjC%uA3R/t[#0u$
%pPDSW&Rd,g%K%5:#m9$OSg+g]*c31QU$cF<l-mq+=DOF>NW)Q^b"`>82n1$^j*MTjJ#>_Oa2(;jg76kR?4"Ph]A.7"+^Yg"+H'+U
%I?(7+29e@h_;]+:T%^d`0i":#aD)\VHRq-Qf=Yj6=_(j\8R/-O+n.h7<RsSF![V*tasa,o#o;]CplT1kF*MT0mWaMZa&QNug-W+B
%&W);Q'btqR)Hi)+Jq^KC$U:#FZ,SA\r\>+OincEDqd+h9TcD26hK75oU])FnIB*&*=+[gD`V>g<2@Uo99HoP`LN1'apMo2]H;*'i
%pm??HJ7a#[@<u.p"iX2oESGSq0dAAsMu-nib'm1LV.R[UVO>>t]<2q4?k"@WC^(BqbR,_5h?EnRmu5qg"\FCk!Z2*Nh`3GcmSAPo
%>_60sRK\UT6mc3@&3ghq\d0$HLb6S8h3Zm]Rldb?E4o?$jT5EM]A.`hq]1oZlsj3Hh>D0MlEJIT/:P:s-=&p[URu2:iS*A-r3P\q
%?&09RZ-cH-9hSGjqJl/m?F0-Nd@*qFdL9pqcSjqCmnDAVj9n%tnG=hc$jiZI73jc,1\%oN"(kl_L0moNgR-TpfG3Va4_C!Ro$28E
%@I^+LjC&'heMT%S9K!dX9+CO^jr<$u`jKOs=lp5Je*!M0b\@_\=;qYLd*2d6WK;>_>TJ*50XcC!X,>Z9=P=gt,5!%.#0Y?s]C@BO
%2_8piHYGd]ia>NI:0!j/U4C%_WpfZ78N*:,/Fghn!X3;c:shQKlimLF)#tZ:gjm^]^DZ'X0,mA#GH64I[tGo'A&lAScFA__]51^`
%G_a92%s^ki^12oSXq7B[%,E97K1:V!-ILk_16UYr.]a+A/T=i(R4h1Z#N0>@5D6tR5#.:M4u./;P7mG-J??k+%s-0;#aecV*b8on
%@Qeb:=+8n85(OZ\-;jm!9C-\aM5B)#4:;@;e/hiVg#QUrVahbc90#KTLkW[']7k(1cBD;CQ^]F\N6t]0;n;:d<'=Z`Cs:O*6(P80
%AYZUQi\4ueH!X;@^0*L]*"fG=J9o)ljS$B#,;=GK4o@63K[m,e5Tj.bh?k7c9!d<!',tBR,Oo0NBb]33o.DFlZgAamDGa,u@g:+`
%Z[fAe"R6a^9[d1r/"j,ZSn*ahHl4/'@=)pT-Dit3G"-Ksl5jF[@t8^5(0oW1VDsoAMb)EEn;crW-e>3:C)V(0mm^1T;_IiN+nrt"
%gU<e-h>WjgoD5sV?]o+r:F1sUBt:EUAa?kULrhJo7#\bC:[4#ZJO+Hq,Wl9OXY$n/j8PIA&0)IAl6Z@od:q,+`q(2Ecd8>b@=ujX
%$6^,Ken(o<+aA%'>s38QM,3W-5%%-SJGhC9(H$fV_Pe1sP,RD-.C4jXhE?`@`eSBaeNVcXCPm!VCiVqON&`b9W]Qb<$?L*-pDJ(s
%@B]8no;-#Fh1?GaM$t3o\uiT4#g'TO%,\D/FC=3Y31njiZqJa^m$M)?06B@cP1:&NJ%412_JRIe`QRXO#DO'b1/'79rf`_6GLObL
%R7.mD4@C-m"]rGe7fuqo!mh`>Y2W]Vq/4rrIKp?X4e#Ud6Z]GpAXO5PCUgs@>GRGA:8_KrEK'2;J`RhKOLd@uP)tTfPkc.W"LZ=!
%a4&P8J[>%L]uY.D6H3I%4?TiA3fsXHL?K;jREUKN/I(n+\!jjM5'r3liGA^0&kA"@(c\b\=Q^&BbF9=2+0W232"eB1ba(_c:cG(U
%[+p9NaT7Yu3T+-iL;Dn:X-nkPA)Kr53Qdf-AKhRRQ`[>!`POmnSMO@o/BREYY[A>A16PATTO<m[<cq@;LVKn?$O]*ZK-/W(F/>H4
%d!as-jK`A08L,Lc+2gNN?Uk=$gc_1%*$mBC0UXpHT(KtZHC]\S,3H[N^<0R,A9L![P/u;3IA:#gB)B*[lt1l$AiDA6:]mi_Xu,j8
%h,F]40e[GfXV@mL?R:Co^i<YXE_*a(Q'^@=!UDZFRZ)Z(K<B=R,!VC7@8,k0oXJuAP<);r=]Z=2S'%CRXl:^JreiIX7=F1XZCQ9?
%(62@K/MS9-Xs,tD3R:M4*_;d5.D"^MW_5_iaH]H%H'!?B8Ao?iKlZ24#.([.V`emnFkYC4qopo5$9Z]uVP.O!^=,*#Jj-fHem)D*
%D%^>g<eO[Mo<Dlnf6m:IMUHK77un`]Gs(W`3BG.=ZH/H]hQUa-\r#@W_*4#d2XPc_<I]s2h][jOTAMLeX)^lgat(40dW_8!P"1;9
%p[@Hb^C'_E&"F)@#[#;e"G"hBkER>EpV%*ldLou/(h9U!f:>liZt:V4%c#4&4^RTC,1.Cj87mY8Kg4X0^+a="Sutqag\b@<hMs82
%FX'WM3nXEQ]O'D8(oq,mGm2p#EYmP3!f=+`NJ11U0lP9TdJbpLcT(b9K:0>5&LJBOitLaY?0:Eld7k+>.ZX_.61:2d/?oB&ZgmCQ
%>IL<t[Mq:.8S!BCSnnLF!S*`BXA(73gPJ%G3u5RdX7G1DRn\I.r`IBnW,6EoNO+ub=/+3hf;g*GiFrdY;gC0#dlgU'3Wh\hF+11T
%W2alDDi'j<QP,F@nDG,*d7<9Z!9;'QXaD/$36c&(dG6=f-]Masd;[>S*d?.lX%j]PcZuLc\C/AhcUVf0Aq<X-)mBZ_S/7GJGj.`d
%@,@P8X4gUr,BT<pc.+j/(5<rlekYl<geNMm>i9@4aUYbj1?le\1a]'I<niG2*%UuqN?7ap7<,a&J`0"(4XI>=$?Ib-.,5+2JG&$G
%Z@0s_Mfo'%2AsNPO-?^.Wj$3kLc&V2J9cm/QQo;;Zsoqm"jK<S+M/MX!de*hF\bg-%3pSbf+UaaXL3tV-n_^h0;)jg=G#'ASSm0"
%_j(!p5uB$j4/#_V?&b%HJD,l.8ea#rnn;B(.a;3]4E70Bj,WG&-'kU7_N*Yjj\=Y^k^(hgGosV)aWoHA]m4+mOm`/h<VNJJ-8N6p
%CO-9hGb%O!)c^LM$UN(a'gISQ+c8g8l--gK$%e8t3RH5R,_+T.`O$G->iRFBSBAgD$p4j]F_KFd*b=SZaKAFN@TZTsS6f]0BFp6:
%C(G=H._24q%`A*qa6n7=ap@u-A%R)l4.$]MQ)As5Qq;\:q^E2&\jkp2IQ5GK.'kOu<DBs*kJ@D49[^(0R>%Ma`=HciX4J7\dLijt
%\6YG0Ou7ciYfC#ujUZK5.B&-?nYAYCR%k/2Ni&5cIS>GG$9?YsY$t,ll('kJkBaDUBEZ_.n"\=gBK8ZKpTQj?89d3d18*Rb8\:K*
%[J?DS)7`J0\?qm-\m2HDN"k;nK_cpdj'IjA.!#HD*Ku27b:oEOo.[DDaTg_=4;qlt>LY'!VWsUGOnVY(B:@RNU2P[A%EDa/-IN%8
%]dn*ik</:[d7lkK-DN:^*eU$)(lAn\o-FL-#YV_6&agj,)T2tV_oh9U(tN.1b`3JT1113Hds,B`HKVD#Gd5[N\9la.l\r(%U@B6]
%C@DtqW=b0"n^n]_EO[(q9e1Z2\hpL+;mAJJE3%XbZUTpl.9Lh?O0n8@2mVb$=D/8\hgSX$m(sAPW$8E?>e:_+.M(OW-.=OUr^AF>
%2-X.I*X*?ZO;N2\#(7Lu`0B^%#4j[1_?G8BCDa@IR(($E.QJP+m^A>M>P4)fLIT?;:H`H1O'9YONX/r$:)"c&]ec5I\pdm$,W"G/
%F"Ag6<_OQN'e1&4r5Mp:X7gKTa!.E\"M1g*R)N\hf;t7"?mUrL_5JN+KenWf\Lkng^;a_]OCJ`#7,4!mY?,jZ`f*@5MEBO/9.AhD
%n@OUXa[pgfRh_]p4>H8r[iqnqGU1J6F,EYlLgbT%61ltP,@%?DqHK=FoCis"\$8qJ)a1$k\jg'@;nt6_U&cXD!Li5/+@XNOS[%A_
%,r(4r(%i/@`'qolBe3-VJkN&!Yd%KCl?Y,FCr`Bn;A_0>Zc[Za(uuXQ6ZcP7FR[:0L5Mq7X#C/WZ-c5_KPdgP`ih+]_#M1mq=VXC
%?"5/9ASb"B;>l^?rIXZ*=Pt'$##3(TaR:Z@?:Mb5SsFlX#YKVN`J\toU"hG+lsTnE`%al*!*(@mY<]r5%'7FDobJ^M'Lfk3-:'ps
%pe6VNlYJ/Q[DV[h/H9IjC2-?rphr&UcO&\**Qa9$_9l>ZDGl47ZfU*.'<W.[%uJRRJ4g!j:"j8cKk!]9F:DWNTA-#\i%kd7deXhS
%>QlloD5#FAEl:K)#E'%-"#[5I(@%m*ago(M6?oXZn7n5Z1s.b\WmT7G#K:,+V@k9g$r$+n6TsMF/L=:7R2$iOB7pBahcRMM1QbgJ
%d9\]gmnlPREQ?Jq%R;N#<X]Fg@`[.P]YkqV^Fc>+iaFb/IdL;!bn\Wn<Kf*cBrB%H(2PdbQ@>+r;R8$WX^u,,7<\aXbf;)45"&QR
%#(HT#a\ZFa\^'A?085<BP4;ZG(+>\@qutq80.GEpXG4]<i]!T9E@+F2c/T+h!Y(%u:SP#.k]B$,\bUbKVnH)""oal]l5mMreMfU9
%#Or,A_e=@0O0U)n6fS_++[:hq;^EQ/%KgMeKL^s,BV^bCK("NQfj/+.0fEW]/.-"&LpS_!NG3@N:[MZOgslDlJdoh`h0;$<ZpnM5
%A&DbMCck1P>2+98+"h#3NcYp=<JeRe`HIp6_=29)E:^^*#<,,56</[2Eh\uh7pq;?Zt*]YR"]@SI?)CF01*\.d;_C(V_q8;5p_:a
%i.q]Nc`;t(0X/3DFN]Ka1oT>1iUTQ"dttO^6fM0=(EpX,.cbHpS+<k*j+gcW"dK8W685PS2agWgSCp%T&B&+8Q(I'P%o.<hLg0N'
%QY:.J"2T!5=qsdb(XC+CU4nLW/$:Z.'$IB0%1923)J>U!mLY>_[7;"65iVBnCNipcQ_@fX-?s@R8\eaI*`JZ%,#0ZS6d-RV5aD5K
%CAC[0F<;a.4t%O.//MIG,-5mpB:)"W,2O$DCCcA!.Nf8*C_F6^VkEubeb76>Mc^IUQr<qkP\JAs3:.A(:'YmmK.kr4R@OS\QXBS/
%mo!#.K[n!6)AT=?[#&Bei=T!\4/9Hc]!9;gaJp"12.89RQ;;"<(HI_Y`ciReV'lkO.%*k@fcJYBgZQYXgEa]q([0L8kG3M=Th-2A
%=Rj'<Jj#HeACYa1ptNH`0WKnYDWV[Vpcah/n^tXo<n==AT)i"[&4FpijS+R7"c1=R.>-l4*#e&e=XS27oM(Qg)AG$ZkD#p"Z@o<I
%55>o7be#fVP5J\nUL!C>2>t%3#<rk002k_nrk6(*JK5(@0ujZlf=&(SOJd?GGTqA#TtQOpS"k?:M$#\:ih95I?+ajpo.N<E_J#1j
%'[8i+*;_keWlGtY@"V.IgM7G]"1Gsg9a1RRK"NO#.of`b,`]8,Q6].OGigrV&niWKP`kHU.9)f/VJ,U)h[X;?!E<!ZBnEqBMqK=u
%2'G(9O]''U2O.@jKH`SOjmOBX6Lb0h]T<h^/VZ9S"!RJHR*^A:]PY;^$ki$/mT;PqE<Z_](=qtVhTOA>:-3Z-!P^fQP&0pMKc]P!
%81iUg4S2h=LC\0@$E3<=+AEnL[Jcn:'%<M8Qi]XRE8l*G8Hm"fQ#$PGW>]@h^ESPM81ZUq&pH3Y\LP>>8>7'PkFGPL<Uc_bk.S7A
%o*VjE+<],AfsU?3T&jH1Vl;/%6XOe9=KjIhJk1nGN#<;/^<k(DaUW.f%^Am91g],OR*7$1>R#nBa_Wb5*Y?.aF5FZa[!D,rfk9dN
%g+rCkFnM(R91O([Lj@S31,4'%b!$7)Q$<3sVVm`MkJskE?j,(5f-F8\?>L(iOO"s_f6q/mY?ScS\,fYl\hh=s-!]"U.N?Yo*Y:?B
%Ahm6PXegrNm@9P5nJ'f<4g=3OAsPMb`jmJ*8_jb&5"bD!#=k3f&W/(Bnf-%q&O2;':GM([pDaJAFOjXkOmisAkP(c254e>lF]5P8
%RM``9DM^'q^re0l"!+YOT`KkDIW=OrA]\psMb\`tkQZKI.IXFi]PL[QDFGgF@X7PuH)QJ16RZ=[qB^==-h^LU7<2tn%G8B5TU)*n
%Yj!c5;]ou<OlE(3Iuh_/pN032MJ:#H"eq4GGn.D'\>1bM*c@l3gY%j'*TE)Mh2"q0ptnKb%4b%*WP$\tS0(f[i3k%sfQ]tH%e"ZT
%8su)e*/m8sPKl'ZL$T;(i?X#hb9*[3S(GqhHj!pW5hJ^HN9<N,:/og#fl&Gk*eDn5,8(0u,&?;>DA=apRa.XXP,0@Opo](<l.%SB
%&=XZeD]akf1fG=e/p,gKS\&N>F>3/g&9u4DAUB*f]mO<sZ@p_2ec[$P?6$$KJZcFLPh]R0*'s-7Fe9T:F6t8hD3hoQ@@<:Lee=lm
%rLu#Ja[lndP\T1D0UH):",Ri0[,0aPeoWGD["rrkaH\FiPps"akK+6k-_9rgW*U&_GCsZYkoD&;F5^%0ZeoPkO=CWCGIO`d02[q'
%G=nDX3=+3,qkJ:(^+W%TYee7[TbrB_Akqa+^?4?lF)u1GbqpnaI&Y):29X=#AWu"S8!ZoP^8R-Ji6Z27TKpT=5E.A0b'[CcWV`-]
%rN(Jj<<qIJ@DIh(LO84DELg;2?6,^.h1d,f%,b0i&0KB6%#^khZ:d-A7P]jk#44f<iK]mpa$MR,h:/+Y?eg1kFhEp*:hW/6#M1-P
%^CF#!5jGh8DdN1NR?=jGMPJFCQltS0P2mN]-kt*WdL`:&>%DHoF;Gg9c,s^n+_["eb9TAcpD=KHOLXlG8nHJS-3W+?=ra(HDlB38
%9eqYtSs'Mi-W]B`6S#3#*B/;u4'BG+X;/L\GG1MnWZI^ic>8m=0f5,KW#=d_L5Re_[(p6r9sn^?L<aF81fpH<R&k:Y`QTpdr-,02
%b(ZeR=$5TDF@A18];Vn$WlX/)]C1`)'\O27O:H62FjJGBjMpm,8YUO'q!-(MbODhDC9or1D=G?=;MA8E:W,R"IchW7IW,_.?:MoV
%e)HkE.!s6#p0hg#[!@>Rg`OZ1KuC1@AGB22#mG"pXpWm-84<oDgDaGRQD940Gp3=Wc;mrR6,k<MMWbs\USi.S'#Z#;'1>*=I"oqN
%0V:#Z=[e3jbQ<VmnUk4r(?/KQQk_rEbqkWqEsrjk%hX(2:pY*cDompSMWJ*lRps#sBI6lS2@PAkZY/:!:#<fb0RK&Wj?:U-@3jgm
%mX0[RRn2sFj$%S!d5b[)TI!uN@s?YF+=IY:FnNp:a#T:P92Ls1YWaYW`'^8ql$T7),",mm3PB#@1uL68VRt&c*S)LU$=+n&YmZ1`
%m8VV%a;_^2h<`[QE_oY<+%\SD;A(AoLKAr0W8<KB<hpq$o?RN'Z1LX@XG,cU2@XhgXHPsc7HL=:)^'TE0MQg*KE7*=(ko5l1(p!8
%.TDC!DV(.&;'d"Uk48'<4&<GDq\`@?5s4N\K\I\a`L`kt)_^di;A-'QY9-u>Vl8X-N\bHJd>YS#VS`2o(sQbr`b^Y\"ON5]$R0iE
%n3^`)2tLdQae)I(B\Gf(N@=);Y_d+HP)?6PBGSKm&00s6DlBRF@f0KLl2f1>YuGZjW,UnWQ)iuC-2%O>;R5r_9UAebL%baFo.DhY
%oEca;B$j(oOs<kAC]\YdA928GE=6eNWi&Q[3)f1F[H_@N\g*[m6RKh[m7$iO4[$en<]"^a2^.KR)b@7.84H<hP^XVZmCP#672Wd^
%UGrfI,;7j,8Kajl4#j`B$@%i]:j%5_CcbNmkW.%W1[-7`:rEPTf3i#'!c!C.iH9U%3Nkrk`9A8++gb`%#dZ"&9_b"JZ!0&T<9cIs
%DC-FY8ANH4;eeM,>\3.@\jM`!CNV!crNNVL5D"QVZdcM?qj`a0SF_fs,:aBa=LmA`cppo&<aE9t($D`/?SNj<k&"a^ns(T)k_W75
%_NJcVgh_=;J^^?9U>k0DNuW+L;PWr4fTWe9"U7:0MXf]k\T,]8_D'-!oRd'hQW7t.WQ*-bmN+<?^lKO"iX&"B9R1(+hVDFH(2Q/h
%"FtYCP%A9KI:Vt.?=VEC?XC\)[<fmtn#Hc%Ni68Gm20-qa<>F(&);NnL_$8`o\"H.?UtF8o1g2%qn^o!Huh!G'3#_dQX`4`KYt:B
%ES[QF,42E-c"mAR,O1Ddbid!8VBI*o*q*T!n(Al,@SAY:Zg>CZQ.^uB10=s;CB6NH5PjA`ImRs\]@]/')LD4t)"Y*J.r0,U"On!>
%E/)KjHb&I2,!BpRMg)I[!@JWZ.^:TRIJRUs@?h#(OKb[C_Qr9_$`<rjWa!boWZV:"Hc`N4&Fr:E`t9Km67ZpkZY%WTiQ?s%Nb*)%
%+XVjVPGe:noscaYY)'_BWo'q*KJ+)b&!D$h8i#$5<i+uT`ibotGO56]GYK\CVoL@2Mg9;h#mT;T5+C5\5onG%E54g^pV]\BOGKe^
%fPj4qG0%P4VU`XWA*'FS9=3FRGRRpi*;TlGMA;nnP7bm;O0^J7ZAA$($lbq=ipE5+`M;k&IAO?Gq;FO[CrWOn0).o#9bLd0HG)fg
%eGbp]g3E^iK*M\i"p#pSS+M7*e,*Hr:F0V,88p@+chbOsEXYU#S$]3\Ad_PCaGDo55!rLR(RU$9m1<MRU2m;m#k/_eW+PrKZRqj0
%C@peR@YlWT/!8&n?#gTeM[W99Q_BI/;+=ppYtRpioAMk3+ca4F.]/u^UIcQSb:'J##\>:I4+]QsXiP/^f.r6UR7\M8"A4D298JP_
%W(''i:qZuR;brJkJY]r7"#pm*9]l^(k#kKAVmm,F.tZ\70)[aMPJ]3:FI*[kG!CP!]HfoeqRh`jdt^f>6G`C-"d;)<?I80E!EiAP
%M>RdIQVLDD*-k$b\W8,u0n(GjNLhCk*+=E"9E*DQJOgUV**r-PqCo59"_K2co&/XkP@r>)i@3qBQnjob9^s;U7#'F!`(6'(5gTa-
%?C85'<B6\*_fJc:o7iU\/P)HqEFT+c+`GCE9jSC=pH3^eC(_;%?<=IV2-7VjVkU:5qDD@^Ou/^EX=Bf^U:_U++]D_&TFo[;iG*I.
%Go1DXOTWm.FVg8<H8Zt&,H<ld#dF1J<misa0J?\!>d0-Rr,o9]W[f/Q`]Qocq'f$aGM^@WpmEm2H1+=00KtA[O9pn%BhZI4LDtjP
%,"gQOh#0o?U(`1;%UB:AFjogmdhTfHE<U"ekJ^0TTk3L;5-/;?X.t2=1-+WqqA^+2iO2Z4F%HGHMQ$0!aJ60c/nu^.JOoFq9c*4C
%Md?]";:4SBoe1U_kR&=BknRL1Q/!MQrf]rMSC9Wf?I;bQ@acjU_o`GH>$)P2-_VUX6i&lBlClPEKmadUQBNVs*X9tDa:2Ul3XVi2
%C:uZcXtQdIlCc"U.-KJ4lGQXrfqkc2G!4(A:bm'LRt3^J.rIN*"AGqcgj6K:Q#'p:RW0phDb>$8i;uHN`o,F+lc(/CDYHk#,ngs%
%0p>Gj,hP2)C=k/!hrFHmG#[%ODBH:.p-Uamq=Uh1p>2Us_[mC!6@(e"@8Fc'8K1'Am<*Xd$ot5CVb%nDScN/OJREh5&Lbm29JOGe
%UtN(c!-R89=tCDcK9Bk#GEI^TEYeo2hCPDrSntUKm<IXFMkr)D^">$0WF'bl?eE/J\fb/M$@Sm`hEAhPK72)6j6h&3STV&:8&89i
%T^*RdJ-delY,PrOGB-rP7o3<*,2!s,VIKH0qM^_?1@ej0OJoVOZJ\01_6h[126:SDNfjp!Q2j[+Pu,G;4pq3bTXndqek+"cVBU8L
%AU)?W/*=hiPVVH;Y)\`"1B2XofI!u;d'1)(rTMPJFUJNh1>/U2?+**SQ?8XEC!=QXH?gROBmY/B?9NLu&ht6@eIhB23c=(qR=[%^
%;4@H[S7c):gbJBQ/]P6]KIFao[#sG@H]?VWhBXCSV]C#8*bdJ^#i#Ommu[Rr%rQ,19q(C&R5V"t\0OuVC_`;fH8Yd;"-q,W?NQY\
%3$6\!S*G3MOTjcIfn!D8BnC*h4VG,L:^hfCPEugSUjFXt2:jgp=P=b,H\atAJoIf[=S^sD4eh&-jZEahQ>UBW@s1Jg5^82UZQJO]
%EN04-hlNk53eBQZ2r8s?W#s&Bi,Q5PcdIS7F(\3JXJpiW*_B>[P&,Q6<B"21*H?'T)nh390G9X]IAQ4P$bB_XPj)RreD)T[EQ?W8
%'/)I1s4f$s6Zd`f&2(,\l\kYOK<?kPqW$#E<G@GQX\Tlu#Y5@Z/P<WohVsDo+`9S8\<>IjOWB'F%Hh5Y\t6)Y3&gF%c["ts(`L)W
%:=(#7I122@>p#@E'snm=)T8B6]rnliSgX`@/"tBk?'U<3n*o-=o-7H]`g-bZ>aVbIl09U"+(gE**S/8>2Mnj%?lVm%1#Lg8+NIY?
%VfDI]j&aqf%#K1uI9;:fK/c//Y]!aAc$FHeO.)h$+3K7CYg9K>T$@"[lI3#UGa;54?l*i<M8*t0b.MBV6[S3U_;SI?\R][SamA4_
%r!K"/clb(b;ThV/oOND>AB&$K.lmb=@tZ`PJ5S6s:l<KZ3iO3I8h_&oZa8#Bf.W*kfj[Hdg7F(^a$PYO!^kl:ck@lFH%q$XTA>KM
%Z--`ZOW?'L'>Bo\:?42?eg'cKYk7l[`hTXlKm?JiR*ME3rbutj]b>S^,"cam-dmY63<"pJAd>atU)K5n"O"ogO,i5'e0QiBDC5$g
%JG8QW>.AmEim6<Vb0$4,HZm0Z0Ojc,WsXDG.0U$]5>HO>*&c4AiVa0AOJf:tddglsq>E!!ZqFOS;`7q6RQo:b3Q^^pa25_ZiqJ)s
%5o\,VrX.'pFu<:hqa&0d?HCWO7[\E8]q5VTLC&:A,8#D_krolKgmDV6iV,_&I+H7)f=I-5Y38s-m$CJ4\Gbn2/QDkM+n7[!;#Aqu
%_It,0>$7-2(:>5H62a@)`paah*tHI#Y_kR\6u"r2RCj+aWVoN#P'G3rZqeJ>G*:q[/'F;rf@VZWf<!q?KXhe&J_UiY'mS`<PHYL'
%#/qEP<-;tO3d*aL@XE.11([\'jF5'#;.$s+JPtQ,FmOS0ElV7KU-G^fE-=J4?&+%E_,428-?_WGQt,R^8YsFDA)59VN%G:L?U6oA
%8bFmDLh*>,pa\e!Sf%H!;8c6EIs;^s,ta'0m'.u<9$ppYUA0Ack!]\!`?2\Tqj%$e)NB%%R]D&V=*"5(79F/Ar0>fj(fUd#m6cau
%>2Nm)>Ik+>b,uZePk@^5d#m7OD&7%<.K5uPGb6iLd%,UmNka),$L!dUoE?H7K0o3dE0C-A8l@_R_*dCsFHXB`"fr7tKH:C2a^6)d
%,l*).QZ(cr?>,=K`0VeWr:"II(FRCu[:/?&rm47FW8q_l_!n(T/<HHOUO!<.^[opnc_?f]T&\->!:Eh-=r"Ig;\;)I6c&:o#!n;L
%k>;Y<_cUT'NmOnH]dc=Ha`aV(r4u2UZ"IGp2X-"Xpp1#'nOE+^bulp=e4C6AkrJae8_=.j=%Ku?M7nodE6n$/Zd+J!`:+Sd,T-O?
%1:rS)&+(X[\KDb/mi`7WT2gN&*a]Mm*t3DFp]ltWWdJs:VUl:=]ot[:qGe93Qj)A^Em`',3Zakugb#;B+uZX".:RuB3ruM92R]!K
%pWFN/6pVMGW<KtBgeHAiqa![A<Y*S,U:>7&/SBO@k]H:hr@h@A%`Hn16;@^!?YI@<pVY>N,rm'AX@`&5(iZcB,f-*]K6@GY?&&aL
%'*Nf0'92D=4VKD\hDV9YfLfK8kA2pd8tB%KG6p&D7979u73tf,n/!2pTqnrAlslcQ^k,tiBbL=Y9VKN&);hiEj82CoOF)Y=P2\,b
%6kk,2E-$Pe83l!Nr*c^RelNi@pg@>CD_^Z';ThXCL5%1eCU4I%6Shb#l2.'"I^r,fh1Fc7J%;(<ns9gS#kTl#+dtVd=IM,Rr=tYa
%-I!V:`d-4Xo7u;b`G"i-KQ?@'r\-#7JC;WbVj'?(W9I/HCL6>n!=HZo1.->agoguR<U;<irlWI5E(sg+93,H+Gal:MfMVlR+t+M`
%#\t#Sd[M"F8+TeS'o*l@Y[s^3:6n+HQg@;Lr0;!DQ/IVa,7*Z]/=+%+7@A/Dr09hW;bFsfrJXH,eQq</Ja$S=/$fT.`Unp^#kR6g
%-/]ZDfqeIs0QQ`-raaGU=o'l]T[NB/@1lhUW,*=r_mYct0;J(9/t$jAL'[f5&oKc[<`oih`,M3gN63tlUn.,'7X:XAk*@qGC:>1;
%N;j<tpj$>ME)!O`NOLqsGaY@WV(+VqdQ]k5L,18ep9FprP4]@Co@$$^PVTR77nF#GPaa-CmGI.ppF(Km95o66I\9_3]L5<&d[(a@
%?RJD057"s&R%-s;_&JlM\dXG9;Mo*!7;Cml([:a?a\maG7*L.'*TC6,M[\PGl&eYhrgk%(:!*>=TqC-RU@UYSG:o"f#bd__ir=YL
%Q\mc`C6\hLOT8F`E)-Tmi.th2d%G%P0aL?(9\_R[,_dLe;dE@s/J9="bYh%_5YN/CRKb)BpPoK_<%iddBE094-RqB_36TR/J>!61
%e?K#i?1f1"I@47M+(.rSdh*a27+Fj8Qu<Tb+G^=$mYh'gC1Vij\'P:7?o5OZ#)nqHfE'/.#(]3FCP#Z_Y[J-CGKfHKPQ<379qXOt
%#RrC9^`Z8mQDL'3Z+:0GWtD00C4KKI?,T\R\M#'KP?]jHG!`M0@I?W_s4Ktq--;)$OtdM7hNl>9-(7)R2:D@e_@&Df2)&4&+,o)3
%`Wq>fD3=u,h]nI'M=J/h`U@OsMoqE>O<kdeGBJsPSEVVsk.>H`N^0i8>;B'$nn'7/T-kUF[`hu(JKXl9SnC+C2VCeSLs$'4OFEIS
%;&uNt1<pY,A?,^fpPYV/&?u9IWl..38k@$(Y2^XJlm*02S=3P/XdHAl*0IeI;>#YaOW\ZNmV+Dfff_bN5tHeO$n=QMJL[,"^OgrF
%EKf6Tf3M^!a!GCd]_AQ/U87,t,Pm4Z8)7dI>FVWKFXA4>af%#s^L`UmhN8*g'Yli3,4hipb!dW_M&T%.-<O;''8fL<!sYKXYn%a:
%/@eKZ?:]l?RlHRlU8HTK@B@Bn#a(T1U>!^CP/mb^=.NlR\V<MoLR=4%o6$.fO^nGc2F.W/k]5irP>Nts5tD3RrIR!T!mNciau5/q
%LjXef".e];'=@8[3$k+<Q?kk$XmNalcQno$,ijV]/i)iGQCE\hG?f_*CK]L_$s8m%pBJM7>KPmV0aU0Yd:j>Q>/4erLQ>Lf6o_>:
%R+n\Z;(RP,d8+3^7IdtT[_sF(`4K.'5UJeh`KN*`k<afs:@V_e@PCn//3YA>+L[WK>eqUd_"COG1sY*c9pb1/7M$2<>o1f*cIu>7
%1IA);q5_Zrd%;>:@'i0Slu-6[WXnPD8L.t90->A;"h_pi\M2Y0)L%XN-l'F:gg`Glkd64`c4>Q.+BkdDQJ.Hn&@$+N;nEGBq/I+G
%P@TBfOjNhu^1gD_3kgqcJsId-idr=`fFa_7X6,Ure\TEB.#`mTGqZk?rM5&N(@@>;?P]+R?H:J,$FB^tb^H%X@g,W$.":bf+s>/a
%-DOtJ\oTtU>OpbY^+(E,(IK#KX%DNq`h2s%IGYaA8Q%j=-]pH?6@=@inZH"$8M^6e6=LAo<H5mp(H\iUZ7m=\M8t.oW?f%D=/D_i
%@LAl=H;um&[#]tua9==l^3Vh\5ta/)=3fIO>b&ier.=^-Zr"jtQq.K;DFOJuPE;W:UDJS7_!nG9k`G:5&[RrC4h[Lge-YkE?WiXF
%.66de%mbZ=UDL;g3Db3,+d>N`)#>h)q)`o=/Ct]a<ZmWZ?dJlHc?C31K94'[0c&[s]T?*'>7g:K:4C#%OpQS'!uj644NY1\HH0>*
%rRB:(iYuu[H1>6=##d&cR5X9m"X0[Ei9k.Z21o?\,G?-m@)?2;faq$1Y^3#lXX=t0XFLQ\"'lZFK4c2e"M\@5,R2(-l<_0(_];tb
%nHRU@XA!%JY@e]2@^khG<@K'q34ShYZ]8Sc9ErjO<CK?\%#/sF4G+LK\f;@mc6<AsVSRPEs!=\]_@(sBY/.G1#kVMLF<0*YRdBQI
%V]0`X:cCm"W7#YpAgBcdK9.cg1+B/rYXHMk#U)24)1%%Um8,NCUoW/<%[mX7P+9l_D%/:t-g&7OXrSAGP1SKO&)sq>/JMK&^dsdD
%#9ar,&c#f<T*HeYh,a[H?6PB0Ff\W[QTP%0#]8U7j%!P'4D9`k;1Bko+[/CC''DVLPJ!\9=5[fUe7fMl,Rko-[Sk%2fIpo+NO/tS
%MQdkJZ\"(=W9Pb?#`B2UNfC:4%br0P/5)j\/Ae4Zi/X!4+#Ck];F32hY^/2gBAGU5kYCW#=l7Ws&jdFl.8LOFQ%XAg9,0(jj!BB/
%a%V5XM_Z_ObG(@ZlZDBY$.";Rq^B#s=j2O:%2R>q<`4.kKNZAb%!u($:pS`m1XF0<GWlnb5rogY4@N#$-6JEb=sp1!#m2bFi-^HF
%0^oLrP4c+KpG3`lM;*n.3FS=E^QjF"*h3(ndk(1IKUGhr!fd+cOGFtPN+V$"L>%ZZYfs/rVa3ncMHXu(5?P`9oRrX(+?cEPji(<B
%b_gA(*Bg+X%sIrtl`a2Ij&_p,p.''X$L9Q"4&:=BbQ*Hkn@VihX[0"JfEo0ta5XO*`;clS>:.$EG!`j"]FLEO>U6f$716,a=UBBU
%g_L>?km8NlctTm%?!#k0'B3;8AZ/D\pGD1`rVNNoJ0Da:>d>"e?;+n_aOh7qVulQZKW:ptbk_II"i<;Dp42]"Y_P;`_DBjQ2mu9W
%-46*D[c6Z];"TEoEqf]sNjoHkgFsk1@M$XOGWl\4'$T,WD`m7iZgpJ*KRlXS-uL^goR)<'nsTd2KrI7@&@]$^]1Us;_oYB8(9m!.
%")QkA>=$[QKS2@<U>J3"S_OAdiZ0%JPi,!,.t5\bA'Do>&tM-)%G.1j.ph*rLcoXuC6`nG7QGS-3ed5j#M_L\q+<if>^<@!bo2'8
%8^I8^VdWTu;">3qoe/MGE*dR%l[9cs@7#I=3(]r>5tKW[p40/O)*4AlF-qeJ&2)fQR6;R!ecVnY3f#&7r]KZ)LNUNt%"X5-q33(O
%,l%LRRf"Xg8OgRB@**=L'4jmZ)Vo9EGEddD6>2/HU]O]a(ELG?TD],ZUa3l$a)*)lY?e\gku"^NoV@.2G.T7W!)V[ueJFL]FdpHm
%lXN^oY6bSJWlRrU9F,LSq9nho/(B5j%1BXX-4I)R@j]u0rrb.:Y)9&d-KL0(,UUIr\j@PpTcB_sQOn>=Nu3-K_dCWeM;EC!KZ^)Y
%OBs&1OmQ]\>t7SUE<@R89KaY1_GF\^04?=Nq3lk*$spfD($TuM;b,#PYqX@`0@L)2P*`B\V^r.YoK"uFklh5_:J6LDluDhNM#<q@
%6WLLp._lXtKNKbmF,?/9U*^Hg)<UAP,,qA(<H@(FZlSQ.25n$%(_k(c?:*E0i]Ds##,qQGc'p=ImW]'.omiRE)2[[:Wh87Y-d(ti
%-0S0%&gGgI22MHSD./q_Rph#\DKuN#ZjL!)g^\rDI"ISZg_WhGSrjd'0P/]p:-t65oot-,.0fpWGUDiMp?*-1Wlsg$$+$4"=<^"E
%BsEb'%u+L(b[pI4U7NPT/1YZ"'ui*DG"G8]X9*<C,UHk>[\-APT,\/6U)]A]&E"]D;gZ6+>f9A$XG"ZN1(BPVKUDfT/KqDZ%,*4j
%YI%?N9%_<T8pKu$[tFoG&guX8)ksban7,A4k_oVjV,AiRll7q*:07ah/Y\lTkcq"!add$@(^e_lQ<beoK6a\=\r`L;]n;?:0HlW_
%eZ*0C&S[')TB%B,i^s1$WhKT`U;8RZ&5c5"fH%5m.*N?2oIVFk5XZJG$/,t*QAqTNW)?#IPI6VnY.\06gk9h>&fbm)+q<_8?,a"8
%d-JaZc\4#7L$'etIZ(]4Br[VG9H\8\%=1@abjMP_oWn.,:!PLp05.RNHG]8NaEYS);Y[%8KT)T;Z4CQ-Oe<Nsr!_ir$6rh*3)+Qq
%A^:*B1)+=$LrtJBFu&HIUp(fYTt;6gg-4T'G7GJ11nF<"DRQj7*CV,^`tX5=Qd$Y96F>6<SW9QY&4>>$MXg$pEFGoX/`MU4.YQ0>
%=O@[LAlhZ[2@NEG*Dp6'I1ZdBY"0.#iE>UZ;1.DFf^TYf&lqtbBSE&c&TS6fAOfgX'h\fBlS0N5OW_6PmYU!T"@1irDp]0Vm:KUZ
%YV:i@kfQhum8g$Jb9<Q@VnMt@CnXTZXua]lOBiFLbWI0W0t>8Gm`]..l=gWiE'r-/OVEnT%CV7pr"OG8\aY;#'\j!>IpiTK-$bPD
%P</t91c<oXSb8n'LWlf0T0TS_`LS9/k<kAWLcLLfUbROaP_2)'JcDPc5Uo,l(gKXa'2T1$s,\K/Rhu;tAf.U;4e#lE$Atu_oEqmV
%cm!\kP0^@J3X^$aC.aJJ']l]G%*Q\eFHhO27s>9]Ba@=nau#G$#faN"]S<cXm$#sGC5GAr3/^;"-T;IRQ=)Z$psEsie9/fL(aG`)
%92:e3qt&[Df0P\Z;&mkJq?P("/8C=j3CKsb0@f8g%M;lHppN_E1!1`<_gJ=oY8CBVi`q6nI_g1ES3%bITiQih=jT_q3KW_!]R(aO
%&Kcm'MH0fOW'T!iJbJF8;i?6^,E9XGReT)[`uM0]8@FU9I:E&PLkSV>-]sKO\96,LB9?!:hR=,:0@ci*Al[8ST)ffcBi-*9.`o.H
%FcolEOGNq=q9Zj^X)8Xf!%HB4,Hjn%";!eR8//@(]F^R;[uTr+8rU53?u(]aGko'qRlH;U`Kl35oPjcjf@<l4Ekrs(d`WIJG_A\3
%RkHQQBuF&Vc+3F0q.YWQGuAV0R#oqZ.`4`;Z'pYl,=oJ;0N4"EBSLN%e%@.\;>^!aY6%O3OFI`P"SX%3^:g19($$m)i/rhp\rIB3
%;2c;Hf7;.Q;8FOAe_?uPRaK-ki+QdcbsP%Gf$"2A5-p=b7BrGqC`2YKj[rfiZApKNX./#(eJ=hhe!=lSKTGF_OO0:EEU^6'l\"VA
%h6MtpJrV"uXgn1DE:8/f>:DO*R)3NtO-3N8Oj(n40dL@qEA0O/]@!0Jl">H_TF4lR83u@[BG8@"S\YgWK,O/Z^r[5dF%:%=CiK_(
%nHht4d3N!P7_WmDA"K&)JCcb!i^:KciI!>+_:EGapk!ipi.BX&HccC2.kg&idXg9!b^H@YrP;?tbgH`C2Qt$,'XadVRM"_/ZZN.N
%1Z=H!U\+!8.GEFFK[^A4B:/ZA[2Xc7_+E1iZ@E"ojeq^mImOqdM'6q8U0?p'UFiqa%NoZ`4\.g(<&079KEG-dcI>m;=nh0..Fl8Q
%K9[!a/<"$`,uqH[BRG>,1S0)XL]T$0K$cRQQYa]7Kn:75/?N:"N-L2:+Y!q%Q8i9B?-fW`&J(`U/t?G1Ylq)ih8s0(Cf`6U`45H&
%!-t_`,+@Tq+W==FKe0%sM96NjV_'qi`U=<sRNWJ*--R\FBQBB6+f6Ft)6(0*:8dChQ!QSgabmnkS\#5+*E(JD6WR,J-G1N(+t>+_
%cZnQi./8O7=BT5fqDH1FU+aNV&_KVq+rFd2*C_*MV1X^J$.6As'-Ser3sd?q]]]Y'$Y45ddV9K,+kXpXgEPj-Xf>HkOufVSmGVA?
%=JJki,dPSY'\4:8IQ0rUK>7cOPr1RkQj=aqgNoIUElk,f58A'B4n]p?;&Zu3_YFJ,+^8*_0iqX=e%f`K\o\EQ.Ys*=S0ehs=(rZ7
%B_Q8f[T3:%"Z(gc',A9\.r,7V6fHS]WY"l!j(9%i61l!:\T0[D<M2nf,d`u7FnOJ2JoX,XJsG<./&u`-\H?"EMuj!MY[:ekGh)>k
%nhf/#]X=B61,(YMPY<Vq$shLWQL9*t_A=:1MXY-HY[UR!Q-$4=$p$S"@,1,<%ApfoMY2jsa;>_`nfbM`e@9%na'S[j7.rC"H,XI<
%;!?l8>1!;KE2RV8k1NP%./2G,R7%'\8odbSKeM:1gh:@"c,*>?aAFQ8iu#<d"]McDD@5*6\d4^i*#qA0IqU5Z31:Z+?Moeg;8Bj>
%l6tdO2/J^MYak+$VXVE$2o.IA#D5Ck8c&+/.X^c+iMqkR&omsW1*(_hOITA^=%>1Q^hb$)]9u<k!5O=PZZ<m%:sH:NG>\;N;H>_'
%"Choji9KqO:HUJ\G2%VXCSN1OUaU\hbSp*diAcce_#S]BTiA$314`^+)=La6DHG>0?oXkdLJ[,N1U-?lD$,%s2=g:$cFG[NN$'Ai
%Pen7*'qV!bjEdA!K+TI.]`[Z8noPbgNk<Epgg)KJ:G@MTGi_q1Zn+.#.tUPhV[fX<9ZuqoWt)WPc\TZa^1D*\$O`")=&(Cc"F9Fl
%/OcTlg=>[54Uf(\*0/Jmau",4Qs"\b/'p?!,"C:JX?i"p/q!1diC:%3g?..!'?4pTZa$X#D1U;S>9/5\VadEf=nbMS?d<C)Jh&Ji
%4d*MR)eF0Nbq&XhQnPdS,fVfYIUSHlHWg9@L`?[,qLLep]m-0n+`MppCibNPd`lAUK:1"$.moL4+1UUoA9At-7HEmh/qd.3+9b7K
%6J7:3<Q:d0m]/G:p1W,OeqKk/XNoC]h>Db*HZpK7OrRWs$g&O'5/JGZ?P+IELoK53Y+06FnMF'lJ'r"BUp"%8HI/Sk)X'f]=Rkkc
%SI_LCN*nXY.<o"]5D>a0ZVY)79qmM984[oCNMNM1W_W+*.+o:<Rh;e/<_Mh-72SdS$U4o:B!')?Jhj8"9a"=>7KP/:=mL?uP13V7
%O`YemSp^l7lm%L(Z;QcZ7@CUg.a%Ban&eX&GMVD1B[lH9JuSdQO1uC+Mh"+OSF=?VD_fBZ(kG.n]'_D-BMJfD&i_3-_i+h4erXIS
%og!!fn5A4(IPC"Y@t.X80n4uK=dbIsI76-=8/*'^:[U?f%p.mQ#/*T3*ie\Gci7.H6Ol,oZqd$9GCX`_>P5fHTtF![ArfGAg9dbO
%iVR(lrKMa09prg>oi,pKer/?/j5Kh1\+8bYOgd]/L\X.dW*t+<IK#L*<1\S@#Y60;H9?kmDQ*E+<i=tqnU<NiPCk,qUD[s*AQqMM
%_98'6pA&oD6_-[:Td!X=f6SJuDtW\R!#_`rIu$`@LEQgS9AQ-^?<6a6(+N<\pCfh8G!f:nH*'=Ka+6U+#r'H!Y(7-%_u1-o,ZGo7
%,sc7I,5Lf>9?!u1SY_261;YOai7W&kDIp8D^<rq!jJLB^0UJS.LWH*Ra@u*cn\lTb;lu[,PD+5i2FO(:ZR$&kkm@Z80L`82EbL6l
%<3nLKX"'OC:<o\;BbDrl'Q+F!V/5!U7/h"d[Ql$hs)nh?:?F&?cD9U0*Lr^G7Y3EHqS`LqSp2%5;M\pJ%Nj+>6&)k::h^_0MMT]C
%1*+]5/D+IOU?R+^rgh!ckmP"-/8hZ1LY\YF6f+jMs-3bA^^6j]=<Ja&A&][I$nZ'>;FKWhKLbTHLgsc5?HaMaMnSD7Z3aYWTk^Ye
%M,J>TLa$SMI:(bcAWct2p;:L&TKohDFF3]G-K,_+a9.8O6r]OmH&6Afqe4_nQPcR'<FR,#;L+GalVbWnGn@\!X,h.>1Oe9Z/IY-E
%#RbH(::tp"3L'n_G'\U-!@In>NC\mN%GBj[h'saf+bdF26.gj"N[]i/C55PCKmZ2CY(\Ji*-6`JDWePR!$KZDn"k"f<ksKaSQ*4=
%#W:?nN^T[dnaXU)(dj<Z;g'=r>0MkWk<`R<FGN][KBnOS9Y#q[0sHgY7Viae&MFr)rNH_R]H'[!mFg5$n!!jm4GA7(A;2P)1A!);
%W_FG#boBY1[IEr+0C,B50ET36HIaEpI4Pb-j$\7h!6-]ba_%HRko<E8Vg7"EmQ;&(JXI*.iG`htjO[L$3KfYjYH!31Y#6"97VqsK
%J(Q*TrKO:DBDq@DI!hm`cI7:1[<M<td3K^Mb>U+<$,3(s#&IAa'*TL^7L]@"NSs?VcoN/=Y0VEOc"b?O85'*Ke>XlM"Zl\EA[-0?
%aHM.VNoas"Z[XGA'22=TH+Yd2*Xor6qq<]__Gl&G8-t7V:]F(r5m;oofrX^?23(>+K99QsAuT9`QFc(EAE.$cVe(I-F[LuD6+#WI
%HAc#NMk4lALEC^X'(H=XG)H+aB4\C/%/j+%O_<+P+>]+ig!b8)RorZ@nW%80,MlalTMABfqgQ0giF`WOe]^JAra1UrnD'A366;.p
%V-kXNpa21(Rs,HLA:)m.Ja;UFmBW87][\@NkG9_:.duHMrpajJG`$k(dDfOPim[.Ae6Q8DTX)rk.EcE=)P30PEb[-I[L*>Jk94rt
%=g8%bW$L-h9)'+9=LZ_Js7j,#AD+Fl_]I4j0M/CSOcpmnA$T7i!2@L,]3?L#UAMfj=8F>U-10t>[dn&C2BA-kMg*us/&n\9#b0aS
%#&b>8lmA-^`'>FqmlKFW,RNk`]=i]8NJ3D,34aS+#tDrT0[a3!Nk!#+<CpNb`R,#Q'-s`RB.&XLAV!-*B1O=gVuS86+n=fk-7OXi
%VuR<OO6cK'8qrLhq_>FnV<#Odb^;/XO1<MlMeJ,U8m2(UFYc.60@`MCC')4uPQO*9"9k1T;Eq'$,:H9,k>E"5m+70I/n&f#-PZ&=
%P$Kq;fM0q`[utU44g?@sVZHj@=lZKO2q$U<dn6G8,^C'<p=n3`@(I$B,iVCDFe%Z506<%^-ilkA+-@==]Z"C1io>:!iJbE),>V4f
%5/hF4G`-h$RNaJ3=oRJ^ZjLUPid"^^U6ijpEj*V@4mjI:aMVl?^n2_I<D.k>j3%A3l''j@9h)qBMoT=-"_:COq$b^Q:TDTsMsB&2
%EQ\sN^0Trs58ejr#qXslRqKZRq`S*^AB9oLlVct4:e&lX:k\Dcs!Y`Rls>r2M-890FPP*=aU2cn..qPoNh6Qma6s40qs1hQPU-%_
%(O$/po8AaC\g--]%#A$q?;L9EK94jamd@i2.[@<>orE+*G?W]lR#+4*Z9U0fq1q>^m>0m\MOrj/jlDBic_F9sY=)+2d4^M2X]bQY
%P'+6Y,_3PO8TNZmGfa,L(W2ZoDZg0-@E_B$fLo?"m,aH]nSNefJG5fS'NS>s0F_,c-il(""O/Z.dM%bn%<dG!I]GQ6oI^tY`%"#0
%_F:(/L1E3afZ8kLYMf[Ap^dQSKG%P?ca9aQXn)>%<Mi"+b!11KYR8!'cW;lF6sE(g\Z*^l]>BV^r)E\3Zb^;@l%9)9m'K]nrQ+aV
%9,W5>/Vb>6]Yetr&&0O@JK,,AZ7R[=-Ecg'#dpR^<,IntU5j&H:peX=2Oa=s'rmq0)<tNH[l:CMlEEu-+>OqdZ7(J'bU,6Z":P4N
%HZNi1$/UW'\i()pT8X5TbK<qJUE0WJf!d2A]0?#3ZIqcb3a73@SFZJ1^09`uER)#2Z-ps11mBJa$SZU8;ZfH7os]'j3_a7(/+L8%
%M+.I,I*@h'Pf)1-s#,TN!q't[2RM2uEAraho6_2=NnoH)[2Ka(`F<c1TiSW(C>r&\9Ej"Z40HK4A>8n4XB%b0Mnp$:A*2-*89\+a
%<o[`UaoI"e+o_8/MS];\LA3iKASr8EdN'lk3A7ea=s+sehOWgD6t7g2':*0h4KmXrT=]'(Pl$uff;t[%gpn8;9>U?M]ZG,n9B6ZW
%bF@TLH#N`M(\lo9L0+9C<[f"n!p:lUDKV5Fj;V4*^K#cH!TRArdU>Zi^+`UH6IZoc`<dOpH[UmFQ!P:F\=Rr!fF[3[ZcYVm#+'7k
%I@)V!KF,MKiU[jP*&.B^H(c33K4<#B#@.N2.X#kp*fiU^Q.WZ?DcY3@?ELQa!^u!.[k=-.eV-A.8H0hHZMKcVAXh,u(kgNHD(8Z"
%L'!2`&E`M.k^g_Z'nij3nseB39G\?."pi)%L#DiAM4[LBp9,X']>ZaL7O'sPpP^LVhHV&TpmTRCX/f#jIB[DH0IgMnY'spg=Zb]C
%@kC"t@<b/A@un"ea8=/V7>iIL,@O="J(S_LEZ&XBVZ]TDlYEM3=^;-qojDMR_T5EP`=NF\@;IOJM!^3C&SAsbQd<S@;?bpg`,0p/
%Jr>&<"AQ5VCNiDW`-DZ`]l"E+SL`EHX]q>!cD<81K7ni'`X>)<'/LBhi0Lg+,_AXM3</t1r;93]l=/==>UjpJfbXe-Xa*Z=`NQmd
%&&<5hho3/;^=<cRqZ:g5&,^45/Jt6bXSU&>nFM,q-k7N(RfiX+hDS+RbTV/g3Q7YrQ;$<U*n?OYn=q)LKa2qG&jDY^EH+]hR$\C]
%f;A'/?O5UMiI:</s-?>X:ftNjP7oF-isU(tk+TXjAi4Z+T0qrT.r%iK;+">\CYecOQmYWem-]X%m&04An&bpq`_qWb*%msL`J28b
%O(l49q1p?n@opnKj^XHb=6n68XMaKe[]00Rr;93]\m.T>HO/XO>5_=u&aVccI7n%pAWSOSXZ4_E59JV?-K,Q^^G*?%<.F.bY".X^
%;8/`0@$\d:&h5Mo2s?PLBC2GV'F,5Jo@qODcDB'sq^@+[*2g[3O@6$Z"m/dIYQNMDV'1;f;WZ3%\<q4J\6p$r7h%D47o%&^2Vte6
%GIt179fmG$iIc)!e=kP1>]69jMM^W;2UXiC$3duOEdhjSYI]Io1i:?K_CN/Z*CAHiaBq6X6c/^ref;,pU]^ho7b\PM<h@-PKnr7#
%-DobQ=YdU89;=Pn0s&a)<&VIXG@*\SeOd3PN"Ef<U(sm6j\j66MX;(h+\k\_4>(Y:]:_e)eW-mZ)GdNdjl)`-6:Y`:i-0tIHY^\C
%4:a:bNFDXs!BL8J_t<mX?p6o>:,ZRram0Ii$_-(;5F_AmpJ2>LjWN!K_tel(G1!sQXqZ12C]P:h05\\4+MM\EBYHI#\fAE`s7Mh"
%4dLCHUeS+_N0PoO0:+A=GW>(@nYY:<Yja<NQfA0Qh0[>OL.V<F#QD484^cIt&Z?gr6&]Y2.kG$%4N(aBOQq]Zku8"6NG?@gWRF?c
%%<m!g!F.%"`b2r&7[cXCkPnHQElXlJ9o2CHV%'d4TPDC.Sq9OhT#Er>0MgW>&+don*""gb"*jGMIn(-eU[gi"03QesiU=:)g?<N5
%i*73>+<<=E^k::*9ebUEl9O$p,sj3)W6e"9-M[/lC4El,`RjRuk9!ZB-!-O=j$oS"N]OQ.FP'k;._gbW!=]GXogDjb4pJ[=/g.1*
%:?=YP\V,lSP]sN_N4[,j"991^.O7,!7[;&)S9]p8=O//!;61@Gh+_kA:_-\G5tH@_UN%Ls^Jg,tC?R#I'd#K[]bFoVedFkPhEsj_
%[NE\F(AO7\njV>jWK6*/D'$E?2`^oZ;b<IfX1]b/EL>=VONZ)<6Bo9%ilYt2L@l_N>W5Xr6Gf.-i^eWKa:kM/>2t6"r-=]Fp)p'?
%T<&%9HcH61Y)(\eM8@esDT;LLeL%RhI%SS!Z*n>Ap/t>4-"0MMe'Xdup:tK7S-5T(B&bn_is5]XCm&Y#Cbfk7PT\S^Gc1<j86".0
%,0R$#T'gfsg[qd$j+Z^:e?UBDTi?tVd'$`kFl=^PQ*?i68>2S/Q9;*92N`SbAql2]0aFs;6P:a>lOoDYrVrs9V+,T$rSft%O1.Om
%pultdC,(]P63TV^a;>>0*`]nT>].L*MIrqQHp8B:"IQr;cUs%=%5!^L65#K1/og3SaV'mDS"S>q74deo]R?k$(kUI"4mQP&7qN!j
%:YZ[;H3@D*a^NDa9%i,^S4lD]-:Y3sPmD9`o8\q'pNgP+!CcqbLio^`8&dP:pSLZ-+2XFf8#V&%!S`N_Z?E4Y)ojLM^$QU/""Od7
%Kj/P0CE/$u@Vg%Ydp9ebY^@cZ6/tr^`L2Ah`;>:K1%4HKde\d73AO>$P>IdI7OHF0,04G*d^3R?@!8'dn<=:E"UBT3gfnC30jh3T
%)NtQlH>N/*D1YpRnnFA*5ZE`:L3Ahl6_gH6M?jTGo@`O_/LnN7h%$Kj[Pek/WR$#=lQ&s[@['B@G#Q`P0!oK";.7,2-90X&OVZVL
%@31E3Hgg!C3u[kj?f6L+%V;WLqKoESS#td`XgDltGrW;^&N1#4ER(Y;a3"[g*_RYOR$VrAh\!P#1jlF#r0M;L\;:."$;lUO:!'V-
%ka;O]q\!<WOc9)<4-6.qTll?S9!rPpnV^g]3auCo,ZY2'#@/8fCIAQr0^o8S,.uC-+;gt^1NCRqR;1l9>>I[nLNTm&M]%<;imki_
%F%#lKVJ_l@b_,6,?ng,tN)605[EH_&)FPNFQt\5ZZe8kS5<I5V66Wk^\/MBOXN63Y8D1hdj[\5=\*&)F``5<HiHZUOoea6?U$D-T
%F@3Yob8?K=O'Lg.$Fidp:`;*Y]')(&:t8cjqd?G`-CCf8=6DX2=UAA;Vh%p#:P4J.jIpQR3h3O*CKoi$PUOLSAB9"Rf.&s9gd=.F
%qa'<``O_+s!3?8!XP5@H[,PX!WTDsZ2N)Di>;=FWWE/ZDZ(-Xn^u2r=\kaT9[X=\IZm=RQh9\pa8afbF+3k!c<?;qi%\_S0,8af@
%`cn9MOles*KDs%o#H\HIRoGom.-!][,&W)[Fs!aN^L+@Ie/Wr[$50^h3efMkUmc<7\Fk]RWMrJ=!e7)e5\JCf82RIU20,BO$D'+#
%iJ1Znc>6q9Y9T4:&a9SgpoOhti6FG'DW,sK6jV_(/?WBVkBZ&pKn'a[$2380%%iNs,!l]egHTZmj".\p-S>1^IfFgc9YNCS:0r]R
%8+@%'8dSoG7'/3/"p'+iq"pNQeQq9HG]ma18/Mc*>%/NX`;L*nNQ6f-n#0c4Nlh>G'A?dk0HkD#3G+d3ha0jNm8&9=`^:p[Q\K[Q
%%*pFTg.jAF,C17i[@OD[6DRJW^ih+UL9OU;4B'8V!8YXZ`U\TE1CEL)OHO1D8J.[PkqWnTDE?paSdaN->7H.mgS"Td+q5ONPFr]P
%8NMc?n2$L>@+'WV_ZC;u'H\<<>uMhKj<NI'$e(cL+ulg/V->!<bic)R9_5frbQ_[fnJ].775@`qL.9=^,Q!*$<sbHep",[sLd=9F
%!cHr^b1(\RM87BT0Qt&eGAudE;+?.I``eY4#4KP.[RYmh,sSWdB]OcPoieQ&pW08K_e>&n1=gF)3.S68*$W9%%g1uU!Z/\bA*I@@
%U`F?l"BCO\cR/9"I`Ad<.^P+/MD^Bi`FEK.9MM#b:g]o/RTe>&/bug2!)U/u%@YYFd#BlZe05A(%>snGFRIb=c;eY6m7'B3JZ&%^
%jPNjhd_g>:<PfIYGQ0bM6iG"[.cpSaBTj!gM5,]Qqid&PY##d_\4&OR`u2b3#1H#=#hdEj*a5WVVI6UJC1JdAEnror`"@uOJ#sN`
%*uW5]Fl1=(Dl63^EK-%3F%U.\T<qP`M4+;>P?3H8GZ0sh:(/?J@N[p1RD?:P!-p=c19USWb.DHf*R$/k'l^I$=Dlf8W]2#^.@]<r
%Uc]9Sm1_[."k1gch8Iih7H4XPk&AK5Lj?d)>h2Pq3UsAPhbgruA&<ldl9)uDF3/E$DqPV7_c%Y(%P&,@k'.'WUu7*]O:nB)J36"[
%=25n+g3iSB)2;)D5!KpFTCC[+:jNtALn6""'lVsn4KY!i5;9_)JBEaZ]XbcS8mhL&V;/'CEG)5%#R%O0g5&EN\F.6W[Z3L`gmJKD
%TrPpnH'rUl2"OI>VAmnOh`J]j:HucZJAL>26(dMr:=l$SN*I\p*7)(^!C]hiqWOQ'AALc_(j!cb5I@%BB=FV.mlU:0%;1>>9q'S3
%K/eqV*";eqo,)XB)>#m!`]!>\XcUA?3I*a^Y_Q5'3;@"Fgs1`o4+kb4,:l%QDl5G(MU*B<K6g>Kl8'oU'VkW^`eZ$&o.\dZq7aq;
%*"H,/`qE91^9f8Z>M,MlM94.UbQ`<*[mtWNQR&0iljVO1l/Y%WT`dBDBMB).g`c>r@(5_FG';pt52r2n>TAcekB=MEB6Vs"W=;^4
%+uLY'9co7.'Yg2A$2+WCP`FJXCi't)f6o0kf9:II[eJf=)*.m_MOoP@^BHEQBGd#OU\eWD56hpkp40FgnsH\Rr%+p9Wq]8$*Q"5r
%]%e(i,Kd=$(!S/O-+nlNmX(Mn\\qTSQRFf@-+hZT.Qqc`plm'/CmeIBW"r28)h\CUI8"+;o*']DLuWC,Ps&TsYGm[F497=?k>S'=
%.(l^ej:NPig\W_5fXdpA3n69a(CVlQ=m9rckEupW-,1#OWP#<Rp]iAo5WXWI7L9+r_!#&_Xk:om='ejX,>I@_:`X4J(dRa=`0@_`
%Di3:2#mXkn,mOA^]XY\<M;L<L]t%h!,cYF4`Qo^4.2N6,S\6f`*/mLA7l9;fRu27]5Hd'C*:<QZjRBuF\D38f9-`dUTtIXReF_ed
%cD#$V?JU,gY<[_i7[8K&>e++cm1G</M?d28F#Xpe\18bb<975VLlgV,c&f>seEsgeTi"c+5n2(M2Y^sP1ch!T_ZsJ!Me?2r^kZ$H
%>8.Rg5;#)(S-fYfJCC.'9P@2c3BW?,eIY7j07QQo7=mCW`g`oH9M_UN\"WWGLe[%bV!p6PN8!MXg[4+TeWBKs%-/m\eeRlH9"-96
%eo'Sb'0Hm0G5F_(AF]APa>I_aG$3!Io&@^97-Lloaa<P.Suq3pO+7>Plgcdj83/A%$rjHuG]i;KqS(!1;I_iH`^Sp1hc>N\`!U2l
%.A=+a]8%*HO`\-q8Y8L&*t^4Gq2Wm3$"haID7@\9ZLo2DT$YOegu3<@Bs04Jj*/&*QR\OL8^%ft-@^%kA3\3LKg_#Z'g\F@mSc#8
%Wnd#[[6t/?qlk%L/q`>W\c3DcPbmS!a4t&6kOQG5G6e1VRq$"d<\#25@,-W+[n`jO2rMfNs,_;Xs,TnEcrod)F(HWg"&sl?&dqQu
%A&e(7eMeHV1entNElPmC-s,&hAJC;'8C]G"!H6.ko&DZ]7AY_m2%d3>(?H&&1+NVnK%s1rU<(aTY2f++12E.+V2k#8a+RXEFF+"1
%C]G^M-kF3680W'DpW^]NqJ:f=n09n!Q#]:LaJUpdr5ZisR<01q-;kc>Gkjm@Se7CG>>T%=GlMF2co$2\SV8V"lZ/)8"@II*63EVp
%gn#,K_pM24kfgE;!3;\H)<;(s`u37LcrF.e,$p7gS:5q5Qc_jt'tfW)7,gIjiF"W\Gcl@PhEJ[O_U;D((pG/MNHjXJEZN]ll#9b\
%Kq=9ZG(Q,O.nI:2Vna5kguGKalbp4ZMWa0sI$o]a4M-#f#0hTo7f2OM6bp2]1a6%XfD"0m2Z/uYMo9C:idV$2NWZ$&j`r9CO^XS1
%P](iJ\,8B[W$(I%5sk2/DVhk4R?S7;;s.lQUuQpeGr^7C,:QsjnuZT[64bc<I8pOe3ZT(gJ,*5Pp(%Fq_pafRi&mS!^PV-m919]U
%Sdqbc,X=A$&F^7E"U`+`Gg9J*^JjD[6eH$5*"5`Y^j/D:!)jGZO8.D'837Z`3l^F8::_,oK43lIN=UIRnLKq5.j9cJl!Os,OGBt]
%b[(:3</#Y:KH0P$&/GSn=\dXJ3(EMC"6o@-MZP*]3G3]].?&ho&%e9i6?@pIGkRPc1BF3J[Ma=$UJ>2&Q"6M<e2n^5;U\u#]N:oW
%m*M<'OBG5FESERTE/lk)=ukVOQmChGE\s7cr2"h!=/&]>SV_eT)hU]f@M)i%<.U#?&eRr7oY27%VK3>9g79`n4T6+^?XR&.\<tlJ
%H/j(YNamEB%-OJ6p"<:kQ;npp]C+VWi!G)jQ6sZVVE37dmDXEan5/(h8>uK)7eEtOiXK5&JSO_T,35Q:%fnh100J\rXYX/#8=IJ$
%*>aaX[R'8@a'7TGAC?AS"#dF8q8N2\LuqSQk$gms.YZOj=L^aG(KX"Fp3In`p9cF2</"s@7UEo:8EbGONEN+X&;E?/'M[ZV4XAJ@
%H%@b%qN8etna^g#f:QE-rlNf@IdZnUH%Z=7i9-NF83@ZFMG,)Zb$Pi\pT;%C5t#tLZ9FTE]Tu;ll/U.ElV?QFRpT(+5-e5;Xjdr:
%+@&UGZgT;M\AHJ0#:iWP(W24<nQ:Z*s-&A&$@7Qc"Y*F>PuJ9\pYk$gQP*BqPj5hY[k;NQm8K#R:Zb'TPU5>P@D:].MtrC+iartW
%;Ft-b.2mfVnc/E*R@K[K]t1nk=Kr-0+iLb7m(5.7NX5`WF6-Q&_?'U**-O/hK6JR.)qrr,PqS^oMA9HC6lDOe,ikSF,sBWMgf)u[
%)('ZTEuCH)0doZVJJ^SJ@SKbS4?+%/X#!=r'UC2S)P_O=+CkNsJ];P=7A*4'c6bd%*X.9r5\_Gnr``u$P>t+\q^D`U1hWS&+m*/7
%;IO8BJA]R52S(hDR7c''3qcRKVq_VcPW=?ok^)(&mkOW1Cig87r_a*I[4"^uAEs%;G=!WR*)-AV!g#]bnXQ,q@mm\U.d&&J)Q/$*
%8rm9Q":IGgImd7fWQjHWUq(E_.G\+?;i1ChB,:jE&FO9<NNBQD97(n:(f)"#)!&mbejHL>=6GnS;Oo.JOe-1+@nF>1qdGQf2c+"`
%<1t)A0A-:qr,2l*isJhCa!g,Dn9BlOn_('B6;4X;jXMJK`NY?:oFs4h#1a^oGG?>R]oa/,4/fBPMFGgGU_=SmQTej/R.4nUG6n\C
%:_Tk]_K7;#FB+n%;&']UKWBYE.^)?+/hn:4nQ.u5N$b+Ef^0p4FGf',R.Kj[,q^b1,lf?0D1(.mb4rirX.o/bM,(Io4YQ=U7b&H1
%Xln5o=V*D7WlO,k\h?O':gli\$E(fg*!qV="YV?EiMB<9\460o-;=lX\7kR:m)\h8;@iq1Q\nFA!I_c0f(@:+Ai8/>l;D;"7*6=*
%83+6R)l,$ZPY4;O3?a+&FkQ$r_3["1/p8(b5ROPJ!)aA7Q_hakHKL:k,Dm;5h(q'+W)Y,,jr+Q4?Y['`JthOjMe!'Kg)Y+&*^M?G
%(e.!f=*OIOQ_?`U4Lkd$Z[eWI?@T5)fJs;GgZ;^]VIt5Ep^ijFapS4$)QNgL62=09[;^_"O"W1,#a@V^$tMUImqu1*l-Hd)d`5M#
%;7FT%[D_*(-n-:5"cYI.'EPGP*L6.`_c])K1TUF8R1:i(ddL%sHJtP_6+eco9WI^)fEaTeQSX1.):r"Vb$#cW\^VnN<KisA3Jfsa
%Q[6&oWPu18ktk;Oq`]5.6<(+!T-nj*ja+dE:uug]CFGsZ_!K(:6,F'pcNJXF%iq:Z[tPKWNcoi?b*'-VilH7_]_:0GWJ2G46[7JB
%C39-b&u.<`QqDEqYKp4'A`@JY<W,loQ&C1/,SN)GnbbJ8"nlN?Q;^g'HM;T^dA>`#dk]"mE!o*ge`o,ab/RH"VR,=CGKX6:/<%B-
%`J=-WM\(-%9uTK)$49HH$Y#t,T"b4KJOKX3H"mcj`PmQ=nd+(99`D8N5R*3HV)OQ7_AVUhNNVu(_!_hW%q>]O!kd^+lpb)r]6[Bc
%_j?J)>(2#/),C8c+p?YT@I[)4a3Of.Q?GHlKkWNF.&r7Hj!PF0(iCtn_rV#%N^Ff>O=5X#B3H!.;^()q:O\`(&-%#,%qJuV'h:_Z
%bOj1+T)h/Q0m>Z;p]."sZdch5KIg8^lJqc&/@b['^PR=U)7,DYcRo;*e'+q?Us%L^GJ1C6gTXui7Hj%0f;@*M<rRgG8:TDte2D`@
%\RH-9=LjuSp:i1skAJ7'Q[tjO7,#XSZBrU,SBgHoB[^Uik_oCW\Ijd@_jpp&<@M;9X;K!+;Wf:27FTV""\=)2$!0DR0@a.^<hXd`
%U"bN$;L#a.>h3q1GR>Tn3;GGT`K&a::'m,c0moK@V*=[\VK-?6/8qWk""7O@`Ge=3=B_n<M9\"Oq3gPA7%9+?Cd``W:eSVCDTjC^
%fn:%l)k)?GN@3OU-Rfso^GuuLZ'(L1iJTo6?Lo<o([MJRYiOjqC2isAr3,/71^B_BO:f,b<8IaWX>][D2.mV@r6A;=IKsZn7dX42
%)*9l!T,mD`?*8<k)n'H_K93k[0Z*Tqrd*;nHs$$#CD]'"YI&P#DEJI7=pmtT5(\[M+rXY#`^ek64:S0!EIscO&B,mk)b1"jMf=.'
%i(YttiI/QgNM"nHG0i%pQ`38)d,kZi/dI%(RV%(jU)j6S.`F-Y"8]QL4GFoHpgu#HlO^T>VE,2\8Bd9Y[2ATJ(.;i_AI>(X$?8DJ
%d4d"Fr(KVq-O`6_imAL`"_pEiU!`/G1;6HG!W(468&>J%-Fi7+%$E+P^'L]/p(V$\O4/`]rUMAZGkEP*H`g1m_2Ii>+?RIad#AI@
%*gtsg84,L("KqmFTJ/1N"GLU#H50-k(kQKI/AoL7#UONF6^J_2&SLCn#%u)b$*DEN_pCY2%WDQEMLH:ppn^q7"NpG/S="M[s7$lu
%8V/m_k36B5i!jNf)3?2[>LH\&^KX:<<:%6dEu4-2#2Q&%qnnq_Vf31d_:uTkP<=-Tht+<if"L>A.G-W:gi`;O`@MrTq6REjk[2$?
%7e-1%'ZV-u16qE&RS@#^2Z3i?jXE.3FtlHVp8tl?a%D9uqsgIi+)/j@n:hh@iF-(3T;Q7i'Q9YG<f$6aMt$TKa%9W2(#;IOQCY=F
%isgujA]qU81e_H71<CS$>gm<>)VlS@bSA:"GD#QHN].6Cq>J]YG&J'=rg#F3'Q;BMqH7D&B5d8rYje)4V,)h)I#B+=!iBhl.hE*n
%L$mV`nJ7*dc!E[_o]Df6:qXL1XY8WJN8<8KhQUl8Xtds9,`3_&iscV*5rXf_#Sku7`hmp038X-e`gDtL%39c*_j)/D`T:lt6hXpD
%);`^ANXO\=4:nN5prr74Y#ZhQPN6S&qjWa7^kL_<"F>XaGp@T](Ol@K&0YX$@'K"K*>c]bL/n`b*#-F4qWcH6(!@PB*=tsW725N\
%<rBu.p+H:@qnhlfaVYd[[[(l)/D;+tmCfd;NT#tW=l*nhc12'F?7s-TjUK(_ZYb)-IjGa4Y/oAs*MIltdCeFl3P`ds@@Cl/(X:\O
%JqKQS%:^0.T1Ihc@Y:RqEkM>bIJtg\C!'-=L5X!*VX-+q;7:[']VSqX,pO<^1=Ti-VN/ENiU'qGq(IEngs#8B+dNikP;+uRI;DZo
%#J#t"`'oD>2"ILr&]5R55Lqt4_&LmWNYU-6L2I=$57E^JgjKlKXcrHp<F#]X?mJ,D`kh9qoONuk,kOh#AY!1__*Pr\r/Kb(?'i.G
%#^NO1MDks75lSYgf,XSBhQ#5aqW#^OZ+Itp)/17ZAo%]>Oh:;N2/[eZmmb5W7*rQniZ#EIKF//<#McqJ_8KL]_:Tqo+)JA:&d./K
%Z(qnMqlm-<1)>,pG0<Y?8a_<D:23AoS#GR%E]:'G\_odA(/(mr\;o+-*Fa242`--J"Ie+_>hof3@WqnT3uNC'g^QCQQj@mAAj"7=
%?';fgLX(=<^<fsI-m$$/C-K,2'(u=HZVBB>/6_U`-c[0.YSG_)aW"Dq,q5othP0Dg[0j%)r8p)egWNUXR-r-;4#/C,G?HL$\]%2Q
%&$KXqhG[*idJ'FsgTtn5iI_kp,_-e#_RunmW,:=Idf:C%dj-/>s)Zhu(Okt&T)RBQhCt-UG0Jb#hG-Z8p2`lU-.,q2f8\u'_PHXH
%BGs+T9=lA@E!]?<^"&N'/8T$A,/j"1o)Zhm[E4"a"V6)/H\4]ld:.HT0MY<(^")$$HAf+`k4SGH]TJ#F+;'SDg"tT+j6LoAoT,`"
%M19me&N&V(p5>]+1&2scT;F&!2p+'![fV!8DC"SQ^Gt-ALu'Q;E092<Z-'?c<\hD.!1=VUN,R+&S"X@%m?l]d,t.ZlfbO2+#]PY@
%CW:3j;5D]0*plDjp9GM@dESRNY6'RSd`V\h[>]stVqFd5^@XSo?b`(tJ)pDn9q-6CfjZOUFI@Nr#JeLDin<PP+QPYSOpr$6]LfBN
%mb6m]i\Dk[o<Raa495(&RdVgiD'`=$?=($rVt['`NZ6s3QnHa,=M.[f2.B;$7eh_k(;Ze5hWRtjUefLVICr#fib+`SRk5pqEiU-*
%h:jR)CM9R4pE?r_bDKg]d#;nt3bD&,haVs3$i/DWFD2D3Oq8]bq8?t3!&)X,nnD@r'^b:4kj\7oY-Y;JcF72(.CE@'Dg7eN44trk
%>V8WHZ7F[jn'l8cjO)N$!#D%E\_fk5d#:VTr!h$dC(i7uc<RDAI'V_PcMTSh8V2!Y2KM?Wq@3.l[STi97Jj<A8glT1o^]RPk-odW
%k?Q5Lr<g]CXU%9E5dYGMN]W0+Mta=a*n0\'qDaFZ@mrt5]kXjeop2I/$_[B2nhm_ep#H$IV,tY3f#)J@1Qd&%4GeNtB]&;+9)OhF
%Xj>5[(@>=5?GfONj0NGGMYjNN.ZOaMZ+lu\=dg6@],ZT.,@'@I&It7UY&D:,ETr>W%9(Dn,53&=S]dquNFo%[K?a@\/SgOH%1A!7
%FQ7g#O366rBJdW"T@ID)kr/)kkWA3B03[SO=J3N<D>S-cdCn9sA`CY^PbQLFT=aRP2`jnP9;oU+M3hr6qUqD3$cAgMAgdiKQ6VW;
%.MHu:7F,CAJs)h^3Xm&0(5Ji*$EP'pT"[8U(0DM:Eg8u1`ZaNR8DboZ.+U=n5(U/LYbKak\_E.L2#8:cp_Gsi^8n[soDt)!._:SI
%63NoPRmO)foL8Z]h'424l/&)*"C_tLeelWSRI(G>/K^hS9LBo9&2n%Da>Tq_r3A]!_Y^X?`:m:5-h4le#$LK0D*gN7bHs#m-Y"E+
%:)G`d6AP!_*q-A+k!CT0[gGTmmL@>t&s'3Z(h8DR[)h*sr)oqdLJaD_jO2cpD<Dic^g(fQMnme@Dse1%9Q/[%B7I+%7<#c+_&&^0
%e+p:YH,J>L7qIBj'qp)Xm[SXX4JG[N%*l/uTlu%J'rCkej_`aO/<h)FK!*Jj(?j'!F`5B4*982)qARImAVK&N-b24nqN7.NmE'g5
%eAU\A9n.QW$u[D8l^(7@MqecIQrnFA6(i%COLt2/:sb3WX^BQ9/*9WID@iNj*[(eW@$D?tOMs&F0+A!6\=;<V?ZJ6IF,$TNb`1t,
%#^3Ef<:"LYdR72HUN_'M`?brcLs7ON4d'eRn!:^C]c.*sJ,=AT$WAX6hd&ZFV&I\'N-+-.lg&hiHg=>PLST:_9:O=VD]q*d)M]Wf
%/G\-F;-O:aC\#"ti>\AZn]?6"B:.td,:n0.XDT+b&R>;N6DE2#PShraEP;$<Bi51,qqVuA<LI+,'8VfND[8ubF*kHDZ`4#bhH2,!
%@kOc?]RmF`6E/^obC%Yl5KH=dL3F9g7Onk+9?em2OhG&o?USi-R0nO6oEJS65o]@,iTX#eD6O8h1bU&t>HK#XM(suh;Pn_lqI+8/
%/8mE?@X5jsBTHs\Dmd[*nqNd9dY[Hk#aCQ+QFF.+?'#1\ptfJ+lV%6*7eB`>:J>[aeh6dRf:&)`[V[Bo:g`piN%r/>c(F4p(iCB1
%NJZM2n'H@b6DTduM;Fmu"IB\I)s/[eU5@`!,J>M)A1n=MZg53t<pQQPk:QBu7"N>K#(\bpQ:Jk4X*EJnr@3W9h']EIToPbQZ+Oo\
%=]^uI=Yt%M!nW=C#cXK1Kh:<*%l2I8D>UnrDLdQ"hTce+3LDGq5o\3U/<Ef,bgIYH'/IrSe<0T&RHUcmg-fken!*,'2d<q41iN?<
%@_L7@jfYrCGi!BWVar5"\lJ:5L!f4dBP*ia7V+"k,_B_HceBc\dp"4kK)N)qq^n3)7eHscUI7;oPl5dQPe#YDT4mFfD/0AK#GWKC
%2d@"(HXhB>SMUL"*lb,a.TfA_(^-*Qq^o!EXajB2KNFBbaf5O"9D*o=`o.q;[NJm686B<PlbuRmCM7a9n>.D.RGKiq$:VDd-.NrF
%4L2s!L)D>!&$t:5Dq.AmeJg\SR<KE/iaLNT.fOV9B[J*EJRE5U(^o,'**,N%Q:IUl]j!&@7J0]<RXFsAFHMYXpm(+GMX%=0M7DDW
%n]Jeg!n9CJeJgD_VTi[6,nQ&/oPO&G^#=mTrUEAMQJIemR\Ff-]MM'Y`adlKNU(F&LJu7qA^82AdS0Ci]S8+/`V28d#?Q<LcdUhW
%1VV,OFP@btgH<\al9_M%mdJtWWp!t&`>UPCn\1"GWn%VQ>Q^0JG?@PpC853gd$?[2$)='fUHj7?6=jnhBP8I3d0)J#G]fTONj$2g
%m"U8!p!%j%.'p]VB+&$;&^Op:X1Xp)V3!3j8!fiaEmBXF%X0/MeiqkOZM0&>_XfIOEFXR;,V&WP[^[aUI2Gjn)r=N\IYn=>.jVYn
%(hWIIRg0F]:C5\5J]lp,Q03J;8s>067K5F[gtQlL<**KQ0/b/e4mC$o]PSDh4$1g$U$g20LC><Y^G'uinQ=8V%:ofOpu&_DilhZe
%SCTIk$uVk8=ep#CB/9lR[K_f\<"V\E4(laRQ;i+8R=*hlBlR-$1EnDj+*sn*2&s>h!,?Sbc/+=B-HrA*$0%iH;DqrQdf#4PLRUI(
%L$GC,;Y4oSFEI]BJ.D8>S?F*k71b6'bYmuj(rup.g\9Q"YZ>K4m-^3UA5)X5^3?`irjXiR:);H>!(V-NVLMCU\<.ZB,)jF8ZMq[h
%:(=H/HaC8aY;kRH1mNmGp4ahqhR$I5j[!13r4^N.@d+X6if37Pp,!:#?,-eU(2mF]]q+Z\W:I[kMC0WDOtH&r#L>%NVSjDY^k?H=
%jn]$i+Tf4^kQ+K#L$@f$+Ug<h\.C\X(2!cA-sG"BNpESlMbP1HTY7pcM)k"efR2e:$!L0DE>Z%C=M^?t,:QZN33IlfTelG[]R^0e
%%^u&Z4RO/.*8^ABUMC_1\;t=`n2F9m72sjJHesW<XuE!$)f8g_UL+qDi%jtb.,$YnQ?jnSo55p[N>m9b((Za7R>Nm4lUeag9],R4
%'-mB$Rl:hoAE#`hAKuo1H*EC5;"?Tj_"78[PT%KP$Z>;r+MK26SL/&U/S:3d6'C&M72gr<0VKbOj&9jB`Yk,L-*AgnZ;,FL>2Da0
%91Mhp&J\k^oS'c>&c3B-jD^%m!_Jt?[TB,H("kH_>W3]HH/fS_fKh(;Ac82hoN[`BVRjgYP0TfSj5,K^\=3kc;Ai5n[MFR%0.nG;
%rW8J9#i]</oK$+i35bjamc$RW^(6m^pn\m\U61(!`#[j"_u%W75h^.Z,haXr3=*03I0;g0_aIfDm\;"?4'p^u^(0gIdMm8M6)%[0
%74JNcbMAE1KHSThc,T)$Be]XMr9Q]KphJ8^.$oeJ\ors(@[XK5,F?:qkmV.n?<hWf*9,.HY=1.#V^6aBNMbsG%,5Z%+KVV;Nk&>3
%B'"Pr#qO9BqoAN-QT6aWB5UI7JdbACoC7Cu'qI9'q<HCGE`R.5cpl`rgY/gIBfq>gCB\"JhAP9R\7a)an9Q$be$1%5[:Xeg.j37:
%VgXtRDVQQi0?Q;r82N!>\a?+6:r;+3fJgr5+T#i(Qu[*"k)3j\FkfZ,DgZWdIT.OFN[4rNGmnblY"5iYha^Xej#2eDEQ<&@\k+[%
%5t%2=[<2RF:Q3iH=2lOcrYsDC\;r3#c`?V++o*Lg3^n@k\u9V<Q!Vs]Gf^bn\[],dhNHi!8\<gb_\3L&`jpd^=*YZV;(hH\SOQoA
%_OGDdF5p/n?e$[G>orYL+LhIb0SY.BI1@@=$7^&@5eu4A!"rW..!Tl^f2Q?]giHR'0ALW?_2W^m-9b/]q"Dm1;oT-'FdFn!k..bZ
%J#ZXcS8@4i^SL$fYj-UP8/C_8!0'<T"n<R=.1J7bfHh&O,G'NaPYknUg,=_BkMjGknaS'JKh2n5[7Bd+VLoHMgpha7CrCDPDMKcL
%ZNG%W%4`]'TH!LX\9oQ`liM[;^>SP^-fnA`c]--Gh>?e'TWU5kMi*t)W9<Y5b"/J(Gf16alFPc`B4IJO=,&HK3X:N,&BQsL]CPd6
%^5+X:1Gd3RDKg2A$"bd#NHYl59_C!nX.J.E')-k`+25),KdM-\3X.VXkZAGB@K&(P>K^QuHS19q0b!Z\5p/X\A=T]c<8):@T]Ij`
%,TO(KE=P;miXt9W$qIh';X8JI7QM>EMpoq0EfcAe;BNZQqBDKb5'd$q4@TD7nFKmn?3#mO<A-d&LTRKb+a:&?Lc1`G%baR'LdaC,
%$:;CH:oLu&-*?LB.,MM%]:bZ5G;:fujW"Ii!GbQXi>uHp/'>EPb@[8;79OBacq<$ukO?KkjjF2_I;6d4m3@L.Y,9$H25t*)$<InR
%R?"[Y&n??Zgi=X1gFe[CPU8Y8cGbohDk(l'-Npa2)Jt*YMO"9M,?1+D4q>,^\@(_&gc4J;3))CLLD03O8NF7CcOf'i%8f%+\U&cW
%:u"^`En'lNC+@Lhk\Hb-MYP_2P9Yf>8iF&NSBH&E5j-X])s,kbZ4APC%ufRb,PV5pXTMMI5mtd9Q>m9=VdMl3@9GBjjcrp=lePJt
%e&FD7<fD)^GYoB2gR7`GIG[s*Q!`2]k9:l.!Z>TYHBDM:iuBfogh.Sf*+4PZVMfMu5?@*1a,K&[G,om,*HqGrYC*]!S9)3*^sL%\
%#:tH\K^p%DN8a=]k8_hTl;O4SF-$]kI6"WW(Y5$d[J*UJ;+s('+'FuNJ/?_@,i3iXS\s?BfFX:%QW?B@GkiR=a9Ah&U(NGH"`Y5U
%j0@(j[hP%PA*6H6)-J&]`8eit<uEQ1cLo3rbH,d`d3@:Yk:go"5+-R(TIqGW6n<co(Llj5dcW,22$,4q_eS$NXLJCkQufFfUef5p
%eD6;Q`Q?!`Q>4:IpD'j"[*sGQMf9.]Z'd>YMaC[2!%>,U$!1@Dc4/,ELV[D\a8f93&eW=KJm*.I']E<UYt[1_.%f?]W>o.f;_1kV
%"e?@d*'ei0?5;E=$:%TXQ\9F).rcVoE";"$$qdPf%bm&Y5Z,hGYAP6!;+HhXV/e^+(VFb5!>d9lKcE!q8+RQ#FKCSA)s&(-Q-&AX
%W-3BJ2DYFBhF,MQS9$q<AqCs;g?<E2@*UdFFuf`&,K$lZ7nUg2]Oe"f&l6Z'NHVHsSObht+43;/m2U"+mMF<^p_$b__I0(;>>PKd
%:2T;K=m*";?XQ/2kZc"eLWWHh,/lV;[_Q1,fa>E-f""mZVt,ac-Xa2"hB8O-=j<q+:JT2E9U.O^5ljU+eL8Sq$a$t)d`0ge52=83
%GK.8ce/.R=$r'-AMK01cQS6=>6&hfu2`8Vpj]oKpk_D&^GEohNCl358[]fg6=AbEs*FZ:IpjptAD$*Bp/o+IKZp=7Qa$Cn9Z/V:+
%:^U!\.X[bRI-kFqf+mNi[M9<YVs-]!D592TYbfjKiSG?FCELb\#;$]7G2kX'pR,d&16K;KfX3K"RmkG2S?"DsSQZ-KML27kX!/2>
%Pd'4bO(E;:19%S6@M`LM$8`cfEuU63;9lkYEFlqsl.1`40$s@?#Ml<#aPL95SEn)[_1'aF(j+"ICM%?t!W2_@[Ou%K3WbpB[LeKE
%ZPY<br!!NuG@oLq8<J4S@BNC=1+a?GW7WN]!qsjJ[7KI'@>`D,gch;:3LY%"68:jMe41g+Qk$.@lI1H(`B"7W/*gH4bR9n]%Y$:r
%?BfO+Q+2[e1"W=g:]**<8g0TMAGC7dNR6&:ijL74mI<fJNV?dt.AM)cp)tq5OR@,YN`kNHEd8"'5k+KiAA7'6R-S:t[EmTiNMl.e
%cmW4aBR8VlZ.bG[X;Wps8Wi<g#n'>YgO/ZhcE+.`i,*a$n!el\,+V@hHBQUi0Y_^c#Fmj>jYkDp,,-mQ%Q>"e<k6gUH>SmfaGdA)
%\_%RA**F5b1rt=o_HVD/*Q*'&MD#46%,6^nB9Z\4[UJl:A4W0Wr%uN',7$a/bs<\SI/%],,N\i#,+qlNN,trmf;V.W]m'4W942%k
%KPcrp\@IPM""[l04Zg<]-h!EnkBaHhTZD@JIrKOH-76(T7IFeu$pPC,QDAT8O&sc?%L_D?0:[)H$<@4h.t/?%QWRZf3gVpAj.+;n
%neJClBiLLB%f;H=c]5^\L2_sd%,5"e;hC/U:k19'kPDFY.FpLa`+Y06kAo<oUiUb_'aKQeW!Cf5?*&*5=[[(EZHhEC4AF']LFk(J
%7'b*(+MP:YSa42%[UYo*_b=58Q('TW`rD]tjYb?a,t3aIjE!:7a=!/+F&>cTY1\D3>G!;?*9K@1EG(o]>)aFKZd3&GO[G2jF8.g7
%KlX0RWq4Flj2W.d`F>.-./#[N=,M%q@H-2."4PR^Rg="?oQ0tE8aQS2]Z4l5P'tXGT8e:0$;DQJ3U!-IR-&C="KG@Nf-6p3!ZuF/
%7EHp@1!CIK6=SuJ.u]<Uk^XTa1H1LYGZ`TVa[5`M]lBh<Fmt:23t.1*6QTj5_ln;CR"c(``H+I8pO3<o]Z#JO:suc7/s'-OQG<Eo
%WZEb0UI;5]N:/)rk2Y*)6D3f/:SEU0EL)!7Al(W4o.m(SIA]f&ceDuVX1FMPr;HN,`6i>1'41NQ'jI7n0/GA`i5m;pK6\-)#.*`-
%s'U25?4<rsgLJcFg&(sHg&A'cD*kp6h8c_trcS5*6o>@&reij-W@A5E3J!'uAVKpJ<Vji^[FX)Mdc7:^*n?g8%(kL3GKA3u-LtEN
%.7$+sA9sg62L=?Vms5Lrr`Jsn+"Hi6-l4Ps7cD,7UQacFVf6%:ePpJ`>J2L6JX4\Y>\'ZX=j:jD8P4q"&>A&$gfa>TLu\)b]tT-!
%)r27GKP<-)@OI\o3k0p(,$IEP)Hp:Gpt$g<=F`<'ru6&;oH5PTadN(/XR2u5[rf%n:ZbaVOAqc_2oa+KZbtkg#oT_1VjO[W4&,u&
%&oe#D"X8p-fkV!35\N,._*:Z^Dm1M*a*3fRiL2_KnY0=#^'fjYOl=CDo)]d'rI:rj<HF0qC0u0`7sb_D6N_0DN6paMmWij=Ap]K0
%`F^oj`uMK;)p^ShS34Z5*1N@$DB!Ug-_a0^q1;CZacG=1^!GTZJk2HKM^1:^79Q/?+K?_$[(1Hd-P?N5#igI<4m\&eNCP!j`?C$0
%^qoA(F(4*_%@drffk<LZ>#_hX&*oo"#MVrErcS5S9UJ-Bm:]fN6bRu1l1OH0:StUqo86XN0XG#S#GX)_H4KPTf9EZo6;0.U1j7iT
%SO@uuh\C$AEFPkL%=[E1aI&ZgJQq=Y]Ib5k?Fo<@eQY4hMEr)1H(<aMNLu8($)!sDT&hSV'kliVR1k:HYm!f-INm_^gYUZ`I"\3g
%g046F+UhHB/I)mV5Rhaj,NK9h-s#CT8fEX(pDS!A=7hIYjCSe.GkP']`hmDPnAP41J]',Y2S<e+U%9$Q;$13HYl56$KpkZn-\SK>
%7/NF?f/DFWL<+&05!J+38LJGiJhNkL>7(aHSjdW_WLf-'X^OH!TuLS+r(!S_\2fg#9'Ka=j+Y_/#_(_t*QIXZ-#e^f"H+W)T^<2k
%l<6#ul-@jJ@YDa*;'uIm#fcW!W*VQVBW?AQl8AL!1eKhE]>hnRacZ1>T(SB(n833B6,U[aJYim;72dos9Y:^E(**46Ma5kr2@1J]
%CtU0\7liZ/.1inCR2rBQc5$b*Wp1gehXM2_1SB$1_*U)Fa0!(FHt4cSlG,na7cZ>4ZT5XAi`mF-ho#ERpfJRTcf)>L"5ER2DYLS+
%m-sm7\E3Ub[_(U"VVq>ADU=n/&<Aq9P8MkY=W=_VKJ2<T0_Y`JCbL<O4$.2$F2^?00os9c-cmUq#RmMT%_;1F*m,kcctN7FW&Z+!
%I./(OOi<nZpU!i3Zks9MCq"T`AB^Igq>9]ol/CSgibGPLG)ns>#g2`T>BFkQiRFa5m!3.%N&ZIjcQi1:;pNL!K'd&$L/*8P9m'CF
%[E!Ekd$3$XNN&-5<[]U(#\9Wi%B"/phQe_c+Ao'Ye2R]lG8KF\p2^S1mABU\@B%4Bf'C\,IS7N\Jg;=&fJK;`j+fjQTDq7!ds)p_
%2o!I6+9\6K8E9_eP[UnHYe:WE\Y[`F=pde37Z5]1<iZ=,*Ugkk^Fo`6$161BGDgW22s]SUErcrp:Vt;t%Y;&a;jo<9Em@>2]4K18
%\Ao,0$:"PgBGEa#,5uKg2)h6k_?ke4LlN.B9Q;9)E*c/)IrGY@UK^@`@XtuJQg2XGNjP4?dd!9j=5i?"(IEJ?H5X+];T'%5bencb
%G@f-#I'?ZgO&]_YE:BPM<OPp7lP.stjbYCWJ$t8!s&-ce3LGt-B<XGnnKr62iBY7VCHogg_k%;^+T!WShlrpoEmI^.nps!75]t/0
%Lga4.MhsbO5'@ZU(J!S>.tCj4>rJt;N^kQI%WVJ^fFEpT\PD_+TI-E]!@jf&?gIum\+B,O%BCgb!6WOa@N:kmHR640c6Kb&G;jhY
%%/&kJMFVJY&;BOu\o55p'0RO+$jYeMT\m5+2k=3_ik-RF:2bL+[H^+gfjC^rFb!bn</C_ATX)7%bQ8A\URZA]<6GB.D&=U5lRX(I
%-N!^6=ef>`:W\BMbl?t6Z/fc^`fmap<ef5f7Z$]ZdWRU*Z.V?1T79?F#rS6o@:nC(o\tb\T=5_g`!`SD6<Xqu^p,nhN<BBFpc;XF
%$+kYMIK"rEmSPJIom]?Ki5[9_gEW"b]P1K[W%!PYkR\#SP>Elj!RA>^q@uJ-9Z?DURA`#J_c-%SqttfHlghOnXTcED^4fncC@":I
%1$>8>;bs0;OTHsu(DfVA\:CeGLM4H[A=n?#$fhWf8/MJrXcXA9'`c/A1/51I\Fm=h&C.>IpFG8[Juo"SHcQo,hR`qp69lZ8BI\Q=
%`]p8b`*_.C+5=0'UXq:A)N^,,<;O-ijgcVCLGrWXg-^/9B\=/-kg=cbBt9;^ksO^WTg/-nqSe2]$A"!6l!1>qMn;!bG*r157sZ".
%c&LQ&'^ZlXGTG:HmAa+BXu;$,m>W9GG_;&$S/uY]ZmVE>m->"N:#<9&!o?=icVTL\W!TfBJE#,07<7['m!>5?*KT?Nq;&CC`.JX8
%&W<upe,omU:H:@BL;XGqN'Ri8;h5&kjDCkRQAG:]mO/SG40YO;kN,@]1$(I-Mqp&[+6:6tPQo-/n^GrPSn+G9!8%OGKQ7e0mh:Un
%1.X:QC%<81IAD$`p^KoXE*fD6ld,"'ku)S\ZTI*T\db0QH2NDc/2mTubFl."3hOp/fi[!04BbAK42d<n!Q-kaOncc4e$$X7^D(i]
%Es8ekNoh5N__k]BDU8&C8!Cam[lhV-H)BJ6>5r9V0-2QG%PP-6^F<qrlk-54$(bqU@I:BC[U94a^jC0WO4'B61b.W26g#EoF6XVR
%O88f)r;94H.9"krl@2U^77!)kh=nY9SC*pJ</%kI\?FsrM_;"&,_-?/`6Z'4]-\AB(Ol?:#i3D%$\EnoV-(m>\N*+6KU!96mXs?H
%'q486LoU`l$L/m*"+'Ah2d-&d=8H"WkJ%RCj/[&9CH%9=F=Z1Y4Z1XmS'_aj*+\E;$&d\m[4SgN3uNb`qn[QBmjf@P*,ZP$"Or$l
%d3cM@V7FWg"^ItCCoO&(P4GTg51h?PVUH5W&3cI>nEjPnLQa2u3W&T2C=NV^b/s*8*@_g4Weo=#@Iq(]W@,7r.AEY%DN;;f,K$ot
%X:<$cEGWUg*eO?gFn,\iTq[/4O+rhc%dQC?7^Q-EImru\HAgf_$KUt[]=+SR"Qq$o\5bP#?VY!78mA=d%e`g06!pqo=-5.oE6;Kq
%+6DnG">hg[;'4:,dnNJC10#O\3-F>71M2[)$m#J<Uk2INBOM#J80j,mRq$Eh^Ya]r7ReXW3e9AK^U)W;C>Ud0fUXVm(6DD@2ft&5
%rm4JdE8O!'l)riFg$L5d-dOGdaA$-W=7=FtEXMX0/)n_7AYc/?CQ!HSe;mMGIP,GJ")fR\#agYK.dr-#J?.a1/R3dqKG38GACOP%
%9a'NoHX7<SIaaihjL5%Er3m>@YP<M4V:1B5nrDImA5$8\VJ7kcoSBCXOIGXL<RZ5k-oV?G-0FB\4QaZ1+P[pDY6Rh+0iZnqh`%&4
%IBoYZOISI%:N-cl/BOMXD)\tC[lRP$\Xt?^L^+I5JA(lfeALHM"1OuC).m`YPPj*?Em_l9IjO;l)c!+X[fQ4qQa<]7r4tC.qt><c
%GCNL.Ao,N-nLoV/)0VIn=Z5rFJ6n7!s%hA8MGu?SJ-6mV6bmTdps8Zb1F)M"lR-[R8;5/@<_*]5.eD?,)^*V?fDaG%&@rg)NVUH5
%,;A&$5>LAiL^+6I(\a\ROi4]Y&(tgrG2uOrRX1j^2rL')8i$!iDENj9:nEICo116`-]M+V<YGnDJq+FL4J1`!9T?GiNoG0T>CX?)
%C/k73QfXl&Q]-H83?Y)01)5V#KGM('MbKf3K8KM6bS#9TibtFND?q;/8ch1W[?uHbqLB_[Y>K/?"e7qP0QnVZ9oM],-4HgQp/Lf)
%LW[Ig9[%#$WZ(GfoK21&Vf_sTg*tg5):P@-&n]R^+\g'T;Wd\5WQr3rbXfN>>hS-O^Jhm@K0(Q*3G":?C@>?na"6"t(-#,4l1D4+
%*.-$(er/Eh5<OoMYfZ,OiX<ZGe)+M+;2%+#>6/6,r/./G0eP1&[b4uMWtpF8_OC-bNUXUO>hoTWoOX:R[bZhO&m@b19>C2q!FT+K
%[S=q-*\)<sb)D#)-YG+H7ZXQkZT7Wcp.lK2^PmMK(hAnpMmrD48+_GKM_em!h"7a?WF-`sDEL_/[HjTf$(MV?U0`O.$E)pVEK*XE
%7\lB55B>#@AI%PB"85m?5qBPE3<+T33qh[a%>R!N,5#Z1ECHbq;)r2sU)qjaAkJ6$@3Vk:3i`1n1U9S['H1;V^u\E`,046JAo?<<
%m]@ZG>Tr%BI2hAqo/0>XAUH^4*3Gn>?_/DplkA2fN-rK/$>67G;`6g3Z8Ws,TBRbg=NkdsnXGG0m1FbhhKN"2/=+(-Bc_22VR?sH
%4G+EoEOX%p@HoT_mb?,b&R*uTO->=AF"1j1L<QEMNOi^04@^7Yl*=@u./8VW%l4(;UIlPo5@IYVh9`:0ZQ@M^VH*Ml;dC;JNsJSa
%,fSg$/"9R2#"3;:4mG.okW_6YNf\+&FcFCJjP;i+Hjl96%QJgtV+(5cp2Z1HLH__aC8[Fhc9P@J2%1cPC>$'b+HQ+aT&:$jpA/u>
%+Wq;+o(_EU=#bC;n0BgT0n-"bYhTeG(@uo1E9+R#q76'@HZ"PUKp@&(*fGBc`ALm-,CSs*b.B5QWru$1C3+d8DN8u/*sthVk9-m9
%!`OP&Ye^3/A6m.t"VlX2fl('q_X&D,bCIQ.`Qd(II7'/ES`:QXjV7KZ>H&"lNsHX+nQ2$)6Dd`JEaVu1apBE5$cF)SI9[F<k;'9j
%62_k(M8YXshgmh1E:/W+a46H3h0pe>-rqX!U/XC]<IpN*SA\0@<3SC#CI9+g,,1nLGS&<3E<PhYElZ6WJeruXE[^F8!C!Y&3%t"H
%Tg`NNe;kK6aK.N;PR?A?k[Zj#X'g:e!_?ZOd6q,rG]02HL2+`k0n6OShAF7N3[Qm%\\isG\en,k6t56J>:q:I=`\\FjnXl)3WA0J
%4P>Ar1<lc?O`>0QSQ3'+M'/Zue8l+#S\RLf3Bjf>$ACGrq[o7A8_4$rIcsWp'kYCp!V$Nq4-&YWKAdNA^`-mUJis!4Orck`q@Jo@
%hEc%@i!FX.\Qh:U*q;Z]lt!\Gms]UQo;/VNI6P\c`.X*?OG#u\)$m1i3$#D6H(&/!dcjkgN*4u@*Pg>M#B$`N+M/=7KN.]B8VT19
%@Uf+A>EJflcf)f.L<kWAT!^d@*9#'V+i8Agj@ncqKf/ed&,">uE,YSPC0(0UEC%@8diq?[kidOLj9iJ@U1ZA-Z"6N^cp/AL$,[G>
%V4I))C@HUF3e^#K4N*qd3mq5@FWKOs5;/kk%%G/<0""Z2*u:mC]T#$:,Pm4_V&:DF"g<1*Zr+ZgG+74d1"Q'8!O>"HE&'!_*4kpN
%e,ZDh=PcN1ft4[6kP<1s)heq`K,/`/J5mpMCq;Od0^*9eYl(aFFmA.N(`Uq$D1EGC-QAA/hq^b`=Z\J0?QF0cq&e4"eM+>G$@p"K
%-&.:a2IuE1H&:fIj(IX?QJ)l=@RAOL]l;.Rg9`hYj)G&0n`*-]%NR2,Gq]4"o,ZM$YlO!S#i"lEGh=;l?]6IOU3.j^?K,nj7Acr=
%E(,#l9k^?-Tp@?9Q4D=p[8Xu#U'kQaF]P\n&7@*V^T]2LADiV7bUnkPG)BhtK561'80Ma-ZWb=i\!if,6lGKe7p/ggQRF]KUpu%)
%nKW$>">ouZEL;TQ\(.QKDKN3bcnAk$A#C%W3[)t]X?o@hYb:$@^g"UoUGK(lOt9q,QRrIeW$4OolA7\F<OlrS%"n6@!cN/$$6KVC
%dRhT>e_M=NioSD\PMqpWoqfP*Ls<nRbMQl6N9VnPB=H>rhSW+HB9_b"0L&OkOpK]Pddk%-X,t=I5j8I^8Bg03X$2p9?C/u:^XB^l
%i_fg0;5lr#H\=qY_kfrVi=.(#T6AbIOKl=]:r$%5:C%Y8<Uk$#^A+ri:\1ksZKoptG?:c"oNAde<k<j[)*PkK-1LS=*'LqA8EYq$
%m>qp++R<Q%FrL58n]TXhob9F%,UGpl*$*Fi_sUN]P_3Jt8G4LfMmEM[!LKCrKO,-_biLmD_<6:Fp`0kVK\AaWeX_ZD]<^m5>A>sO
%U(&0[98*4#d5-?Ye`nsl)[U)9mi`BW8q$[Y:_#;l>_]*$.^(rfd?J0$!FU#0n&ZV2k:3R,M[g(/%Y$ICZApgc/Zb=-c[tD&HG-:O
%!Wji"=0"W]`7)g[oYKGTq4^-UV":R5*[K\oS>/b;//T94O5[p9@s+pj=rs\E]VI7^D3V-Aa<_Ph6`D58ZU+gMGJEjVE[^74<E#"p
%@),_i=V3"=K+r]t$]ifNS9eC`l,U/3l%a7Y,UDeS2O!a,AbU+GWD0>P=T"8c&G8?BDRI1C\==pFrPginJI3,O#a?%Q;(D_3F0b5T
%BY\[,M.iF4gMgnp'832inLq$X+ZY3^R]2"1&DYGIA7hfT^6d@jk(;=S;TKJ0$L@.!gX#d%=i`M'h_4N$'H6q5mJapD8rLcbX1_Cq
%9N>Ah[':V7m(:ILm\rsG>B[M!AOadi&_TJAEZG?tpp?E_Vg04V04l#ep`,@6g_*B&R7<0==O;Zl=6YT:Q7m+aI?G`/W"7jdlbZ-h
%O=L-2gLfe9gD$lFKE.['A:=\=ZmktDj*1.eQAR4HEB6J&8F!V*"^fiaQ`?8miEjh6Z%RnM2nO5@hkSk48P.LO/9235&#Y3YBDmJ4
%ZEQM26qAMfFfBQi.Z$LT\X5<\ZW0XN@VM0@`MJ?0"coQC_hg$53hVi9d6PS&_e[Z.-i!>oa03A#]U$iLnS;u;^WWCaCrp#,'bTg*
%SS'*`7"]Qe9MdjgS`A`OPnZ@/Es'(7V8g$ErZ@=;bO=$mf>:Jj`9DAYbZ;c0\6]b)9>VI7Oce_NicPbdHss#m6d1Y^Y%j!ZF.)g*
%U\X+tiQGYZ&\NT;&qc:h'K[X@9np7H[;NJ-?dgmg9??Yp=>KblC%LpEgGoq?Vjc'Lrq:F@G&\,.O/KuXJXU$iLdI3D[J2LVn/=V.
%Uh'=G1RXU!ris6J@E?2`%.jf14\)6=*^L5D0R[hO'tO,^f6PWGUV-2e=AF,T3ks!NkG8tMi&Khe%+u=s"S/ZmP3L.jL(e<CVs^G!
%d%#a-#h[Hho[p`QdHTa0gq,$m0oGUBj[e"-DL$IP.d5_HY6m/[XDm:[3p3ippqq%_$^'?)`"#WQ5nY4Y6ADYk3_m^h*H9d$Slln!
%m^?4GG\HMlM_#r:9LK!qX7EbNQ=;lbN%[o)+g<sZPJ8>qaP/t#J74FZL4mIWrtRu->V6;SSC)F3?V5.iKI(5)XKb@r_%:0QPTiLS
%H/jo7c9+i,+N5r9!C8#h+\%h^P:[mH'+'J43`XYofCB@jhSrL8S=9HR#f`L<\fTjLO79d&>VJ?Y<*fVFJf[*#o05a(j1$q&3<m6-
%Cr:pH]iG%eOq-FU0TUX_j5NmlK5t\/:,^H2ltGR")"KUP=GdZ7%bK2Z@0t+ibPlq&rWZR9Woi_RRQ=M89:j`A*rSXD.D7S`U`AhF
%rG&nfCoo`oMJkGSf\n+4UG0o1A#>s<^t`/8rYL>K?4hbWBQBoRFkhC?BAEp\1Ul:)>Nd'0)P?H2@`jQU8I)r?a$VXqqjU9q.PV@3
%`'aJfW1sfW!jt;Sr>k5A:8D$.iAiAca]R[f]E+8BR&U>4r5i%-="B7M6cK)_#*38?GO$t0%Xpi0+B>-uKPMDCV_?61-:(8<+28er
%0n]^)AfChG@T32jT*u]q1jS=[+B%r,5o1P3-p^j8^oFmo0"44sLVHFSl/8ifs0#NNpX"#^&Lo6V1(L[sk-ZCq@<IH#!*4R"8c&@0
%)a'Zc6NoUYh:j(ldN67a<=8C14aL,f*)E0a<U4_18\j!fTKH2GEjf[KU=0..ZVB%"Sk9n[;(OdXdEGo"LqejLRON5O[8h`F8-r/$
%D:]b].*T:F,8-kJf[CUqkop/G>Xh@!\$MP;aG_p?5;gOLD'V@&q=5%PAt/p"ruuY&%2,A!PLB[IRc)SP&BZiB-KsbtC8Tqi`uGU^
%<A]=$:(Nd2-LU%?L*:S.TZNi<oRu*h+O!R!,Tmdg%cc9(3Y#_!\35Qb\t10&'@+U.@Igbp2=UR:__o8><6u.S..T.$"bVI]r"pPi
%aVS+7No>TsR1X#h:$qQ-`^mOI*I1n7Q98!)CT0ua":<>oI_$1o]+]-4XB<n$\]t5$,oYfuNQ:Ku)ek4@(+XBV:G7$b9J`&t/icKG
%&WAThB1+K^0Or+U+#R5POPfO9;[Ad?j'dBj+dGZhM*8a'fL)O3W)&@^iAmqQ1&U]8@l[,82OBAZ$KTsKX(jCo!Bs5APJE1=1<agj
%]W`9?qI4eB+`%inK7q]u$36[44(g<!R?KAkENu?>NQWN)k:oqOde23qiQ?7%2<jUf&#K!fSIp&3@E(94$#i`<7J[</dsQmqKsj".
%`$r\s8.ll]_NU`0+\QtZ4\i><\Ye=.[qmb@[HPGP<)nH?S01dMf!Q+1@G%&".c*#7]9XrO4>c17]hVG_U#0OR/nVm$[HG%-hq#F*
%OGX#k=e%;>([T4Re^A6.]t(Fp7=j&f7=FV=GTH='NhWBVIF>Is,WUW51M)sUYHR2`BA=*+WEc2;!M3Gs'C2&3Zl)(3d5%KH7=Wq0
%;4pVNJ8o>aki`&.\C=@&hgol-nYiN%Jr^r=;T@mM>Zt-d`IEZgn"OQ\ikr83AEG7G8Pr>!Gl;[EYpf)qH<P4?7(>/^%#Y259Y\]"
%(G+C\-TpP72:QrI^e7_gUqhmp_7(6h_Dslr=74+g!q1R)IK"pSWn76.XPg,G/1Nanp/2Qk$4db`0ERO_huUPhiL/UeMpcqpQt)ur
%YJLV^DQ9)nYfM'(&C/h0/'DL(2WUmVN<g%(=1D@CQ_A8T(:i2LhCd.1M"(7Pd'ni#n9?G",MD-Ha1N)ER:8=)nG5sT,`2"UCb:<t
%M=@goZ\e0ZOV"iC*k^hK]^t&IaH3!=nDY"kG8<:]mB8'cC<`)f-!%WLJsZ,03shJhN.f8^H*Qp.M"U+g]Mma>D4D!q8>^bN<gj(#
%7+Po7gF2PF#<]M%l7u*JcBnZOSE@W@..D2DP'9?G2pT=j!lU.qE\dk?QCSNRUqfXZOq`09*$/Xf^r'5P726%KLtO#%Cb$c7K"&?/
%n<,\TB>=V]ERp8V5>sA^_@1\D$PW[aQ5Rq"1Z0Q4F`QDK_2>e.8FWjd6b1a:?H\RkjMC/k/!2b34DZQGGDHL-5I]'LU;?0)3B];>
%]RFGU8s!5<rmNqaV?7L*>+:,IQ'sCk+aO_[mR0+u2b!D%7!M48Z=li)a3KBo##$qIfR%LC;UPH=?)>SAPr\!o-2b9B=H`Xq%QFtt
%KPkmVo5'.rO:Q9$b/B_5DRNT5`[&K$kNTQm*l[O\4tetbEqkP+%l/GH4"K/!:RGi_d/@-&<lH`]lGA]r&C>8so<]Q[g<s$`&-bb:
%,ST3H0WC:R#kl:kR1lV].7K0hF.RPQ4ETVXS%=aAU!o:`=L/f,b\fFJ3%rc$CF?+!gaa6m;EV>:;?_gPrZ3Bj/lK?%Yed(@WQ$Ah
%Y:9"gAk0AuH5`7)#hpm<+3e![`!jVS*N/T:%too'.$"`:'6@d()aKUI5B]6'T;'ZH'J[Vr3jX,9QStO'Nm\r)F[@%<39X%i=-IPP
%4ERZuH*pN.]aI()^@3t5XoTdMLs3)jR(:.gnXDEl]Q*H98n8j;R^j^6oq5T^E&g@@pFcCA9B#\E)>A'+_F?:k#jpN4i.\H'_h"/6
%":r+=8Zh*Q\M<"h_8?Nk3Ob./]aI()(PKZ]3Ye#&c]YR;/X8`3:`O^nnYP5PESuiU\CaP6NOVH.1NVLQ'Rftg80eYlFgBnZSh&b4
%O(V_.8FYDF/P@CqcVnlB@EXjHW$q-hqE3J"G(=]`?=jcN@EjY-TIB<B,YW^n4iO`r$7EDC]"ZE/GgYBPNUj[-Io%K'%&3*!\9$TA
%.o`o5H_q8DikQL/QBK<C)%Uckk.mIAc(Q>ZRn$9..<^e;b`_$bQ[&id\^B?[_t_J=X%l#b9&e<FHX&YuMjU#KWG,A931J@%4!,Ms
%%s'Mr%^RT*SW%fTS787t,'fB#rj=<Cnffs?VQ6jfG(B<tfPMkQK1R1p@52ZDVCLqSf@#[-DS2U9cbCb]SBI#SH(M/K<(%)"V-$S,
%jM@'gLe!#ZS7b^,iGW^ND)n[ViTFPTSQ79/]73<tp-+W"bsS<c-HVatXjD$LjPe9>ptTg**#`>LahnAkO'P/!n&!Dc05Mu00jELN
%`[^eLZ)/5A/&FEM`Ci$,0b)Bmdjc;iJ=+cE2"+`Fq(ID!@E`UIRk1A[_r'7X)fZqmK.<0$<6*EgCe*`qM3?4a<Ff-tQiXJ]M`boV
%*C6<Q`?Utd,gaI,lfLh=*a-Qrm;b2_]fcfCO':<BGL25AJTIm?a2L.[Mr)'8Q):+Lmb:k9Z9r?3k[j5/oLr#0<)Mnr0T]%LVu!],
%]5?RRn0fnP#R-JmeKZ>k8ij9PR)F@se&uX:$$*sG(^q<@a6>bU3nCTac(p-WJsmhXDBh3t?2"^O_-"]n(s+S"0b_P4AoHq)8Itcr
%_uAPLoENAUM(qm@E3(6&%VtEZC;)Z=AL8+T??Gph!TN.?=9)apH;*oX'U'U7SoRPpLM@76n<0j;H[2$1,MD]C6HiKR5T0ZC&s(mO
%8uX(qhRK(B16#TK<CAUk-G(;PhK\[u>IZfr[)pm3#WN*H5in9nI2@A3V9nY!EDG2`4[Je'W2QAFo^G4nYAt(ks6Pl!?%Jsk^KOM!
%]aI()(PG^7KB`#CKpb_T/B@$65!:GYF^gIH4JkYXCb^o@B^!a=pEoe8/"(2(2hntp7k""smDH1;_b3dK3>u+DHMI2M^dH=ADG8OD
%7GIX:D(RZZ2qdBOPe#+e1?kJK4E4FHdY!([[Z*fg4lkkGMb#L*a=!)kU*;]W2^5qZiTIre1/$_\TlH^-o<D5oL@dQihRHU3_/(?D
%\U'<%9^I1mPaP)RZcIrnER&'+;4EsFTQ[[MMb+H5.BBDa`J5'>hb%X]@BEC#HI5]X>Vlf__NWFY^>1!cFMGejpT@_E._RjK>t8o!
%c$:*Z.[1)^2#)r&Dbe1dbpb?E$i\AK#Dm+JMLc7(*MN&5E%?'d@TWo>V2C.@eO07/1`KmER:nFMBOa^U":@F0Yo\QjNJUdK&og#Q
%5.8[<[#s\!AHEl4S9&i-B(C!);P*dIqj*9DPO-QUgqLf>5C>%?M'$p2/LV3cf2AFL@i-&8N>P?a+pJih1>V]D[2b:T?q;>$Lh,g"
%7(6M;hmeA%MfWf`IdFfd,*H.!h@Ra@XbSKHY^E5-XrHBV_f2R#:3,Q,1k][AePP'arL_W)dGB=QU2[F#1?cQ2C0YfHQ'tl&9]-:J
%JL.K&TTDO&0V;_EHPeY$#VtNb;6>kq`,X$H^(M+LCr-HRC`?5>I/1:3L_$f[KmR[c"@^g/pHmcP?G*fC@YYQN6o)J:9h/[Z%O<mL
%2kCil2<;oL6_Zb9q8IVR;;#c0;n)uD<SupLNIp&Dq;sfQc)$Ql6RkWJo1d.;)qC(u*RH;$^`m_e%>5P\<%I^6TJ'9hTgik'c8Xjk
%D%=s)=#JJcdC&RPFX\j:&V-$1>!.4hEN8;$4FN<i>t+;UQ+J3$46!?A'NV_^*$R+/RQbs)FDXFpLIbS7$+'88rbc61K.OA?N4f)W
%_pM^F!,oMjG`Iq],3a_JkY:)!GDTa4Ro%Z4&^)u2"(.I&cUQ=f&[A)>%Upil_,Cn=*o3[``R0HL<MQIJ>=MMbWGrL^Vh]P)2ibT\
%,V(d[9k"USTbY:%1ZLI5"<`F_6lVbXTFVip.;'_nAZ3_sLM*TR?YKL2a:V:2?$rak6I,-i"]uEb^@FY1cNb=hOF`u$=_9m/Z!39\
%E6n,R(B@mr!2epHerkSMoCMWf<-q"H(]bnTnpQdE66c"q@u4D9Z_;S"ij.?p,3Z)r1I3*P=#'04!sj1>4+2YLIHB.?C[N8II1V8<
%o/+6kra>H;-bf<-q-q2lIn9@UF&oiT-rYo]m`!RTM-gX+;!Wls2FZ'g+sd'Q@pH$NigRiGUp%WHVH9]ac/[2lhnkAJYB"oVa?%Q6
%C4L@WrhSb1kWCco_@Y)JA^7>7`5^./@@Y\r;noA0W`I'*'_"nY5"(g;7n(i2JWWbUl%:Mr2hfIMoA]NRY*&T^9RRJP'piFf7ktu3
%<^-a!FcBkL>#ijeXMUpU8E1')mM/g\M\(NN$18/*-@_ZPqB/a$209"r`\N']3$[>2oeV.M&E?^5dRNbP'XJVcr'LM$SKBL+(QM;B
%7%jL"!%h1b!J)f;V!kARTW=Y-;<UX]IPJ2W3W<8)(`AI:D>.o_O:.<]M42NRDjc:t!bYpuFj/Sg#M`h39M`:[Gg$Mto6C_gbML&H
%.+,8%5_fXsl8&*L0V.*Z`"Y`c4@B8WRrl9+6B.'4Mmh;R3>+6;,IVoS4]rq1d45s4hmO81a$df:fe'15CL:jO'#L`(iP;A0F-Bh5
%kkuXbJQt!>%(8l98.MLS9^k!4gW#s)rl1^:.T?6g+tPQ=L.6_XC-0BV,[!d4P.X7\--1+HKPg7H4DkhZ,qb4mnS$nD*^VEiSCTsD
%!#e7@[RgBAmFO`O9!@>q7?2Zm@\1(i>aN'^DskuBWK_3KdS,/f-An.>;ku0SVobAdZ9Q8k\smUJ`CZ!N&&G\cL9#91&SCG\8#)K^
%g_FIsq5Yp%.c3S>6tf*ca>+:P7MQ.Oe&fdAk9dOb8BHa1(X_,BAm`cp"$f(dD]]:BJ3cWsL[S0r@csrR'q]6%&KV1[;8T';r\0`!
%nWT]JG^+uBk&`qe\GdUMO#Vh`?QtDeNR(V3IT\Te<tPGLIY9t70Z<VhM)fD]^4e*ejMnkrc)Y6!IaLQs#ROCra^Zht8UTFoKBs,2
%G==bQ@!e:?:C7^IiSTO[DnnJC!h4"U&84rDCPBM\1I_$C+^K$8rSco(<MFe18E`-QAXMt-8<]i1=PQI_Y2]>rVl3:lD%gibQhmB\
%`q=).gj?Gt#Lilsgc0ACK^n6_ktC*-]/FP#;X#*OJ\SNaXGQrG.3b@X&$Wb>mFf]p:dfdEM?m,2IB4gu79"5.X)90YK2?]Jb8<2N
%0:;#8MC(,EBo"CZED?,8Bp7NSI[L!]WW'+Jl+T-`iRkm1NoQ,Ep55*iL/ScW,0<tY>"0/mD'/-hh)Amp-+hYaCo@+;X[[&Kkp`Pu
%f'Jdh&(_Au]M\VnaI7TUrF'q=c-OU$BXQctfVndYIj%6iVE[J8BqL7I%hL!DPODM>CrR>krJ`TbPGiI%I$iAf<.DDI<faciE1^82
%VYV5;\[#:ZEW&nQ>?lZcs3:625*jDHp80%diqhtR_Uus&#=u:bDh>k-B?^6kA:OPKfB[OrF>r']gKOhJ)r"^a=09Wl%K4KNMV.oS
%ZRN8drLoNG>=EX`5Y2X+l3Fbn$SAqSgl1`MCHir@WPY0fb&Y0iOTVhjpk+Zp=k]Wi&]R(t^uG7Wk@')anbiWE4\e*qrq.Z^&LE2?
%FUMo"T<o,]eAP=j'hB&%+%fdKm'rBO$[b8rrY[`1'E1:p8l-fq+VFY+AO#?sO_5:*oi"+U_h<?*`pkI=N$>%`(GEoq]VXt1^.]V\
%nM?U7'!\N=XY#2_*R4G9OsL]Y.-^AF=_k:'];S9Fq?P*Nf\da(R8,l4p92e9:)34>$BQ)H+NUBO2,*o!Q^dkh]RLJB=<l\;*k6a4
%Y(D1]]:cBi.JKYihKF*[s,LY7,/=W`jK"d"$meM&hXYkn$rjlh(b6os]UPhQ_)hAb5+E]5k!](nmpB@9i]l3n>NMr5Do@-RCc$#L
%(VE\JCD6a,>Nh)``.&>=q3_g)&omuoT'=]43#hH2XqF#5FZu)q/R$Wf5XP?j,M;7u.&4F+Mj-X.(JFW:.Q%SIF71#cM`[o?T9>CV
%A*G.[?g!FG%i$b?]o%NA#E)ZDT#&pqqM2pHW^kP;@97KDbkm02Uo]IJ%mlC?NN0IE.5^L#4RWo2T4oqS0Y=$(s8#Q&F1YAb<:^%]
%/k[S&N_n[[qCg08hj>U)/,!lG:;aO#H]F*[msQlMaQ#*QfZ*eIRct2"Erb3keu3in!'s@*V2Hi2!Y6C+!9">W%'!T3rZS8C=tNd-
%K]#mf/CEXJmB-eD;uTcPgmij=b+OD4Uq$Y=4$87WoFDKW=U^A]cq,4X9J!nNBqcgM_q0f`:Vn"n(Q#d8U]qY9N@@UbZi8poN5R.B
%"h`;I2qC3$f$oX$)c.!o2qjT'O@e5Y8qt-CbI>f6`]P_+&t`$uPEW<6!Gk?19rNG>r/d$Q;?#P:9N5m_Rf8KY;ZM2AHr4Rd!i^%,
%J$AGW]XqH'ELB)-Lq'qae2SgbXD%WKq&!q5G-,HXD"5'E2Ge!dO"k=8#ThW1Gf,``;)Yj)*f>lCQ7ngu/YI\c8=1RR3</9Wc2!.(
%<aiUi3)W6_k9$"BPaFH17N<Gp;j:nuIbS!)0H!3akX4j!N$OncmqjnpR"]\=8H44:9^&,&[Mb%k+pNQ3Ko[\:5Koq;8j4[r@;)@'
%p9+g82VLCN9a@.;N$0p(?f6hT'Y1LJ^&3ga?f0K;)%N`l.b_YbXBnWu#>+F@GtBjS5^1X@<&SDN=?;Z',1=68dF9<=/GG5q(+MlX
%#`68bS:@K,T[):_s$f(cbsc$B.55D_5?ndIhT#@-17hS,r.@C*fAc^\7&OP#rpBFeDmPuuji%#)4hb%uTK>U:\4gpcS(h1<+autK
%HF$4?/sDOe<2<5V41PNDNi!$V1+Ho]r@;QL8cJk;`d/Vm)rjt=k!l4,^3s^41U6pF+tHDmX('/^\p:/KAV/0gEdZSAl1:jZC?,6H
%A^iOSqR5irpXrp%huPY5N@32$[lKp_%C93h!/l_Qgd'iQ=^=o(]oT$[3?b4fq1iU=Hs$T%j&$#n"Gqj]`kV;G=PcM7PX&k>dKE1]
%(@*'ZlcT5G&,SI]<DmVjmqh=%6dpH\lndGp.H3Si.K?63s,]7668>gpGVW-gOs>hMdr;m:F%UQk_<+FQq!W&J4i3Nl>Dr8pgeMh#
%%M^3<Z9S38&1BkF=am/#kcQm9J_.Y1[`.IlPC7e8rt!!!Fd>>/8N-NS,ssTi5?sL*JQ0`KJnJY.BQNOfdDs44)/aoY?/$'D(^3gn
%(BYca3pJr+:2u9/."\&'N@2blU8RK4.!.3E%eFuo"lO?ec^!"$R'.heJ-udN5FW#B,nj[ZS/qj?%JQ?uU5C[pO=3)a39,rWXV3C1
%X']C(<@q-jpbhY<)_3%aat"ls%Fc0Jm\g\FNk5Y:OrA;L2-uFJ![Vle#Bpl<]T&i0g$Gk'6!tO)03)]YF(Wt-I[JdBGlmk=W95##
%)GI<L]OiN!FM1)I"hM(TkQ2LGGTdK;!l/A]^`obS*4+\9@Q)BEiNB0%)47JGXFXm)'btY[C)2skE4FGQ1#)/lktt1_JDq&tMqOrF
%jFQ-']La4?XVdGMgZSa[(@u0NHX%G^ABOaq';uRB&I:^jD-l8tXM&'U_2u/5VeH9HjC/+B1hJ6`CA^[t"`CP60+AcAfbqK!&fd<p
%0UL]OP'\Pi`#bGL1f014EX_C=We!?FNbj)pW2X<d8VD]%Fb0>[NE+t<N.SCjGr=SnG4Y*h<,d$04VXq>A1BQ9c/ad.*j\G<iWMRk
%WG&0SmM5jRjb,lN7>kAh7V2Mje:BQj4XcX"J1!X.UC):@A1]T9QqWI&\kVFFH5fSjIV'ZOJjEpT7+";T_91Q%@5'3r2M+5Z5]KMU
%4`)aF5><hf@Z1RK-b\HJbRA?75tD-_AKh94M+_)6=jhr4GSfm?BVeEI8s:&_@Nk@2U_b"I6Y$t6FP'&7(^]HZIARd]Cn@U0ho>0G
%NHD3aAg)Gn(;+2g,dj:*n=TcQ`-Nf?@!gCrf0`ErI]<GQ@pSH`NEHgpM8\0pp5(j=$"QhsTOJuS^8B`&fqSU9-)$7NE$H1#lq^Z0
%+'8,;-0jo&+s*g0(OQfM06(5$&h#%.M(i@,/dOX%qGX-A31:N\8MBiQZ!G`bMWQQ`[LQ/D-$rQeZ!DsSM-U\j3"014hc@Zq0)U5F
%$^6RHJl!FM\'dR'QX'7iO!67"N5hQSZfHDrLC2QiC*,'YSR2rG@.$:W=b%lHTbkYLPCh0:9G"5in84%DiAm*0&2ULr`C2I_GrZNH
%,53=_JZtb`reb,<Bo!BT!np#dT[@A\HV/2jKC(!q]RtIV/aO**T'!uYR[f@GYim`G`>l"kmOP[TG+YF;42mlDbK_g:(c`pt_;)oH
%0\E*)Zf#AQkW`Z@0ZP;B5hp!@1:Y#_8-U5/X;W2ZbTaMNaWU#t*a@Knfm1deK>F&AEX1'(D+[;W$dJ@O.NNe9AaepPpO%TA=c]bs
%(/`c"#cNXRG:fLtm<W#Y\p@4WkJCXW/M<L7CPKj-N;eN=^_'DBaeaGl__d'WM,`cO"an'aQuq..UHslRBJrDO7u">l=t>9/a:A/f
%>m/LSo82jY>uEXAPtr-N?:u9bW(.AhFfdosI@ot#"62bG$Gt%#nN@Dg!`%:F6,Hh*+!^USS'h1)ETa$1+(iTJ9"g/^f;WX6(br=)
%S-hm-lX&Qk^rK`I8?MD!+q1Y*Mp;FnJ))qD[dfQP&_#8nINgmW.Y53LK0trP-qkF$1gg8[or*+(;QF/%7WkE[2Zc@5lk'Yu96ROi
%p^09LltB!"?c+A0VilLTD4\qMUcg%0<GSN/TAa]4$%EBDa"+>0m,'KHn_d56@Bh:5N#t=dijO5I6sq5@qC'jC+XS\`L/3^Bl/,q>
%@a/4HCj_B-M"dB7'fU6b6K4hC6pln=\Ls9$Isg.+q?9g]&f*8:iLQ'jAFTi+#jsQ[l`i2b;bHC?f%V(?k;-d*>iSl0N=J7eoBe6K
%+dT0EY\F\*8_aE(,65*"Z=<[!B9i5kPQg*qp;:![Vj[\Iegc_XC'AMe2GCdZcq)=Y9&?`<;eG7>CHZhF0IC5l?^JT^LS1VC![iS.
%V]%t^''74I6OeY]_uDRA%E7bPWlC?cWmsThcj(M58-EMoD1kA&k_nO8^PaLD/t86\=MdsGf;6j>CoX,BQA[`i[::!^;Mi4[L-_CM
%.q9(A=S-5rJDm`>*=thE+%#<!C]HX?DVa&bi-*LV5T7&kSq5`\VObBAeL.CK=DY/8.KQUodE"Zc00=GWBGq]Ve]#Xd>onWKcf-[a
%I=#&X#?M@6]6367Z.]:L/s[-_UL;Ad42XsM\r'eL=DEI?6fsYQo4!c]OuqoKE"*:/ga)5s09,_Rq"ieXrBp"X!X*a;S1`7TEL(rC
%K'G!/5mS7*MA5*g)EANG$u#VRCWQtI\2Xdlh=*oM.mS&*@\I^iA;FR[&\m"kA3N^-MHkUsC+6s$Jg&(0M/c<@(OY`t//h:+fTDN"
%#*Ef76=$Y7UT9Ff2MeEK@o]ltjq>^V;dp>/>%%'YdLisZgPAc[R1?LSkP==`%u._]hT,W]G8$^-3bX%O'Ek,IM%neZA5"3!Aq#!U
%-71oh:6G3oh:jYW1WmM/M:I/Sk=Kt91)Zji7ALh1N-a-\pnfFuPE)/X3IW[=65BBG'uNnHRLS\N:M`s*q\PSg`8'AL=PBL(GPT3B
%LZL#se$'Pt"]tYi?Xh0gFUnYY+"oo)h&goOGi9LdYR$O9V.a4=.CO&#U<(8VQ')]N"HEXlj_-oZ7Dh?`jJ!:oIKibT$oS/9@Ab5s
%*EI&]0"l%+*Z-=R%f,BjeVO='<^@$12<n1<mQA_#iGk0;0b=DZ=)M1?3RRWP/V<iOFEjL.Z]5u77't22GSd10"5U65j<:bOV8tr9
%>tf4P'PW?]dM*XP0`8#V@)4FB.6NUk5dum:3jp=S^Cgpk2$Xis?9n4)U`8>G@iR36NWsl\$HHLs#`(TQ-f?\TgNtTC%NF6p_e'C_
%'p?7oT7Wa662Jl/*4V-R6F5qf:[=.@4]E5]0,95`*KoglRo;aGq/&Ck_X\/Vk8%nYVfJqf>#Y%8=E%.:gfU8=a)'[L6C#dcGa3E,
%-u>!_lV[K"mqiXiQc,?I"gg1W^f,4\e0"+>=gl#QQO0F0IpJKtk(:Ot$o'u3l@=i(1NQ+Hq'90,'b\AfB#2H[W'<`i*HY,b*"c.D
%&-apN$8I6`b@"ljPr7Vamo/,a^1fh<6?f7!%+\)p/A5\Nd+;BZI+g[q`d6=$S'?:,Qb#Z$[`?&/CJ#q$f_;X^`->R7BNSol!]Rur
%T-mDs,[$9W*d\[r2TUs><5Z_a<Sm2^QD5kRP*%ja.0`5L"NhUcf1faj!Xablqbi\ME&,o&\W\0&Uf'd\Panb^\r9:5npR$'n''Zu
%6i]ds9$rF>_"8S`"bEX":^nS=JKRR[-UghaO>OlV@XkO2%<q$^f]t:-O@@`o4T`d!o6QhVlB1n67UKbf+^pANUSJ_P+rtph;q993
%7Q;KLDhm;lD[sjJ.R/[pfs,<"2KsL\Lj0pO)BPJK2:m\j_,@Bi5;b/dq8])@@i]!a$9'/Hoh4%b;ZcLa(G0U6=2j<U43lfKoT*5t
%ehnh-%T$!!C/AL]09>],C,f$2fSm&;ZO.bK&?!6cIVSL7a_L!+6%LXNIW4Md]>^Eb/nU"^&+aSH.DdYP)8F0-ai.g:BGB8K!1s@)
%Jh>)USEqcY[Ydr3H,p8T@QsRL@MUaK$$'r;;<ZO2H,Yk2,=NG0]W&LQ8D.tS?K-Ko+GF'a3ZkoF[F++9b.K=T6fuIJJYM^KfJ%=I
%>ZB?N^[u")Xp_ajDg,Nd$W_m7ii+tnrDl?3b4^]tLXS,>iT0O=0'eci4D^`5_DnF7G,sX1S;Fc@p.9b%7-tS.'LQned6:dm,ZJ5R
%8&%#gF<4%i-<2=EiFAIGDkt#F^Xg,ra-%Z=mQLXN6XSucMi>`\aJ2^:!=KSa*HYX"Di'U,WL3p&QAbb:.W[CeO*m!_9'SR%jde%\
%,;R-R5KqpA/kU'*$c/ua6ISEn7_b.`Xf+WV*Ncg.pcM=AWN?EG:o9c?]IalICo7^;*"@1ELATntJC[sNVV<nQ&6:$bFpgrIk30Zu
%hI],oYHY*cd6Z;99K.],#^(.[RuqQGo!TM>0=M;dT/#;iBVSd6V.Y`c;9uJOS&8[:h\Yg_h)VV0R&etR#jmTlK@dn,\:PL)Q1TRY
%n"Y.\jN(_Q7bRi4EV:5/*?73Y*N@\E&P"o^SdQ0bbpR'6\WG5UBa@h9=Fn\2`t@j4!A>iSl>@T$nU`e6Q9+SlMLIkAOq]VJ<INk'
%Num/EZ^)%03:#Pej*<G_P?b("jEOLSaqd!Mq)T8]POWrXXZ7dL/Wg4Y[5&gh\Y<u=2:&BcaQPS.2Qr+lkr=X.C2LER4t!0H]tN,X
%bf=Nf5Za5OZW@fZ>95<.d*=-@NM@i/hL)&Q?1WI1=+#<haKPn<H"h"=q8$rB>h+TZ'<K7D?nSSZ_kFrbHkZ+8D"N?lFF!jge`@@G
%-JaM;169</_'!G?mTaEkLg^]']V"QD6U4-Y0Vigt=b@TK*inVi7+-+]:P.K+`0o]PXU^38)Hij5a=,eI^U_JC^Em*3Qq5=aU3Jn"
%8na?_XW$lFH2CWNW,Q7uXc=>u*7p,g:Ml"rK^[eO1qtB^eo_XBdi'po=N-ViQ@ED*TtiU`hMae30`Z[oIJ:XT`o:(G_Y7sU%n@;L
%(B/dqD9lC/DiPbcLp[F/FHknX7^eTS^(0Stq?;`,<sC;qi/_gI,^]PtRFe[<<U6)n<98nd:<+L%^,IfiR@I`$&_Bi8U1PcpGqMM*
%n?int_Y;q!dV*3r++Ma'Z.!"uA4q(Pq?/6Gb:\.`XpU^@Mp#uDC(#*Fpj6jE(Tk:lgbuL4@WW/L5in!<8Ys=tGG18^)sUrA-G^C@
%Lu2Ig(P?TR<$:gn;m3\*Q?VeUm[Pe[6CBY+F*7)>@]^ep5IN#sK>]o%=JDR]=#8:fe)^=FIeoFO)XP<f,(1Aq%@iQ"(.MBf-]0j<
%#O=?g(eA)`QGaAV*8hKo/.?+FMm4'SAg05sB#5-*R@r?D$8dJBQGW^Ii?0a&'^sEFNH'eoK<_ANE7\6:WFf.)LPWSRP)D/tK<Ke]
%P$TN9YXRo&[3iN8Gp/2\<H!j%:;6"m^j-Q*,**l(5J<,q,VRcRJ4*BX:5<VcoI1-E-thnP24tP_e;H&mj&"YY19D(]&np)U-8;:5
%'f3TrCg>ssJdEi5ZEMP_]&J!ILlX)/L#o70a6ql-PJ*q%8BP8YJs==:2Z6lC4b<YGbW86R+CB$0rh0a#=86%ho0HMedBMZ8T9+2^
%\%G0Pogl^hgA@"o&P:qd=hbTB;L/aWjb*Z;k&t+n&jNBSl%rAM<(fBs1d`Z9.on^,p)r@!=[PX.U5gQ/Y="#!&o/G"PHcBtGH5h6
%U6T_6-EOZ3p<L`EI)<S!Q&mn8U',4rRFd.S?/leH)n&D-))d+(-6l/]<4J(=;,\2f'PqLN/H8QV]6&L6?!^W`R=RI:#<eFUEa`@'
%%VDEMVSng->LKj?7V+umZc?nD57r-LWbNj.39)Fui`Kk5jaqH'#n4HEQGV-aHi')IVPXP?Keh$4BY])p;#Qlf0GsWN@SD$G^_rg>
%['emq2Bfn4J=<8.#!_=oGY[(+h4+i,@dRW]Xb=nb+joIWKf90%6hAteM30VWr%;)!lYn7eFXn\6n1]9N>%T<sMnY2ojY<_W6[FYI
%H)I>4=e1YW'IK/"5Pe*[bAk"Hc/;\X'mg,7nM`&"D9_<9cXp*)&hK5;gB3'n`BHjOCFp9J`>_-6-E+m9?FSVTKY]gTT[77Kh8"]+
%Cl@nf;j7h[cFqXg>>tY4B/SJb7@e]ZMPu>A3-rjk6,;O34t_;^_&l\@;9?QEg>ZP7[5T6mZKu?fg^g,dW4)HYjZk%@6#r@nWX-2N
%iD'9g4:&X&e+6fJ$,p.*1V@U^Yhc$:*u?M18@QXF2Eou3kI$ak-F"LOKHG`CJk]ZPr/1=Tr,U?-kltd;C-RP<,VTXB<2X6/h5[,(
%?-KF]o@rOF]/[imf.7fAl99^_S^^.<]:9]s;^HEX=sOtXg(mG6m:#dh%Wp,cfNJ<_\r>]r9aBZ9_U)XHesgY8"l2LVPKh6dFj>W[
%"3_n,FA?6f=&BVdi=qS[pVOOI*)/gAk]JW071qe2\+TVBH`'l1-N[#'h8`XSh0-#Gm"8G1Slq][*7MtL_/$Yl-[R_MGaX3YS=X"l
%7.FmZ_*qtOZ.uqrWFBn0CataiE'Rd$ZZFBl'8ntfHK"_VL>S(!duPd8\0r,'R^ueH3Aals&o0]1qjqAln3(7PTu>3piaLfaFd'=B
%`q3)Y6)1s$87Wf,<!T$/Ac+n!Hh8]K$Em$FVI.W.EFgA2&US&lUR]?%X*`rRp#&fu+^7rL&C1h2Bbb<fbYbm(S!P,f-MiG%kX#g!
%g1=*o%a2ai%1akM=>Cu2*S'Bm=Pn@YLeYubb\D.\H9-uM\p[D!,eghi+SN'$;Ks*-V3H=:'/2R"4@"Mi)4V`9gFUn["N%.-;nHii
%=6#j=k'n9'j#7"h;hR`N?aO[bS/dj8Jp;h(:rKcDh3n"IO-ja-$9%1:#%`@8/)pYd57`>P"h?%CC[]+7n;N69e,)7;+0>F[fH%/=
%CM=cAiLIC%(>2^L]AO"bd$NAA1Ao>ZFBu]RrP9s`;BeFl?sF1H0V6^_QEA*Qg/O<L@[:jc"HnnmGiu4T]h`(l9DON80qrunMp\ln
%;h%#;6kcq`(r'C)D+rO8\;GTB6NQjRm4VoQ@)ZRLDTA<V9<qeH/7QoO=ms7-"hnEHjl8%cjG8kub-lOUZ$)-mp!oI[Xd+0O)5;mD
%8=qT2-Q/gsn\XTiP@[;>lZ.1/8"o^Nq8/9h+;1<i]SeB\fWMGa!Dj(Bbn,!uWlWgB;j4<i[``%07sZ;u_XI!!+8J'b#CnLgUrsj$
%'sAm0;247JbO\UD(8rE\[A:V$*\Za2H;8U%YBm6/S1_!iO@Q(WaH`.XM5<+*S!r.a$D$g6+O*ck)hRM&(rB,J[6/rAcLZVo\#d,e
%Jp4c8,.*516Pqf6`kDN$g#9e[Z4TH&r4r6J0QWSG!)pn8'(;&%a;M[RLl#Dn$U?@u13SAJ@Gn[/L,$';@[R'iScIM:@s9aPrG&,a
%1Z(L@L+>_0&phs"hC]b0QiS(jb4sfU+<hNEp>O`rG=uIH@1bo"%@?t3P#pb'k=rau!F\TOmfd.q?o1db#"<nM+5Kt+a'Kl<f9/Ir
%oK"bJ(<,C$V2XfO$SD6+Toktnb.Y.`Q6"ilATfGkP#&Rm_+]+gL[`V(nu+fJ-bp5;ec%mWo*teDXos-Zcc_6n!5,#<#iYcXU&5`6
%",if=M'50:knmS5Wa[Y.^O!g=PTCQcIWrg*H/a>4#<?J=#iY<inp^]oY):s%"t8q,)^&c[C=C0pOK^1pf8Re&WK]sAUaXM)#W%/<
%i`E2DIj*[r2>poa.0ZFa0=W8.AhQJAdN"4FrIpTchHa,+'LS(a>a5,jR0/"<bI]a\YlAt9\:.cP$.n!sl_C^5Ag#A=asJT)VTL?T
%CG?4*3d_FL1Pli0NWRabnp:.'g.DX`#m%1a.p8k!15q8HeYu$],rpjB3!nD@549c&7m9XsCSGK?q3%mD?[#)`r%JNESTLWSlheaE
%=l_=H?s?f3):4lfkqnX;$^GU'/(-=T_[^9@=?@$tC(n5qaW<HjMnm,DL:0ig.Zf>5_5F%?[unO0/+]Xe99KMnPpqBMo]J5[M6e8G
%C(h*[.<VJVkjT_a[/$i#FUf>0X(Ycs"`T0WSnj'UE@2d>KJal\W6K\:S&*TH%p]>?JT-ieh4+@cB>gB*aK,+icHL75ZhTa9/d"bT
%;d4u4m4s/q)ofsf52#dHJ2//4[bCX;IBot3"H#=p<`Q+VH*VRb\gC4]VEI#)-ekAKLUiW#@B:>tMo5F=U0nDUOdVC]h[.9#j<dbW
%6T@lh-;WeHCj_ho!soP14F<.@#pj"iLhTatae;%#RHbY-IMZ")fW1L?Ot^OI1rPZt<+s:mQCK;'fTN@TRP9mN1%F4*Rk*/mTjim/
%H2E,37cPH:$9$uG$\@Se,"lCYgnI<*We_s&noKiN,b:<c_jN_%-&7O,o-BqTn1A&s]AkojO$#&T*gnr)4sS:3Cs-9I=g92+(>?b(
%)<QUEde(VhDoQ6&4gH)g@[eFlc=S+kYinmrS6$Cf&d?&SrJRIW]1s,C0L7HD7Pn\09osJiN$K-ij<*ZMXFtbr9uG28CoHh<8#t:)
%D9+a_2mNH`]cR-q9TFK8^>hua_cU[6FP^:]dd?jj45_-YMbT5M0XMX;**l*f$k$T/JV51UcB<DV@l.r&?iA0dNGRe;CWJKPkM_Zq
%-u;!>aUI.GFs$q85d?'DTpH9mm$Ls3Ak&N8.If9i%NQsm1:&/BcF=Gg\O)/fBdYl'!P\5t'D]3)QBip*Ql:]K5Hk'q=$G\Z.U95%
%cc1a-%=(!?D)12*au<B3'-!#/b#HI*8RF7s=8P!8?=rRF/ipEdc@o-C6Ldf]TMsNhK89OD+qt8ia0?K"=:E8L-#S\t5.;`?`Yb=;
%s*1)rM:>k([.o^"3CbY^\9MWLL)i!D,;P2TLm:R4Ph*hcDF&ra99gubqD_c2LCA`$H219bURCd7ACm=BGUB=eSB'*WR#1BY0XI@0
%a82gkG=R0JB"$a)(N]7j-(rKP6!.-W(CP.E+1*CoG(pj+_e1]T?8$Btpm$-f2n;n(EhYR#LWsLPrhbZ(Q=F-"A&!o_GSsXmQK-M,
%Bc5&K<,QL639D2B/%_9P+c6T'J_rZeNMh*U-SfK`<(t<RoJ)WJXJ9+W`iBhD3\GlQMT:_1)#29/9Thtnj(6![lfK*hAW!m(XqL&;
%DI[J,S9"l"b,DNrd^o6L'=e^$PZh>Q`jXUPZ@6R36<oPE#ZLhqCf"rHbdK#ZR"iUhr*YX+gM+Fco_G_\JI$C\j_e[J@i\%mc@&Q_
%e)\O4?a4ESAo;*:0h?1,C7[+gE+Xm0nW.l`G8?rKC*Uk]/#7X*@'p*W'=BR;?hZ.W#['L9\8/PYRu!'WY:H0om,Vme0]%nT3&)@X
%6/3eT<.,+p^;In&$*-q17SK8&;p%e/p6C`Wj>EZ3aXuHl8%LuVp&Wpu$Hj6h"J\<"3V+0Z>r1(L6YiGYA#DR69S!?Aqf/MsA]O,j
%3RMO#EnG-KOOWLJE>='g9F)^qc?6S5S%SNU\;K03Gi\a=5,Y3I]f:iq%c1M@bg-$dBoLQo&gE>R8D&0WeX.X3.G&nbVm7"*Do@=0
%ndXiCm5"6/E@lPt!>GBkfJHQ1`aRX<!5,8c2+;Da9k/3RC`<:f<3'US/<enWS`Z*k(j45mFnu*K6RHh`eq+UHd8_:O>pP\8gdVQ<
%)HK@4p4,'-&Xu>@QXVkIE08GHh;^2Yj)>a3Ai$,/3]1\2'de&KEsc)DhF]OBnS+Dr[8)>A;fO#8;XH/WBAtg9N@')V:<("s0iJ13
%QjEQrN45&Y"d'_H!HMR'r:B#FC4rQ;",Sp%CR`X`fZfbDB9O7g@eu>V\@-VkRah,CPbcQee;32*WKTQtq;o8lNl:,Pn*Td='W?2!
%E+gFO[f,b\:s>^U9d"q*)<28`Kd,^T3*cK9GrKPd#'c^4.ii]Dm.bff[QIW4KN#,4PB#`=$K$bs14h$e+KSb$!s?MT`)[]@O1EPZ
%3V4jd,IY18CP>a!BlXt'>Fb++TeX_6:96p$p2(YTQ)+NqKpS>S-WX^m<6P)r<g\<9G\S7d752lMhK9a:++hBcfem3411cgG"M!(Z
%801nL+.IP8d8#MK)dSUf+6@M;GYD.JQDR>kG1u&`7&%P(kCOMNZ&PNG?0hl@*e%\+)R0:a?VXKDehU738W>F$P->SV05N6nSP2dg
%X,H3$ZSA"YYo6hRNBU'(XiWdcVm3YjGUpZBMins7M:6]D_2_?H="gJo:6`DE;O?KjOjH);din1-Al4nh1Vt0,nf\q%JKkC31(6->
%)2D-;AhoBWO6CG83[[T``Yq/hgb,q%`+"[N(eaZf0n"tndk,BN)4n,20\nS^p,P=:P^"0?ph7c(M[7OC:"t!,/H@3'=<fplcWWi^
%p(RXd@fI1($u;;\$>4BcZQ_-\(3WC$D=Or=D/1c&;FpEGpI/"$]1fun>X<<76p0#N<,'b@oO(H&*?Yu))TMBgn&?GR47mljOAHa'
%gi^h=bRRZ:]WAIB-^(kMB,4tmED02?2ET*WAl>3lAXohN>#.'t]Wp=q2ql2]KL0<<>)?:YI-%X+<Y_A[11N3oo\cUQ74Vt6JT>$j
%Vj*4Dkocan3*F]g<5F>mQKb>/%\%YbeWa]JCrY3q)\L9RM9Q;,_&!cS&I15S=J@V.cLe>S?;CL/?fa(=?<L,CZQa'\),W:k6P5Rq
%L"H^V/hS@UJdVo[$U;8YVM,S(k1erYi+F[mT3TC;:b>#/S&*=-7T>!UcqK\DB]NgI;rBgc'd@qKVDP#MKh=;f/W[T\8iY9Es1M+1
%/H+idI/g)5jD!Tho7mWB+uQrMhSb;/hAe!\)%Q#<enLnf@uDf!qt*e4_Y<L8mMUmEh%\1.;#1ar_A2]98u(.=>)/hO[ONE1#Q!#P
%rfK4#YJU$P$=0A^fo#g=,+#0#Q+LTF/k)os,*eKF;PX,;jO&sd+nK\uI5u,0N5fMXq_pt'.K9$P?GDLr@55lI;F2aX>0_LbG8GDE
%%i<?Y+hAus]$,QA=5j$p#\C+n<3JJ@l(_$9U\Kf3g6/k7fT\)kodUI<NG^deI4A0aZ9O-3C\4MWg`Ct,*o,8XT6dJs2ZP<IWt:IL
%>Ce*2#[J'VeiP%$$YXh;^*q<qb6Zp!O.T[sG*ijl11MSC\c`EJD<cm;OVqU':`##:#QYB<0cJea&7@73gTFj1)>"ABBrHE_,Y@DS
%7Ut1I$TFicm3_e"d0PRQb/J%1qc_CdnA0,r@PkO<,nD@qA)!7J0Vbmi.Um6aA)&H5Z\d(c=5Z"rUCl1_306jJ7$NRTCa(\[0JsF\
%o+X-U&P"`6Hc9X9ft'.ua%6+d`+`0&TRkN*B@0+[Co](SREjGc'f\.E&TJ'++Yo`G64p#O7m*I8e`&AOOO`N1APUQLP[ni5_N_2q
%kn]m'9/>aXN(4tiPG%HT6hlOqc%sT=$4s\NCG)eJk$2d3TAf[PH[^js3)W,*bW&;,'m2)aitIgmIF&PJ0pU-O=u.&*NOc9Ma1+0X
%/\2=eI,-<1Z)SlD`+%M*Yrp.nfbi:5&gO-^A%PYV$1:LpUN;+1@-fdl-3@\@SLOEp:AdYf(R<"45aI3!C2k&nWVRC/Mu$7+F)a;'
%@]7u\A*H#uf2XJ1UrBKW/ET-IJ/%HicJh<kGc!%OUko,1Z'b>Z',JW#*`heG'+3`;maRKSMO?d\ZJs&2P0uKP#4IJM=Kt4l(#f"g
%ckTUa9RRKiMQ-qQ!:>i?.^nOa\$Vq\em405LhDi66)J+DfgE?*Qlf-_[&PLN,0YC_/jU,DD<+3DWL0rP+t>pDkc(,UKsCh:O:esg
%^Ka`,#T3r6/?\P&M%=lqLoFKO1h0j:B:<uRP)#7Lq9GRm@kC[Q\^0])\V`>fArX1@5DWDTk)B*kq/<0Jl%uAV)1k;o#YY_\D@PiD
%it<W@_LLchJ#c'GJ]>\%%fn,J`DgZ9YWT*]#_g48`7VLM3[?*q@.,f<-%?=)IX*^anWMne'iV@H;1hD=KX+Tp7hHIjd7IO7Ah:nR
%VBS,lJPu_1M9HGQVSuNQm<M$dWebdk:P;\9XF5!6M5o4R`3b]-L`N:qW2MfQEmJ8bgl"F-E><C2G/X-aj'?1aa@Ju@#nR0?fu6Mb
%?]nAWLh''=)lXKrEY]eVGqr53*A&I4Yp,G[.RnHEIV9<.V`X!58j<lhqlHpV$thjkJq8Vb.CNp?4;Hsri<=U#Cb@n1o3Xp`KH\=1
%YXsMP$&&7X(8>XI2\\XL=nGH.NM`HWMR^.<"8^lp;Rlc^'_.It=p7:@6[!-\FGE5@T_L;=j<qB1KWBs$fJZf_2F.pncd*hf@U!,M
%^'KUYX!^]'$q1Fib1On1,F,K8MR^.JKSQJO-mI%QgZCl;BSm7h2jRYj9`tM!cHK47)&nR4R.mI%!2_4)fAYDNV21Jr`\L=%01r:N
%$`n<8V(@U-p8Wt,pl2_)&JahBdKU&$j6<<4MQ'^4Ahk++3WrG!;\9XW<c]!_a6#*,4u?+Ob9[^"Z#,LaaUZ7I'"FH278+*Lm,fe;
%7#`kA<5aj90J8?L>Js4S[N,iJ"otp`Z&,Fc+%9ALb%2O2]jT^rH";un,UuPdUEV2)NG"teSd>7A<W=<5$r(IO\dP*=1tuS.Q1cYq
%r5e!HVaMIT*WuX<bZ6Xd(kD@XaJg,3?G#_8`Du8+[l.4O)k=m;ATcN@mPZje[Q>D>\f+^2ocrM/N'c,"a]=)]RK*d6=p?8i/K%<m
%<^$cu]uXK!8923m[j%75b#?:s[pmcP<5j*WYZ/\CliGL5d7l>1dGA#Mi`l/U\@qMkY:pn`',4FY?'f6+"B.%D)n!6!!r=0B!N.6U
%5\Yhg<%RI3R>SI,/\3-45e&4tQqk,on<01URIPE%MCP$W*JZE^'nf#Wi5G1'SbBXrA\B`TR3ocp+Q'HZbuY$S.h#P/'p3._qb1%D
%KZAsl5pYCkiorfN#qHUaMQGIG#:6!tAArj>P8,5QIAk5E(E5Ud*s53U5,N17+POb5]S;=[cof.NV.2nm"=c\+iZ]iR@DLfTKrqJr
%`h5'?e7ii5.Uq-&^l'FNEIT?U'ea^aSuIV!OsJ#?-LN30%e^L,.>l#k5>4q-Grs"K>e4HtcS,bACSle.IU\ruL>6<c,gC2'MP&NF
%WRdu3D@YD:;X7([V!F!.Sk4lC:FN$lA>"T-5.lQ,SiCOY.T&'a*T(qb4=jgu0TSfD`63!rbY*=hlT>N9FqJ;uG_q5NMD(XD/Z9rX
%;2LY'"Xif'Bo0pVaSoec%&k+ElC__E=4qj40+lN.*N2o0KL;,m+=AM]B]:AQa?hT!=piA)]ILI:dEr[$7:MS$9lsarM5uHaiJB"`
%U)F^m#ermS4Rq5qk*Y/?C?k$&]Lc.odT]:DKM;2jaq4$<O)OaOlfZZ.>A`.0IhD(-ZY'<VoUG1DM8"cKM>XfT0-\i8Xq$[63liYa
%PGurH\$klgNE+(2Zt(Ctf;R&3YD,bIm)<%7ZpV9aB_EX'N:Vk<#XRON`*J=A`o\i?,4[<8JKsSlp/0(/",WD&-8/gVjuB^)T,L9K
%FV,9]O(P+=65Y/oJjJ"SJ@UAn-D/#55253$1W<YDDUt,QGBU7prV&]+9[W*:ZbD3>)"jPr/Rj`N?QGOe;a[.h:J.L>V(gdTn)RQ!
%*g_Y/\W'*V(X^Zt<k.cBRa.s+JoIb]d838-gdST%=8<oB(QmF67jt05Upu/&\2H/dc#FNaY]NP6A1H0Z-LTkf..1PT.9Singr8V&
%D"8bQ1j"qoLrW'pOh?Jd,!4Db5t?$?a8p8ToJQrJXS.U'M7jb.UcFKmr,?lE'Om!DO&u>HjeMa^;t07D?/?+f-Qc#'X./u_6Mk_C
%FVt3C=QWluZ(#(hgskCh[&JMS"p*p\d?Acfhr@0<dLV8@M>":!#K12dqsFrg5l@rcr8C)sUNK$_JX=34hiS;"QpC<@*f?d[ikE*Y
%?TgHhLS6^23'uH<R*YC7:nfW8@6F"!Hh(IHJlCloX<n4B223/>Q?e5G4)=NViF(U4Lpj&7+'\MhIKTlJ%lGDfkG^_mId/&qBO]Qd
%PG$SmADNn.@(bu]I7i2GrAa/+&Y\XhJuDA;=cjd99A13LZ>-,M.bno4Lci0]=c>#10'qgb?p;Ilc_dM*oJi?oL+Vrnd*hHMW`"kd
%A4,E$b97)=p_?p)iQN(frD\=jaC:cn+b0a+*sPD&X_;U'llD%/a6*]VH4dq"$U(LN``;QMK8`#g'gKPifOQVkrSW"YcdNnT3OAU=
%g2pGQZ(Lb6@mSio-@<L\O?R4.m6a91Cc"%t)er.G?uGlpXSk+\-0Q.O`K'IU?uF0jB6_LLJqRj@[5`o=au/P'?JSEae9]t?)fIsi
%@]m[iWi&*V0JZVkG+n1hR.0SNhtRr=n\E"a;=XXTjS#Deb=pDVHn;/1@F@P#,+][CbI9@C*OWne*%*4MVCC9aX2\.tg2+)haIu?K
%,,AU4kHE[?(Rcii7!A/je^05?.`%s[2B"7?+<9erRg&TU0DB7lo-Qas8I9R/8%Q#BYEa-0;[gk]>9\:!pVbF3Q3C`TT)_HSd!n$3
%.<1tmT1<%Jot_.]jXk"h*,a.<EgQh#nr[H6kZij+(KWdPK@8Vgg0EV9lq/iC%K\#9D*mBSA\W3>Ll0,g#A,=;5'N9KKOt^_c)6(q
%fR50Sd5e573^`fp]M!u2gI\otX\&W+7F.,*<4Qd)?Am84"(^S"!F),TXV>m2^R,.u-$OL8`4V:5[9oNMNU'gR$Q5j($R,73eOjQg
%4aef.^sDtU"jrOkM9d:/ADam)nP-E0_Y.2#3T3cS]]F.k(\G3q;$M#I21$EKl=\+)ZGSgh<NKh(W2DS^2lJfT93EN!+cOH+57'>O
%gZ#6KWpY4t6rdJpk$\m3)ohoRD%&Kl931-j@\QPegQaq><.q.SYTYqP-Kf"1ieQL%4ZMgi>:"rkkB_^:L\'a&dla/\+H<o:^$;&F
%R?(u(T)8L]Te]TT7$*j%AkSiS?*2T4\CNJq$@fqZ%2[[>Td+(dAsNn"2nCaFGW:opWf;<Gr"`rRcPrFM+DQW96V*7CNA&2.4Pf7M
%O[YKIjG5F*U(k%oTi`<';&m@S"5$n!E&+g87Yl!`2OQijJE;XSPYSe?nWhBE@KH]0[6R?g"@kW>=n_iA17<ti0!^>eVD=hsm-'-D
%KO[<]1#G]*]Eu4jr&7^d-tF@<"K$jmZm@GJP7U@HrVoe32[lCW+b_=_&EdZ>>=Yb,$>LI[^2t>/*bR$Y[SMq',cR2['u#/rf^/`g
%Vm)T?,O9#A7^1J+en[&m$<CV&_H''ELH+%4"GEIkVjWe1rb3X*s*gYM&G>87?&c\(G7K%l)FPq.F0'o:agKK;9Tj\[57?@u?[-ns
%on_YHJU#2_mu6sJ6Uoc%G_05-j7HnL[dJ\>iS4S"5HH'mT/^!1#hu#D5?6(K,`dA8"B=8W!j,C9,[Y)>a$)mn_+Kh1YCsn7N>M$0
%;lic.8OOt8Ia`GleV+s>?Kf3aT$UI#p:Lr*iUYZUgOKSQpNtU2'`tV5?tTP,#2\!oi&$8I$7;:KpM\0FO/0Wt;2<nZs-S$B=mA19
%:@pn6kA=;<[^6D!#X,#.N`j0.OcW!R5]%;kgk%IsN:U\X$IN.;LV^E9#SE[!3p[%uj(OJp'=b-uAN0h-q38f0&uQn%dm`ubO]@B@
%gP+EEbmR*oLpQs2:%nQJZ69K%aq2O`(lCH9V>6O7=S4B]iS`XlL7&-#.'<>=!V/qQVrWhfL:csR5=$].aRj.W_X$mgAqtLI"ho,t
%Jo\("*nPe8A=hTniVPQfVmbB)$3s^5GR07<,al2J]fI/UGU#%q/h]%X:l@8`NV?("L1qt\\UPV+hnNM85Y`lgI.XEO]_-SV4Rh)R
%]#^R&fZoRZ:58e_/c7!LqsVX3WrRaUB216E]D+_FO6=(:`ekHoG,u$p>ri4A8DI_H$crorjB=U3*$,^CWdo@KoWYCVn>'jF_C+`?
%NVC*P+OCaa#VreqM(I-/p-q$;O#N@c-nRI<d<N)>b$Da[RYI*i>nn!h`UPHlhL7J\j3`(q?N^l@L=0W7,BOfE*#%Qjcf"q5/`UM2
%H*jNLTpTJapar7m^2-Zq_g:<_352AR3e"Re2\^+@7auWdloPNXF(Gb_8Aho-[o8R\%/\A#a6"p=cXZW:pATCoST8s&gSk5O>o_hY
%p*/NKEfOSe&uMn'7!PP.'rZd>]Oj7k7JQkS+B7R.Sug7CDq>+L\IBat[tgDF+t'-2279X)pMUCm')GpC1m@e.q=0\gCH'0$EeQOa
%(BYoK#SWpnMlS'^9r*i=84i4k8&G#h(G9G>>)tQUV-_J-P^*hl<M@SQWY$L:)(Cr>rNkkhpLMDcb^t)O.l0+gY*_k=Ul>:]F&3N2
%\=;#$17nA4'ME,V_t`K)3LO>`]N!-Q)RL+U?<;8>U6!3I7$Hare8/EG"RUNuC0F#.j/&Ka!H]b8++Q*e;Md%6G33u8_I1;=[U%_"
%!X"m"*>:VW=qME/GNuO$.A](N0]oo&OOkM:A\8IBf.UdhYmTK/omhu#O(2m.'au'\:OC-.<90<`[<0HOP7/BLaFRj"WA'ON.GM.R
%QcaFO1/Aq=WlnP2"'!N("PPg%[.*"fU)*s3,hZUA;b;/F:om2U>;teK2gp[3WbN1/0lCkX6KBBjG5c0=?&9[,O-#?oqi!&n;1&l"
%<7/JKIUT7XANC4Y]Wp6s*\P?FDcJQ1hrT<R5RBA'0%^AFb=hn..rV\q!aF(Ej?jj<FWHQ5FE*=VY67b)+fKOo]bbnKAGSuhV@3!I
%`?4CrFH^khCp<]IQV*gdR#?+S!ebe'(K<HKq[0c4I,3heZ,'Z`dWiePl,6C'q7@M93#@"U-Ep!/Z;efY<V3Rkh.T!T'\W^7/#&,c
%kJ%2uN1!_Mf[4h^CB]Z/'tWTX$B:SDL;kq@C3fu2?Z@ZX,tbl0QLR<<Nn]klHAbcQ/DXO3.b^fW&\6_!1*7'UmM3a]dTpsDX(BH=
%[V`bG.K[?T%?I6a_;8_3p!"D9c'9Ub&oQYQPZ?lYH[5Ka3_3fr;ubk_h');g!PV7f./:BXZ;"p8*hapK61Or)1W8p>qQaC!Q7/qr
%d9*1RZ\nkp!MfIdaQMG#%8W(u-@fQo,6(Nd-qSgXS;Tr4^ZbAMePb*Aes6R36/g+6!4f*sP64k%7V!,5;c`WXY0.b]g"#-pAGdFm
%$)>:+JO4s_&GEDl")YH/"0W+@n1143ZL1M`hW<uj`,$S:Y@8i6+N8;9R#pmp?H;raGu,c'1N!Q*31E\Y!NF/b.I\+EMD'0BlJIPu
%a;_(6(>bUG#I:qlBia]=AC-uT*EtU)pYdVC3\&4'd:NfV.=[u\1$leQc"\ToP]72@o2RN(R#==>G$LoKUJ.-o:1M!Hq@@eh/FWWB
%&ir]ue!*dl^AZ1W\lP/bfC4Bq<V(P7U[n2A9OS6_Rn?S$87l$$W#%g(%/SPM,^Jme[%?hDJ(;2-$1_L?jW!;ur6eC$;MMKb$3<Il
%Ik^.?\,9-\7L*!NHX)^hE@.B!7!0k)Zg)g+6$?)S.4g^p9MS%4ab'>6QK;?4IJi)#U[t,p>+WU0IrHG3$]oQ"bGt@!:mjXZ!GjGP
%Qi^b'l.DQq3PF;:LgOkDmo`a@b?!5t]2iR]KW<!$\9:4j>UK;&f]S@jLa;iF9A:lJ,INh]HQI3UrD:0iTg%U\TE>8*QhI9t'9?\O
%c*I.N7F3G.$o+X*32IJc.L_0@_e#%e6&HMdC(-B-\OHej,:"$Xcq4lPcfFBQpcFMhYIJ9)Z-WRcY]LBK<#S`r@/O)GX]e$k#,)9'
%'Ukg]CfQ\[5&jI@4YpJtFFDrWBF,hZ&mI''Rj?S(K0PSs34nEU3rGm'Y)/]@LHMb\D=P298Yua<6G8`SPct'K_FKWVcIT/Kr^!6$
%j":kGBi?9Fa:*[-R3%<X-uaAj1=-^CFlK,E09^S.K-%."/?Tf]"X*@Id69P3?Y@,T!*MEZMboA>?PlV_$kSWWc(0K8Ze%LpA-b]#
%nqS<r)%pWe2\_!7g"UbSK0lm+>GJVuT,@%Cd&-u30m)P_m$pNMNQ$&egmYF*L$71>?GXm_F;V1/aGCTn9RLd>/n`rnm\PEOc=LnA
%76'>'s1DU3Ts*Gm6cBBJfj0$K)HVORGm:su<hgMDlZ9Q',N`O[M7Op>GE,M=\Z:Ot2A\=F:bd6C%])0R[YS6'OnKY]-q6A:#e+&r
%lU+""k#to*X=8"o?Qq4>:X[ZYNL@kBjVTXQ6gMj.Q-Y9DZFP]"%3Qkd$TYaL(h5.d;\a_-!^3DiARMp#6%*pQU!\ELlud*^QO/u&
%IC<<SR$&RZ008?NG".<$qJo'kA78A?p^^s_)26p"8)T.W6P3C5;<XrS6%LFR5Yk;Z$s^^!)W'_qMTJKcTCdouG=.1_9YBOMY!V;Z
%da9?`$pgP]6;M0eFGja(Quj#9n_P8RD?)#1_dGgp;`Gun`gKc^fNHR"G^N'!5C]),:3oag'mtX4o+?]Edn5W=(Coso;c^!8YDaWq
%]=lMG<M#bZFg!KA\;h[YZ%o5sN/0-lJ86.#`f[e_I=3>A`XIr8<1Fp`?&[h@)RnN;o-41*r>60Rp.P#cYU:>d)9"$51!MreSGr,#
%rHm70LR:6u<+L59:ScRKX%]=[NC?"5n.E/;'";j1SdC6qgf9%7>Qhd"5a5Aj#)SA`:q*VjFlJ12?lMS+FglEdNTMI&isq(+21n=t
%j(*8+!u:@ERQcLZS@c$N6C8V<J40oRm#_7hAFE>S112)1"1T6R]F@Xs-;SOEc:Q;:)O[ORS`%!7,ZVMWf,t"]a8b_VqnN'X?iK`s
%a0.`+r"&hs.JVs'q!h-ErQh*cr83#'l/s/fn>F&"prcH?If.Arrqc@2s8LK^IK%]^5Q1N/hu<W,T7?_.\,Z-Qs*t5:argQOO8nk0
%s4\'6pckBAXhX~>
%AI9_PrivateDataEnd
