%!PS-Adobe-3.1 EPSF-3.0
%%Title: Grapes [Converted].eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: pingwin pingwin
%%CreationDate: 4/2/2015
%%BoundingBox: 0 0 580 606
%%HiResBoundingBox: 0 0 579.9441 605.2867
%%CropBox: 0 0 579.9441 605.2867
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Grapes [Converted].eps) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2015-04-02T02:34:23Z</xap:CreateDate>
  <xap:ModifyDate>2015-04-02T02:34:23Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>248</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXgXnvzJ+aX5kebtS8k/lxcfoXQdElNp5g8zMzRFrlf7yCKRR6gMZHEiPcnqQvVVZB/zjF5&#xA;qs7Stl+YEiXvGrF9Mt2hken7alyTU9S1T3xVMvL35jfmN5D1u18tfmnZ28+k3A4aZ5t01FjthwWv&#xA;CeJFjVAq9eKLxUE0KgsFXtwIIBBqDuCOlMVdirsVdirsVeNecPzM8+eZPME3k/8AKvTobh4QBq3m&#xA;m+ANhApYoRECGEm6steLVo3FWpyCqSn/AJxq85X9sX1jz9yvXIcxQaVa/VY3qfsx1RSBXair8sVQ&#xA;nl/WvzT/ACa8wado3nq//wAQ+QdVmW0tNf8Ajd7KZvhjWQtV0T/IYsKfYOzDFX0VirsVdirsVdir&#xA;sVdirsVdirsVdirF/On5oeQfJQi/xPrMGnSTDlFAQ8s7LWnIQwrJJxr+1xpiq7yZ+ZfkTzrHK/lj&#xA;WYNRaEVmhXnHMi9OTQyrHKFqacitMVZNirsVdirsVdirsVdirA/yO063sfy205EQLczS3cuosBRm&#xA;uzdSrPzrvyV1Kb+FMVZzBPDcQxzwSLLBKoeKVCGRkYVVlYbEEdDiqA8x6BY6/o9xpd4CEmAMUy05&#xA;wzIeUU0ZPR43AZfcYqxf8pNQvP0JcaDfL6d1okggjjowCwGq8ELM/KOC4into25GqRAnfFWdYq7F&#xA;XYqxD809XudP8qSw2vMXGos1vziYRyLDHBJdXRRz9iT6rbSiNuz8cVTPyV5XtvLXl620yNY/XAEl&#xA;9LEvFJLhlAkZV2ogoFjX9lAqjYYqnckkccbSSMEjQFndjQADckk9AMVYf+b1ppeo/lV5pivgslo+&#xA;l3EqGu3qxxmWBkI6sJVQp4mmKsn0lbxdKs1va/XFgiFzUgn1Qg51IqD8VemKorFXYq7FXYq7FXYq&#xA;x/zf5/8AJvk60S68zatBpsUtRCshLSSU6+nEgaR6d+K4qgPJn5uflz50ne28ta5DfXUal2tSssE3&#xA;EdWWKdInYDuQMVZfiqhf3kVjY3N7NX0bWJ5pKbnjGpY0+gYq8/8AKWm2mneRZvP36OTV/N2q6adb&#xA;urgAPPPLJAbiK0gkILLFGCsMSrtQA0qTirzjyxrMfmvzF5Y8xU0iLzs+t0tZdCcepcaC1vzunv4g&#xA;zvGo5MgE1GV6L1NSq998x2Mt/wCXtUsYria0lu7SeCO7tgTPE0kTKJIgCCXQmq79cVfNekS6R+UX&#xA;mnyfd+WvMEV55Z88eqmvMZZL22WWyMReS19NTJ6khm4KrKzA/CT3Cr6jjkWSNZFBCuAwDKVahFd1&#xA;YAg+xxVJda88+TtEuFtdV1mztLx/sWbzJ9Ybv8MIJkb6FxVK5Pzg/LKGeOC68xWllJLvH9cZrVSB&#xA;t9qcRr+OKsqsr6yvrZLmyuI7q2k3jnhdZEYezKSDiqtirFX8o6xp+p3l95X1WLTo9Ska4vtOvbVr&#xA;21Nw9Oc8Kxz2kkTyU+P4yrHfjyJJVTfy1oh0XR4rB7g3cwknnuLkqI+c11M9xKyotQi+pK3FewoM&#xA;VTPFXlV35ol8t23nLzPaWyXh06yinMJbiskaarqcr0cDqYJPUX5g9DuqyP8AJzzJqfmX8sfL2t6o&#xA;eWoXdqPrL0pzaN2j9Sn+Xw5fTirMsVY/+YWs3mieQ/MWsWQreadpt3dW+wNJIoWdWIPZSKnFXmGm&#xA;eaNS86/l/wCTfNWp20fIyXLPp/IuZZLS2klqR0rNHZy08A48ScVe34ql/mLRYdc0K+0ieR4Yr6F4&#xA;GljoWXmKVowKt/qsCD0IpiqQzeTte1iS1j81azBqGmWsiTnTbKyayiuJoWDxm7MlxdmREZQ3prwU&#xA;sByqNsVZdiqncXFvbQPPcSpDBEC0ksjBEVR1LMaADFWKf8re/LNrt7SDzHZ3dxGKyJaObrj23MAk&#xA;GKphpXn/AMlatdiysNbs5b9uliZVjuTvQH0JOMtD/q4qn5NBXFXzT5ru9M/Nr8x9e0LXNaSz8jeT&#xA;7Y3sCpJJYc7mRYomS/e4UcRFMj78KqG2O+Kvd/y/079HeSdEshevqKwWkSpfSBw0qcaq1JCzheJH&#xA;EMa0pXFXjvn28j0Xzt5t1+VdJn8328unR6EvmGRY7aDQ2gT1p7MSMvJhcmb1eFW8B8QDKs9Gl2fn&#xA;78vtL80XllHpXmdrJdQ03U409O4tLgJyjkjdv3npPQExsSGQ8WrirL/Ket/p7yro2ucPS/StjbX3&#xA;pDov1iFZeP0csVR95aQ3lnPaTCsNxG8UoHXi6lW/A4q8T/IX8whpM0/5R+bZhaeZ/LcrWmmPMeC3&#xA;tmprB6ZPVhGw4r3TiRX4qKs/82+YPy98j+jPqsdrpZ8wTPbTXMcccUj0ieSSWVlCsyoF+Jj3I7nF&#xA;WPf845efpfNfkCOO5luLy50V2sptVniMUdwqM3olXLEu6wCP1SQPiPfriryjyR5g8j3H50ebtfsL&#xA;O58wXFnfyN5T0DTLcyobi4RIrzUOZCW8Su0C/vHcbEt1pirLvzD/ADBvbCFP8da/Bo0lxNFHb+Rt&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -605.287 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 605.287 li
579.944 605.287 li
579.944 0 li
clp
[1 0 0 1 0 0 ] concat
285.328 341.418 mo
285.472 341.49 286.768 341.994 285.976 341.922 cv
283.96 341.85 281.656 341.13 279.568 341.562 cv
278.416 341.85 280.576 342.57 280.792 342.642 cv
294.76 347.826 306.352 354.09 314.488 367.338 cv
323.128 382.386 323.2 401.754 312.184 414.57 cv
303.256 425.154 290.008 431.202 276.04 426.45 cv
259.768 420.69 251.272 402.474 258.544 386.562 cv
265.312 372.594 282.376 366.546 295.84 374.754 cv
307.288 381.954 310.96 397.146 302.608 408.09 cv
295.264 417.234 281.8 418.962 273.304 410.322 cv
266.896 403.41 266.824 392.322 274.816 386.418 cv
281.224 382.026 290.584 383.466 293.608 391.242 cv
295.48 396.57 292.6 403.338 286.336 403.266 cv
284.608 403.122 282.952 402.402 281.872 400.89 cv
279.856 397.866 282.664 393.186 285.472 396.426 cv
286.912 397.938 288.208 395.418 288.208 394.194 cv
288.208 391.098 285.112 389.226 282.376 389.082 cv
276.616 388.866 273.592 393.618 272.296 398.442 cv
271.936 399.81 271.792 397.65 271.792 397.434 cv
272.008 392.106 276.112 387.426 281.44 386.85 cv
285.04 386.49 288.064 388.002 290.368 390.738 cv
291.664 392.25 290.296 389.514 290.08 389.154 cv
286.048 383.754 278.056 384.906 273.736 389.226 cv
266.68 396.714 270.064 408.234 278.632 412.842 cv
289.648 418.458 302.32 411.402 305.344 399.882 cv
308.44 387.066 299.44 374.898 286.696 372.666 cv
270.208 370.074 256.024 384.546 258.112 400.89 cv
258.4 402.834 258.904 404.85 259.768 406.578 cv
261.064 409.026 260.632 405.282 260.704 404.49 cv
260.704 404.49 260.992 403.554 261.064 403.554 cv
261.136 403.554 261.424 404.634 261.424 404.778 cv
265.168 416.802 274.96 425.01 288.28 425.082 cv
290.656 425.01 292.96 424.722 295.12 424.218 cv
313.264 418.89 322.624 400.098 318.088 380.73 cv
311.608 356.61 288.064 343.434 264.16 344.658 cv
234.424 346.962 212.248 368.634 203.464 396.138 cv
202.528 399.162 201.88 402.258 200.944 405.354 cv
199.792 409.458 200.296 401.826 200.368 401.25 cv
206.848 340.554 264.808 333.858 285.328 341.418 cv
false sop
/0 
[/DeviceCMYK] add_csa
0 0 0 1 cmyk
ef
202.312 392.322 mo
202.888 389.802 203.896 387.354 205.264 384.906 cv
212.464 373.026 228.736 367.842 239.824 377.778 cv
246.16 383.826 247.96 394.554 240.688 400.674 cv
236.8 403.698 229.456 404.346 227.44 398.802 cv
226.576 396.426 227.944 393.258 230.68 394.986 cv
233.488 396.642 236.944 395.562 238.672 392.97 cv
240.616 389.802 239.896 385.842 238.024 382.89 cv
231.976 373.602 218.944 375.042 211.456 381.666 cv
207.496 385.338 205.336 389.226 204.4 393.33 cv
203.752 393.042 202.96 392.682 202.312 392.322 cv
ef
83.9441 258.834 mo
85.5281 261.93 88.3362 266.754 90.5681 268.986 cv
93.1604 271.722 96.5442 272.514 95.4641 273.09 cv
92.9441 274.602 91.072 274.674 91.072 274.674 cv
97.5525 281.298 li
97.5525 281.298 93.0881 281.442 93.1604 283.098 cv
93.2322 284.682 97.696 291.306 97.696 291.306 cv
93.3762 293.25 li
101.656 300.81 li
97.9124 302.25 li
108.208 308.154 li
102.376 310.242 li
102.376 310.242 118.936 318.018 126.568 320.394 cv
134.128 322.77 155.224 317.442 161.776 320.538 cv
168.328 323.634 176.032 329.25 176.032 329.25 cv
176.032 329.25 169.912 334.074 165.088 332.49 cv
160.192 330.906 147.448 324.066 133.48 327.954 cv
119.512 331.842 97.8401 344.658 97.8401 344.658 cv
100.648 346.314 li
91.0002 354.378 li
93.6643 355.746 li
87.9041 364.242 li
90.4241 365.97 li
79.6243 383.466 li
79.6243 383.466 96.4001 375.258 95.968 377.562 cv
95.5364 379.866 95.4641 380.442 95.4641 380.442 cv
95.4641 380.442 100.504 375.474 101.008 377.49 cv
101.512 379.434 101.008 380.946 101.008 380.946 cv
108.352 378.57 li
109.432 381.954 li
116.848 375.762 li
117.64 379.794 li
125.2 373.314 li
124.48 379.578 li
135.28 371.802 li
137.08 375.114 li
137.08 375.114 140.608 372.378 142.048 369.354 cv
143.56 366.33 143.848 364.314 143.848 364.314 cv
145.432 368.346 li
145.432 368.346 151.696 358.554 153.712 352.074 cv
155.8 345.594 159.544 339.546 163.216 336.738 cv
166.96 333.93 175.168 331.698 175.168 331.698 cv
175.168 331.698 174.592 333.57 170.416 336.018 cv
166.312 338.466 154.144 348.906 152.56 359.274 cv
150.976 369.642 149.32 392.178 149.32 392.178 cv
151.624 391.242 li
152.56 398.442 li
154.504 397.938 li
154.504 397.938 154.36 407.154 154.864 408.522 cv
155.44 409.962 158.536 407.658 158.536 407.658 cv
158.536 407.658 160.48 410.61 161.704 414.498 cv
162.928 418.242 162.208 425.658 163.288 424.218 cv
163.36 423.714 163.504 423.21 163.576 422.634 cv
164.008 420.834 164.584 418.962 165.304 417.09 cv
165.664 414.93 166.024 412.554 166.312 410.466 cv
166.96 405.426 167.032 403.41 168.256 405.21 cv
169.48 406.938 169.696 408.162 170.056 408.738 cv
171.136 406.722 172 403.554 171.712 401.178 cv
171.496 399.594 173.8 401.466 174.808 402.402 cv
176.32 399.594 177.256 393.042 177.112 389.586 cv
176.824 384.834 175.816 378.714 176.68 380.298 cv
177.544 381.81 179.2 386.058 179.2 386.058 cv
179.2 386.058 180.064 380.01 181 374.25 cv
181.936 368.49 184.024 360.066 182.224 350.562 cv
180.352 340.986 176.68 335.73 177.472 333.498 cv
177.616 333.138 177.76 332.994 177.976 332.922 cv
180.424 332.202 182.224 334.218 183.808 335.874 cv
190.576 342.498 195.472 351.21 198.352 360.354 cv
204.04 378.714 202.528 397.866 196.048 415.434 cv
196.48 415.578 196.984 415.65 197.56 415.722 cv
200.512 407.658 202.528 399.378 203.608 391.098 cv
204.832 381.45 204.328 371.514 201.448 361.362 cv
198.28 351.21 192.88 341.49 185.392 334.074 cv
184.312 332.994 180.928 330.33 181.144 328.602 cv
181.216 328.458 181.288 328.242 181.576 328.026 cv
183.52 326.658 189.64 328.746 199.288 327.882 cv
208.936 326.946 216.424 322.626 221.752 320.106 cv
227.008 317.586 232.552 315.138 232.552 315.138 cv
232.552 315.138 228.016 314.706 226.288 314.274 cv
224.56 313.914 230.68 313.194 235.36 312.114 cv
238.672 311.322 244.72 308.586 247.024 306.354 cv
245.872 305.706 243.496 303.978 245.008 303.762 cv
247.384 303.402 250.192 301.674 251.92 300.018 cv
251.2 299.874 250.048 299.946 247.96 299.298 cv
245.872 298.578 247.816 298.002 252.568 295.914 cv
254.44 295.122 256.6 294.114 258.544 293.178 cv
260.2 291.954 261.784 290.874 263.44 290.01 cv
263.944 289.722 264.448 289.434 264.88 289.218 cv
265.96 287.778 259.048 290.586 255.088 290.442 cv
251.056 290.298 247.672 289.29 247.672 289.29 cv
247.672 289.29 248.968 285.69 247.456 285.546 cv
246.016 285.402 237.16 288.066 237.16 288.066 cv
237.088 286.122 li
229.888 287.202 li
230.176 284.754 li
230.176 284.754 208.936 292.53 199.432 296.922 cv
189.928 301.314 183.232 315.93 182.08 320.61 cv
180.856 325.218 179.272 326.298 179.272 326.298 cv
179.272 326.298 179.056 317.802 180.712 313.482 cv
182.368 309.162 187.192 303.834 192.88 300.09 cv
198.496 296.346 206.128 287.562 206.128 287.562 cv
201.88 287.202 li
201.88 287.202 203.752 286.338 206.2 284.106 cv
208.72 281.802 210.376 277.698 210.376 277.698 cv
206.632 276.906 li
211.168 264.306 li
205.336 266.826 li
209.512 257.682 li
205.408 258.042 li
209.296 249.186 li
205.768 249.114 li
205.984 241.41 li
205.984 241.41 204.688 242.274 202.672 242.346 cv
200.584 242.418 203.968 236.226 203.968 236.226 cv
203.968 236.226 203.464 236.442 201.304 237.522 cv
199.216 238.602 202.456 220.17 202.456 220.17 cv
188.632 235.362 li
186.328 233.418 li
179.776 241.338 li
177.688 239.106 li
172.576 250.626 li
170.272 248.466 li
170.272 248.466 163.936 272.802 164.008 287.274 cv
164.152 301.746 174.304 312.114 177.184 316.434 cv
180.064 320.61 177.112 327.882 177.112 327.882 cv
177.112 327.882 169.552 321.978 164.8 316.506 cv
159.976 311.106 159.328 289.362 154.864 282.738 cv
150.472 276.114 138.376 262.29 138.376 262.29 cv
138.088 268.482 li
129.52 260.274 li
129.16 264.234 li
119.584 258.402 li
118.936 263.082 li
118.936 263.082 111.304 260.634 109.792 260.994 cv
108.208 261.354 109.288 265.674 109.288 265.674 cv
101.152 261.282 li
101.152 261.282 101.512 263.154 100.864 265.89 cv
100.504 267.186 98.8484 264.162 95.5364 262.362 cv
92.7283 260.85 87.4001 259.554 83.9441 258.834 cv
ef
364.456 393.474 mo
378.64 389.01 384.184 372.666 381.88 358.194 cv
376.696 332.346 353.224 316.794 328.672 311.898 cv
316.216 309.738 304.336 310.314 293.032 312.978 cv
262.432 320.034 232.12 339.33 214.12 365.754 cv
214.264 366.834 214.552 367.986 214.768 369.21 cv
217.432 364.602 220.528 360.066 224.56 355.602 cv
251.056 326.082 290.8 307.506 330.256 315.426 cv
353.728 320.178 375.76 336.018 379.432 361.146 cv
380.584 373.026 376.264 385.194 366.616 391.314 cv
366.904 390.882 367.192 390.45 367.408 389.946 cv
369.208 385.77 367.336 380.946 363.16 379.146 cv
358.984 377.346 354.16 379.218 352.36 383.394 cv
350.488 387.57 352.432 392.394 356.608 394.194 cv
359.272 395.346 362.224 394.986 364.456 393.474 cv
ef
393.112 430.986 mo
392.392 433.938 396.208 437.034 398.944 437.754 cv
409.384 440.49 417.592 430.05 418.888 420.69 cv
419.752 413.274 417.448 406.29 412.984 400.314 cv
399.952 384.042 377.488 384.402 362.296 395.13 cv
361.504 394.986 360.712 394.842 359.992 394.77 cv
369.928 387.426 382.528 384.258 395.56 387.642 cv
398.008 388.362 400.384 389.37 402.616 390.594 cv
406.864 391.89 411.472 392.178 416.224 391.386 cv
428.608 388.794 438.04 378.282 436.888 365.322 cv
435.736 354.738 426.736 345.738 415.72 347.61 cv
408.808 348.978 402.328 355.602 404.92 363.018 cv
405.784 365.322 407.728 367.41 410.32 367.698 cv
412.48 367.842 414.568 366.33 414.856 364.098 cv
415.072 361.866 417.448 362.442 418.384 363.882 cv
420.616 367.41 417.088 371.226 413.704 372.09 cv
407.224 373.53 401.968 367.914 401.32 361.794 cv
400.528 351.354 410.464 344.442 420.184 345.522 cv
430.408 347.034 437.32 355.674 437.968 365.754 cv
438.472 379.866 427.744 390.522 414.136 392.178 cv
410.608 392.466 407.152 392.178 403.984 391.314 cv
414.28 397.362 421.336 408.09 419.896 420.618 cv
418.528 430.842 409.528 441.93 398.152 438.762 cv
394.912 437.754 391.312 434.874 391.744 430.986 cv
391.96 429.042 393.976 426.09 396.064 426.018 cv
397.936 425.946 399.52 427.386 399.592 429.258 cv
399.664 431.202 398.224 432.786 396.352 432.858 cv
394.912 432.93 393.688 432.138 393.112 430.986 cv
ef
373.888 393.042 mo
369.712 391.17 364.816 393.114 362.944 397.362 cv
361.144 401.538 363.016 406.434 367.264 408.234 cv
371.44 410.034 376.336 408.162 378.208 403.986 cv
380.08 399.81 378.136 394.842 373.888 393.042 cv
ef
384.76 406.794 mo
380.512 404.922 375.616 406.794 373.816 410.97 cv
371.944 415.218 373.888 420.114 378.064 421.986 cv
382.312 423.786 387.208 421.842 389.008 417.666 cv
390.88 413.418 388.936 408.522 384.76 406.794 cv
ef
352.432 365.106 mo
348.256 363.234 343.36 365.178 341.488 369.354 cv
339.688 373.602 341.56 378.498 345.808 380.37 cv
349.984 382.17 354.952 380.226 356.752 376.05 cv
358.624 371.802 356.68 366.906 352.432 365.106 cv
ef
366.76 409.386 mo
362.512 407.514 357.616 409.458 355.816 413.634 cv
353.944 417.882 355.888 422.778 360.064 424.65 cv
364.312 426.45 369.208 424.506 371.008 420.33 cv
372.88 416.082 370.936 411.186 366.76 409.386 cv
ef
356.536 395.202 mo
352.288 393.33 347.392 395.274 345.592 399.522 cv
343.72 403.698 345.664 408.522 349.84 410.394 cv
354.088 412.194 358.984 410.322 360.784 406.146 cv
362.656 401.97 360.712 397.074 356.536 395.202 cv
ef
345.448 381.594 mo
341.272 379.722 336.304 381.666 334.504 385.842 cv
332.632 390.09 334.576 394.986 338.824 396.786 cv
343 398.658 347.896 396.714 349.768 392.538 cv
351.568 388.29 349.696 383.394 345.448 381.594 cv
ef
348.976 411.546 mo
344.728 409.746 339.832 411.618 338.032 415.866 cv
336.16 420.042 338.104 425.01 342.28 426.81 cv
346.528 428.682 351.424 426.738 353.224 422.49 cv
355.096 418.314 353.152 413.418 348.976 411.546 cv
ef
338.104 397.506 mo
333.928 395.634 328.96 397.578 327.16 401.826 cv
325.288 406.002 327.232 410.826 331.48 412.698 cv
335.656 414.498 340.552 412.626 342.424 408.378 cv
344.224 404.274 342.352 399.378 338.104 397.506 cv
ef
331.408 414.57 mo
327.16 412.77 322.264 414.714 320.392 418.89 cv
318.592 423.138 320.464 428.034 324.712 429.834 cv
328.888 431.706 333.856 429.762 335.656 425.586 cv
337.528 421.338 335.584 416.442 331.408 414.57 cv
ef
357.832 257.61 mo
352.576 257.178 349.84 257.826 347.248 257.394 cv
344.656 257.034 342.136 256.314 342.28 255.234 cv
342.496 254.154 345.088 254.226 347.68 254.586 cv
350.272 255.018 352.72 256.458 357.832 257.61 cv
ef
361.576 248.25 mo
361.144 248.97 360.712 249.546 360.28 250.122 cv
359.776 250.626 359.272 251.13 358.768 251.562 cv
356.392 253.506 353.584 254.658 350.488 254.37 cv
347.752 254.01 345.088 252.57 344.368 249.69 cv
344.008 248.178 344.44 246.018 346.168 245.442 cv
346.816 245.226 347.464 245.514 347.32 246.306 cv
347.176 246.738 347.032 247.17 346.888 247.674 cv
346.312 250.194 348.04 252.282 350.344 253.218 cv
350.56 253.29 350.776 253.362 351.064 253.434 cv
354.592 254.226 357.904 252.498 360.28 249.978 cv
360.712 249.474 361.144 248.898 361.576 248.25 cv
ef
358.624 267.618 mo
358.408 266.898 358.192 266.178 357.904 265.458 cv
357.616 264.81 357.328 264.234 356.968 263.658 cv
355.24 261.066 352.936 259.194 349.84 258.546 cv
347.176 258.042 344.152 258.618 342.64 261.138 cv
341.848 262.506 341.632 264.666 343.072 265.746 cv
343.648 266.178 344.296 266.034 344.368 265.242 cv
344.44 264.81 344.368 264.306 344.44 263.874 cv
344.584 261.282 346.888 259.77 349.336 259.554 cv
349.624 259.554 349.84 259.554 350.128 259.554 cv
353.728 259.842 356.392 262.506 357.904 265.602 cv
358.192 266.25 358.408 266.898 358.624 267.618 cv
ef
432.424 276.114 mo
430.12 278.13 428.176 280.506 426.52 283.314 cv
421.48 292.602 421.768 306.21 430.696 313.194 cv
431.128 313.482 432.712 314.634 431.92 313.266 cv
431.128 311.97 430.192 310.674 429.4 309.234 cv
425.08 301.026 424.792 290.802 428.536 282.378 cv
429.544 280.074 430.84 277.914 432.424 276.114 cv
cp
482.104 289.434 mo
479.368 282.666 474.544 276.69 467.56 272.802 cv
461.584 269.562 455.032 268.266 448.696 268.986 cv
442.936 269.922 437.68 272.802 433.936 277.05 cv
424.864 287.202 425.512 308.226 439.192 314.202 cv
446.536 317.226 455.536 314.85 458.848 307.146 cv
460.72 302.322 459.208 295.05 453.232 294.114 cv
452.152 293.97 449.272 294.474 451 295.986 cv
453.88 298.29 455.176 301.17 453.16 304.698 cv
450.28 309.09 444.664 309.018 440.704 306.138 cv
440.128 305.634 439.552 305.13 439.12 304.554 cv
434.44 298.578 436.528 290.73 442.288 286.338 cv
449.92 281.154 459.28 283.314 465.04 290.226 cv
472.168 299.874 469.504 312.258 460.36 319.53 cv
449.92 326.946 436.744 325.146 427.744 316.362 cv
418.6 306.426 417.88 292.602 424.504 281.73 cv
425.872 279.426 429.904 275.898 428.896 272.874 cv
427.528 269.058 423.136 269.418 419.896 269.13 cv
415.648 268.554 411.4 267.834 407.152 267.042 cv
400.096 265.818 395.776 265.818 392.032 272.802 cv
389.656 277.338 389.152 282.81 392.392 286.986 cv
394.696 289.938 399.304 292.026 402.76 289.578 cv
403.984 288.57 404.776 286.842 403.192 285.762 cv
402.616 285.474 400.816 284.61 401.104 283.746 cv
401.176 283.386 401.752 283.314 402.04 283.242 cv
402.328 283.17 402.616 283.026 402.904 282.882 cv
405.424 281.514 407.584 283.53 407.728 286.122 cv
407.728 288.498 406.432 290.298 404.56 291.522 cv
400.672 293.826 396.136 292.746 392.896 289.866 cv
387.856 285.042 387.64 277.698 391.096 271.866 cv
392.104 270.21 393.4 268.77 394.912 267.546 cv
394.336 267.834 393.76 268.266 393.112 268.698 cv
391.24 269.994 389.872 271.578 388.288 273.09 cv
385.84 276.042 384.04 279.426 383.104 283.386 cv
382.096 288.858 383.104 294.474 387.208 298.506 cv
389.8 300.738 393.328 301.962 396.568 300.378 cv
397.648 299.73 398.296 298.938 398.8 297.93 cv
397.936 297.714 397.36 296.778 397.576 295.842 cv
397.792 294.834 398.728 294.258 399.664 294.474 cv
400.672 294.618 401.32 295.626 401.104 296.562 cv
400.96 297.282 400.384 297.786 399.808 297.93 cv
399.664 298.29 399.592 298.65 399.448 299.01 cv
397.792 302.178 394.12 302.754 390.952 301.818 cv
386.56 300.306 383.896 296.562 382.672 292.242 cv
381.16 285.762 382.96 279.498 386.632 274.53 cv
382.96 277.41 378.064 278.778 373.024 278.058 cv
363.232 276.546 356.536 267.402 358.048 257.61 cv
359.488 247.89 368.632 241.122 378.424 242.634 cv
383.752 243.426 388.144 246.522 390.808 250.698 cv
388.216 244.074 388.288 236.514 392.464 230.25 cv
395.2 226.65 398.944 224.058 403.624 224.202 cv
406.936 224.49 410.176 226.29 410.608 229.89 cv
410.608 230.25 410.608 230.61 410.536 230.97 cv
411.112 231.33 411.4 231.978 411.256 232.698 cv
411.112 233.706 410.176 234.354 409.24 234.21 cv
408.232 234.066 407.584 233.13 407.728 232.122 cv
407.872 231.186 408.664 230.538 409.6 230.61 cv
409.528 229.53 409.168 228.594 408.376 227.586 cv
405.928 224.922 402.184 224.85 399.016 226.002 cv
393.76 228.306 390.808 233.202 389.8 238.674 cv
388.936 245.01 390.592 250.842 393.976 255.954 cv
394.408 256.602 394.552 256.818 394.912 257.322 cv
393.976 255.594 393.472 254.226 393.184 252.282 cv
391.96 245.658 394.84 238.818 401.248 236.082 cv
405.28 234.57 409.888 235.146 412.768 238.674 cv
414.064 240.474 414.64 242.634 413.776 244.794 cv
412.696 247.17 409.96 248.322 408.088 246.162 cv
407.872 245.874 407.656 245.658 407.44 245.514 cv
407.224 245.298 406.72 245.082 406.72 244.722 cv
406.864 243.786 408.736 243.642 409.384 243.498 cv
411.256 243.138 411.112 241.194 410.32 239.826 cv
407.944 236.37 403.048 236.73 399.736 238.602 cv
395.272 241.482 393.04 246.594 393.976 251.706 cv
394.984 257.178 397.288 260.706 403.192 262.578 cv
415.288 266.034 426.952 268.41 439.552 267.978 cv
441.496 267.834 443.44 267.69 445.312 267.402 cv
455.536 265.53 466.48 268.554 474.76 276.258 cv
477.856 279.282 480.304 282.738 482.104 286.554 cv
482.104 289.434 li
ef
482.392 284.322 mo
482.392 285.042 475.552 267.978 463.6 267.042 cv
451.648 266.034 437.248 265.026 430.912 249.186 cv
424.576 233.346 418.024 219.738 404.632 222.114 cv
391.168 224.562 388.288 228.954 388.288 228.954 cv
388.288 228.954 396.064 218.226 412.912 216.282 cv
429.688 214.338 453.592 223.122 467.776 252.138 cv
481.888 281.154 482.392 283.602 482.392 284.322 cv
ef
483.472 286.77 mo
483.472 286.77 483.256 281.37 478.216 270.786 cv
473.104 260.274 470.296 255.378 471.016 247.386 cv
471.808 239.466 471.808 235.002 468.784 229.386 cv
465.76 223.77 458.776 220.89 458.776 220.89 cv
458.776 220.89 471.88 221.682 479.512 239.97 cv
485.128 253.362 485.992 267.402 484.336 281.73 cv
483.976 284.754 483.472 286.77 483.472 286.77 cv
ef
483.976 287.778 mo
483.976 287.778 486.568 274.098 486.568 266.106 cv
486.568 258.114 485.704 248.25 485.704 246.45 cv
485.704 244.65 486.712 253.362 488.296 260.058 cv
489.808 266.754 494.776 270.498 490.384 277.482 cv
486.064 284.394 483.976 287.778 483.976 287.778 cv
ef
359.848 257.898 mo
360.568 253.506 363.016 250.194 365.464 250.626 cv
367.84 250.986 369.28 254.802 368.632 259.266 cv
367.912 263.658 365.464 266.97 363.016 266.61 cv
360.64 266.178 359.2 262.362 359.848 257.898 cv
cp
361.072 258.114 mo
360.568 261.354 361.576 264.162 363.376 264.378 cv
365.104 264.666 366.904 262.29 367.408 259.05 cv
367.912 255.882 366.904 253.002 365.104 252.786 cv
363.376 252.498 361.576 254.874 361.072 258.114 cv
0 0 0 0 cmyk
ef
372.664 580.746 mo
366.832 582.834 li
357.904 584.562 352.288 578.514 346.96 572.322 cv
338.608 561.882 331.696 551.874 317.08 550.29 cv
306.424 549.21 296.056 553.386 291.952 563.826 cv
289.936 571.026 li
290.872 568.506 291.808 565.914 293.032 563.538 cv
298.36 552.81 310.096 549.786 321.256 553.098 cv
332.992 556.554 338.032 564.69 344.872 573.834 cv
350.776 581.754 356.968 587.658 367.336 587.082 cv
374.536 586.074 li
376.048 585.57 376.768 583.914 376.264 582.474 cv
375.76 580.962 374.104 580.17 372.664 580.746 cv
0 0 0 1 cmyk
ef
304.696 566.994 mo
304.624 566.994 li
304.552 567.138 304.48 567.21 304.48 567.426 cv
304.192 568.434 305.344 568.866 305.992 568.146 cv
306.28 567.858 306.424 567.498 306.568 567.138 cv
307.288 564.546 304.12 563.178 302.464 565.122 cv
302.392 565.122 li
302.248 565.338 302.032 565.626 301.888 565.842 cv
301.744 566.13 301.672 566.418 301.528 566.706 cv
301.168 568.146 301.528 569.73 302.68 570.666 cv
302.68 570.738 li
304.336 572.106 306.856 571.674 308.224 570.09 cv
308.224 570.018 li
309.232 568.866 309.736 567.354 309.664 565.986 cv
309.52 562.962 307 560.802 303.976 561.162 cv
302.608 561.306 301.24 562.026 300.232 563.178 cv
300.16 563.178 li
297.784 565.986 297.64 570.522 300.664 573.114 cv
303.616 575.634 308.008 574.842 310.456 571.962 cv
312.04 570.09 312.76 567.786 312.688 565.626 cv
312.544 563.466 311.68 561.378 309.952 559.938 cv
308.224 558.426 305.992 557.85 303.832 558.138 cv
301.672 558.354 299.584 559.434 298 561.306 cv
297.928 561.306 li
296.128 563.466 295.264 566.13 295.336 568.722 cv
295.48 571.314 296.56 573.762 298.576 575.49 cv
298.648 575.49 li
302.824 579.018 309.16 578.01 312.688 573.834 cv
313.336 573.114 313.84 572.394 314.2 571.602 cv
314.632 570.81 314.992 570.018 315.208 569.226 cv
316.432 564.978 315.352 560.442 311.968 557.562 cv
311.32 556.986 310.6 556.554 309.88 556.122 cv
309.088 555.762 308.368 555.474 307.576 555.33 cv
303.472 554.322 298.792 555.762 295.768 559.362 cv
294.832 558.642 li
298.216 554.682 303.328 553.098 307.792 554.178 cv
308.728 554.394 309.592 554.682 310.384 555.114 cv
311.176 555.546 311.968 556.05 312.688 556.626 cv
316.432 559.866 317.728 564.906 316.36 569.514 cv
316.072 570.45 315.712 571.314 315.28 572.178 cv
314.776 573.042 314.272 573.834 313.624 574.626 cv
309.664 579.234 302.536 580.386 297.856 576.354 cv
295.552 574.41 294.328 571.674 294.184 568.794 cv
294.04 565.914 294.976 562.962 297.064 560.514 cv
298.864 558.426 301.24 557.202 303.76 556.914 cv
306.208 556.698 308.728 557.346 310.672 559.002 cv
310.672 559.074 li
312.688 560.73 313.768 563.106 313.84 565.554 cv
313.984 568.074 313.12 570.594 311.392 572.682 cv
311.392 572.754 li
311.32 572.754 li
308.512 576.066 303.328 576.93 299.872 573.978 cv
296.416 571.026 296.488 565.698 299.296 562.458 cv
300.52 561.018 302.176 560.154 303.832 560.01 cv
307.504 559.578 310.672 562.242 310.816 565.914 cv
310.888 567.642 310.384 569.37 309.16 570.81 cv
309.088 570.81 li
307.36 572.898 304.12 573.474 301.888 571.602 cv
300.088 570.018 299.8 567.354 300.88 565.338 cv
301.024 564.978 301.24 564.618 301.528 564.33 cv
302.824 562.818 305.128 562.53 306.64 563.754 cv
306.64 563.826 li
307.72 564.69 308.08 566.13 307.648 567.498 cv
307.504 568.002 307.288 568.506 306.928 568.938 cv
305.416 570.594 302.68 569.298 303.328 567.066 cv
303.4 566.778 303.544 566.49 303.76 566.274 cv
303.76 566.202 li
304.48 566.85 li
304.696 566.994 li
f
319.528 577.146 mo
317.296 576.57 316.288 578.802 316.648 580.674 cv
317.152 583.338 319.96 585.642 322.696 585.642 cv
327.952 585.642 332.272 581.898 333.928 577.002 cv
333.784 577.65 333.64 578.37 333.568 579.09 cv
333.496 579.45 333.064 580.818 333.568 581.034 cv
336.808 576.858 337.456 571.386 335.872 566.418 cv
333.424 558.93 326.872 553.962 319.168 552.594 cv
327.088 553.89 333.928 559.074 336.376 566.85 cv
338.176 572.97 336.808 579.666 331.912 583.986 cv
329.68 586.434 326.872 587.802 323.704 588.738 cv
322.048 588.45 319.096 587.514 318.592 585.642 cv
318.448 585.282 317.872 584.994 317.584 584.706 cv
315.856 582.978 314.632 580.098 316.072 577.794 cv
317.008 576.498 318.16 576.354 319.528 577.146 cv
ef
291.448 554.898 mo
352.216 525.522 402.4 507.522 441.856 500.898 cv
467.992 496.506 489.52 497.082 506.368 502.626 cv
523.288 508.17 535.528 518.826 543.088 534.45 cv
546.472 541.29 548.848 549.138 550.36 557.994 cv
540.136 559.722 532.288 487.722 442.216 502.914 cv
402.904 509.466 352.936 527.466 292.312 556.77 cv
291.448 554.898 li
f
345.808 532.794 mo
358.984 529.482 372.664 532.002 383.32 540.642 cv
393.256 548.994 399.088 562.962 395.92 575.922 cv
395.92 576.21 395.848 576.282 395.704 576.498 cv
391.096 586.938 378.568 594.858 367.336 589.89 cv
362.44 587.658 357.904 581.826 361 576.426 cv
361.936 574.842 363.232 574.194 364.96 573.834 cv
365.896 573.618 364.672 573.906 364.384 573.978 cv
360.496 574.914 360.064 579.81 361.864 582.834 cv
365.824 589.17 374.752 588.594 380.296 584.85 cv
383.824 582.402 386.344 578.73 387.568 574.626 cv
387.928 573.33 389.512 564.762 385.768 566.202 cv
387.496 565.554 387.784 561.09 387.784 559.722 cv
387.352 548.49 379.36 538.986 369.496 534.378 cv
362.152 530.994 353.584 530.778 345.808 532.794 cv
ef
292.888 553.53 mo
292.888 553.53 292.384 551.73 292.24 548.778 cv
290.8 524.082 313.192 499.746 337.096 496.722 cv
347.68 495.354 352.288 495.786 352.288 495.786 cv
352.288 495.786 349.192 494.274 345.088 493.122 cv
340.912 492.042 339.688 492.186 339.688 492.186 cv
339.688 492.186 350.704 485.85 364.744 490.458 cv
378.784 495.066 380.872 496.578 380.872 496.578 cv
359.704 481.098 333.784 479.442 312.76 497.01 cv
299.8 507.882 299.8 507.882 299.8 507.882 cv
299.8 507.882 305.2 499.314 309.664 495.498 cv
314.056 491.754 314.056 491.754 314.056 491.754 cv
314.056 491.754 310.384 493.266 305.92 496.794 cv
292.096 507.738 289.288 526.602 290.08 543.45 cv
290.368 548.058 291.16 551.802 292.888 553.53 cv
ef
329.68 539.562 mo
361.576 549.426 393.76 572.682 420.976 555.546 cv
493.552 509.826 506.008 542.658 545.68 554.466 cv
545.752 554.538 li
506.008 542.658 493.624 509.538 420.976 555.546 cv
393.832 572.754 361.504 549.426 329.608 539.562 cv
329.68 539.562 li
cp
293.248 537.186 mo
304.12 534.162 315.352 535.458 326.656 538.626 cv
326.584 538.698 li
315.352 535.53 304.12 534.234 293.248 537.186 cv
ef
331.768 538.626 mo
362.152 547.986 392.608 569.226 420.976 554.106 cv
491.176 516.738 505.648 543.306 544.744 553.026 cv
544.816 553.098 li
505.72 543.306 491.32 516.378 420.976 554.178 cv
392.68 569.37 362.152 548.058 331.696 538.698 cv
331.768 538.626 li
cp
293.32 536.754 mo
305.056 533.082 316.864 534.378 328.744 537.69 cv
328.672 537.762 li
316.792 534.45 304.984 533.154 293.32 536.754 cv
ef
334.144 537.618 mo
362.944 546.402 391.672 565.41 420.976 552.666 cv
488.44 523.362 505.288 544.17 543.952 551.73 cv
544.024 551.802 li
505.288 544.098 488.584 522.93 420.976 552.81 cv
391.744 565.698 362.872 546.546 334 537.69 cv
334.144 537.618 li
cp
293.464 536.322 mo
306.064 531.93 318.592 533.226 331.12 536.682 cv
330.904 536.754 li
318.448 533.298 305.992 532.002 293.464 536.394 cv
293.464 536.322 li
ef
336.808 536.466 mo
363.88 544.602 391.024 561.378 420.976 551.298 cv
485.128 529.698 504.784 545.178 543.232 550.506 cv
543.304 550.578 li
504.856 545.106 485.416 529.194 420.976 551.37 cv
391.096 561.666 363.808 544.818 336.592 536.538 cv
336.808 536.466 li
cp
293.536 535.89 mo
307.216 530.562 320.464 531.858 333.784 535.53 cv
333.496 535.674 li
320.32 532.002 307.072 530.706 293.536 535.89 cv
ef
339.976 535.17 mo
365.248 542.586 390.88 557.058 420.976 549.858 cv
481.384 535.458 504.208 546.33 542.656 549.426 cv
542.656 549.498 li
504.28 546.186 481.744 534.882 420.976 550.002 cv
390.88 557.49 365.104 542.802 339.616 535.242 cv
339.976 535.17 li
cp
293.68 535.386 mo
308.512 529.122 322.624 530.418 336.808 534.234 cv
336.52 534.378 li
322.408 530.562 308.368 529.266 293.68 535.458 cv
293.68 535.386 li
ef
343.576 533.658 mo
367.048 540.354 391.312 552.594 420.976 548.418 cv
477.136 540.498 503.488 547.41 542.008 548.346 cv
542.08 548.49 li
503.56 547.266 477.64 539.994 420.976 548.634 cv
391.24 553.17 366.832 540.642 343.072 533.802 cv
343.576 533.658 li
cp
293.824 534.954 mo
310.024 527.394 325.072 528.69 340.408 532.722 cv
339.904 532.938 li
324.784 528.906 309.808 527.61 293.824 534.954 cv
ef
347.752 531.858 mo
369.568 537.906 392.392 548.274 420.976 547.05 cv
472.6 544.818 502.696 548.49 541.432 547.338 cv
541.504 547.482 li
502.768 548.346 473.176 544.314 420.976 547.194 cv
392.248 548.85 369.208 538.266 347.176 532.146 cv
347.752 531.858 li
cp
293.968 534.45 mo
311.752 525.522 327.88 526.746 344.512 530.994 cv
343.936 531.282 li
327.52 527.034 311.464 525.738 293.968 534.522 cv
293.968 534.45 li
ef
352.648 529.914 mo
372.736 535.314 394.192 544.17 420.976 545.61 cv
467.992 548.202 501.832 549.57 540.928 546.402 cv
541 546.546 li
501.976 549.426 468.712 547.77 420.976 545.826 cv
393.832 544.746 372.232 535.674 351.856 530.202 cv
352.144 530.13 352.36 530.058 352.648 529.914 cv
cp
294.112 533.946 mo
313.624 523.362 330.976 524.514 349.336 529.05 cv
348.544 529.41 li
330.544 524.874 313.336 523.722 294.112 534.018 cv
294.112 533.946 li
ef
358.048 527.754 mo
376.48 532.65 396.424 540.426 420.976 544.17 cv
463.816 550.722 500.969 550.506 540.352 545.466 cv
540.424 545.61 li
501.112 550.362 464.464 550.362 420.976 544.458 cv
395.992 541.002 375.832 533.082 357.112 528.186 cv
357.4 528.042 357.688 527.898 358.048 527.754 cv
cp
294.256 533.37 mo
315.712 520.986 334.36 521.922 354.664 526.962 cv
354.376 527.034 354.016 527.178 353.728 527.322 cv
333.784 522.354 315.352 521.346 294.256 533.514 cv
294.256 533.37 li
ef
363.736 525.594 mo
380.656 530.13 399.016 537.258 420.976 542.802 cv
460.216 552.594 500.176 551.442 539.848 544.602 cv
539.92 544.746 li
500.32 551.226 460.792 552.306 420.976 543.018 cv
398.512 537.834 379.864 530.634 362.656 525.954 cv
363.016 525.81 363.376 525.738 363.736 525.594 cv
cp
294.472 532.866 mo
317.728 518.394 337.888 519.042 360.352 524.658 cv
359.992 524.802 359.632 524.946 359.272 525.09 cv
337.24 519.618 317.368 518.898 294.472 532.938 cv
294.472 532.866 li
ef
369.568 523.362 mo
384.976 527.826 401.608 534.594 420.976 541.362 cv
457.624 554.106 499.456 552.234 539.344 543.738 cv
539.416 543.882 li
499.6 552.09 458.056 553.89 420.976 541.65 cv
401.104 535.098 384.112 528.258 368.416 523.794 cv
368.776 523.65 369.136 523.506 369.568 523.362 cv
cp
294.688 532.29 mo
319.744 515.73 341.56 515.802 366.256 522.426 cv
365.824 522.642 365.464 522.786 365.032 522.93 cv
340.84 516.45 319.384 516.306 294.616 532.362 cv
294.688 532.29 li
ef
375.184 521.346 mo
389.152 525.81 404.128 532.434 420.976 539.922 cv
456.04 555.618 498.952 553.098 538.84 542.874 cv
538.984 543.09 li
499.024 552.954 456.328 555.258 420.976 540.282 cv
403.552 532.866 388.288 526.242 373.96 521.778 cv
374.392 521.634 374.752 521.49 375.184 521.346 cv
cp
294.904 531.642 mo
321.688 512.994 345.088 512.418 371.944 520.338 cv
371.512 520.482 371.152 520.626 370.72 520.77 cv
344.368 513.138 321.256 513.57 294.832 531.786 cv
294.904 531.642 li
ef
380.368 519.474 mo
393.04 524.01 406.36 530.562 420.976 538.554 cv
455.464 557.346 498.52 554.034 538.408 542.154 cv
538.48 542.298 li
498.592 553.818 455.536 556.914 420.976 538.842 cv
405.856 530.994 392.176 524.37 379.216 519.906 cv
379.648 519.762 380.008 519.618 380.368 519.474 cv
cp
295.12 531.066 mo
323.416 510.258 348.616 508.818 377.344 518.394 cv
376.912 518.538 376.48 518.682 376.12 518.826 cv
347.824 509.61 323.056 510.906 295.048 531.21 cv
295.12 531.066 li
ef
385.192 517.818 mo
396.496 522.498 408.304 528.978 420.976 537.114 cv
455.68 559.362 498.232 555.042 537.976 541.434 cv
537.976 541.434 538.048 541.506 538.048 541.578 cv
498.304 554.754 455.536 558.858 420.976 537.474 cv
407.872 529.41 395.704 522.858 384.04 518.25 cv
384.4 518.106 384.76 517.962 385.192 517.818 cv
cp
295.408 530.346 mo
325 507.522 351.928 505.146 382.24 516.666 cv
381.88 516.81 381.448 516.954 381.088 517.098 cv
351.136 506.01 324.64 508.242 295.336 530.49 cv
295.336 530.418 295.408 530.418 295.408 530.346 cv
ef
389.44 516.45 mo
399.592 521.13 410.032 527.61 420.976 535.674 cv
456.4 561.882 498.088 556.122 537.544 540.714 cv
537.688 540.858 li
498.16 555.834 456.112 561.162 420.976 536.034 cv
409.6 527.97 398.8 521.49 388.36 516.81 cv
388.72 516.666 389.08 516.522 389.44 516.45 cv
cp
295.696 529.626 mo
326.44 504.858 355.168 501.402 386.704 515.154 cv
386.344 515.298 385.912 515.442 385.552 515.586 cv
354.376 502.41 326.08 505.506 295.624 529.842 cv
295.624 529.77 295.624 529.698 295.696 529.626 cv
ef
393.184 515.226 mo
402.256 519.978 411.472 526.386 420.976 534.306 cv
457.408 564.762 498.016 557.346 537.184 540.066 cv
537.256 540.282 li
498.016 556.986 457.12 563.97 420.976 534.666 cv
411.112 526.674 401.536 520.266 392.176 515.514 cv
392.536 515.442 392.896 515.298 393.184 515.226 cv
cp
296.056 528.834 mo
327.808 502.122 358.264 497.802 390.664 513.858 cv
390.304 514.002 389.944 514.146 389.584 514.218 cv
357.4 498.81 327.448 502.914 295.912 529.05 cv
295.984 528.978 295.984 528.906 296.056 528.834 cv
ef
396.568 514.146 mo
404.632 518.97 412.768 525.162 420.976 532.866 cv
458.56 568.074 498.016 558.642 536.824 539.49 cv
536.896 539.706 li
498.016 558.21 458.2 567.066 420.976 533.298 cv
412.408 525.522 403.984 519.258 395.632 514.434 cv
395.92 514.362 396.28 514.218 396.568 514.146 cv
cp
296.416 528.042 mo
329.104 499.458 361.144 494.202 394.192 512.778 cv
393.832 512.85 393.544 512.994 393.184 513.066 cv
360.352 495.21 328.744 500.25 296.272 528.258 cv
296.272 528.186 296.344 528.114 296.416 528.042 cv
ef
399.52 513.21 mo
406.72 518.034 413.848 524.082 420.976 531.426 cv
459.784 571.602 498.016 560.01 536.464 538.986 cv
536.464 538.986 536.536 539.058 536.536 539.13 cv
498.016 559.578 459.424 570.45 420.976 531.858 cv
413.488 524.442 406.072 518.322 398.656 513.498 cv
398.944 513.426 399.232 513.282 399.52 513.21 cv
cp
296.848 527.106 mo
330.328 496.794 364.024 490.674 397.288 511.77 cv
397 511.842 396.712 511.986 396.352 512.058 cv
363.088 491.754 329.896 497.658 296.704 527.394 cv
296.704 527.322 296.776 527.178 296.848 527.106 cv
ef
496.216 524.37 mo
494.776 521.49 490.672 519.906 487.72 519.618 cv
479.296 518.97 472.6 525.882 471.664 534.09 cv
470.656 545.322 479.656 554.25 490.6 554.898 cv
503.416 555.402 513.496 545.25 514.432 532.794 cv
515.008 521.778 508.312 510.906 497.8 507.162 cv
497.728 507.09 496.072 506.586 496.792 507.018 cv
498.232 507.738 499.672 508.458 501.112 509.322 cv
513.352 517.386 517.384 534.45 507.16 545.97 cv
499.6 554.178 486.712 555.546 478.504 547.41 cv
472.312 540.858 471.808 530.274 479.08 524.226 cv
485.056 519.402 495.568 520.338 497.728 528.834 cv
498.664 533.01 496.36 538.338 491.464 538.194 cv
490.312 538.122 489.16 537.69 488.44 536.682 cv
487.864 535.818 487.648 534.162 489.016 533.946 cv
487.36 533.586 487.216 535.674 487.792 536.754 cv
489.376 539.634 493.192 539.274 495.496 537.546 cv
499.744 534.306 499.384 528.186 496.216 524.37 cv
ef
524.152 542.658 mo
524.152 542.946 524.728 543.09 524.944 543.162 cv
528.616 544.53 528.976 548.562 527.032 551.514 cv
525.088 554.466 521.704 555.258 518.392 554.178 cv
516.664 553.602 515.224 552.594 514 551.226 cv
511.624 548.346 510.904 544.674 511.696 541.002 cv
510.904 544.458 511.336 547.77 513.28 550.794 cv
515.584 554.106 519.184 555.978 523.288 555.546 cv
526.888 554.97 529.912 552.594 530.776 548.994 cv
531.424 545.682 529.984 542.226 526.672 541.002 cv
524.224 540.282 521.344 541.218 520.696 543.882 cv
520.408 545.106 520.912 546.762 522.352 547.05 cv
523.216 547.194 524.224 546.546 523.576 545.682 cv
522.856 544.602 522.928 543.306 524.152 542.658 cv
ef
376.912 562.818 mo
379.576 559.29 378.784 555.978 374.896 553.026 cv
365.464 546.114 353.44 553.17 349.048 561.738 cv
341.272 577.794 352.936 594.858 369.064 601.698 cv
396.784 612.642 426.016 596.442 435.592 571.746 cv
446.752 540.21 426.16 508.602 393.256 497.73 cv
349.192 483.978 303.112 510.186 293.392 550.506 cv
293.32 551.01 292.816 553.314 292.816 553.314 cv
300.232 518.754 333.496 492.546 373.312 494.274 cv
409.672 496.506 440.128 523.218 438.256 557.634 cv
436.168 584.058 412.84 607.098 382.672 604.578 cv
363.376 602.562 344.8 587.874 347.968 568.794 cv
349.552 560.514 357.76 550.578 368.2 553.602 cv
374.176 555.546 372.52 558.57 371.368 562.458 cv
370.936 566.418 375.4 564.69 376.912 562.818 cv
ef
.216 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
376.912 562.818 mo
379.576 559.29 378.784 555.978 374.896 553.026 cv
365.464 546.114 353.44 553.17 349.048 561.738 cv
341.272 577.794 352.936 594.858 369.064 601.698 cv
396.784 612.642 426.016 596.442 435.592 571.746 cv
446.752 540.21 426.16 508.602 393.256 497.73 cv
349.192 483.978 303.112 510.186 293.392 550.506 cv
293.32 551.01 292.816 553.314 292.816 553.314 cv
300.232 518.754 333.496 492.546 373.312 494.274 cv
409.672 496.506 440.128 523.218 438.256 557.634 cv
436.168 584.058 412.84 607.098 382.672 604.578 cv
363.376 602.562 344.8 587.874 347.968 568.794 cv
349.552 560.514 357.76 550.578 368.2 553.602 cv
374.176 555.546 372.52 558.57 371.368 562.458 cv
370.936 566.418 375.4 564.69 376.912 562.818 cv
cp
@
439.84 496.074 mo
439.768 499.458 437.68 501.186 434.008 501.402 cv
425.152 501.762 421.336 492.258 422.848 485.058 cv
425.872 471.666 440.848 465.834 453.664 468.354 cv
475.264 473.106 484.84 495.714 478.792 515.226 cv
472.6 533.37 456.112 544.242 437.896 545.826 cv
437.752 545.61 li
451.864 544.53 465.184 537.762 473.68 525.234 cv
484.984 507.738 482.104 483.402 463.096 472.314 cv
450.712 465.402 432.712 466.77 425.584 480.162 cv
422.56 485.994 422.704 495.714 430.336 498.234 cv
434.8 499.53 435.232 496.938 436.384 493.986 cv
437.968 491.322 439.84 494.274 439.84 496.074 cv
ef
439.84 496.074 mo
439.768 499.458 437.68 501.186 434.008 501.402 cv
425.152 501.762 421.336 492.258 422.848 485.058 cv
425.872 471.666 440.848 465.834 453.664 468.354 cv
475.264 473.106 484.84 495.714 478.792 515.226 cv
472.6 533.37 456.112 544.242 437.896 545.826 cv
437.752 545.61 li
451.864 544.53 465.184 537.762 473.68 525.234 cv
484.984 507.738 482.104 483.402 463.096 472.314 cv
450.712 465.402 432.712 466.77 425.584 480.162 cv
422.56 485.994 422.704 495.714 430.336 498.234 cv
434.8 499.53 435.232 496.938 436.384 493.986 cv
437.968 491.322 439.84 494.274 439.84 496.074 cv
cp
@
471.736 478.866 mo
469.216 471.81 469.936 464.178 474.256 457.914 cv
478.504 452.082 486.064 448.194 493.48 449.274 cv
493.624 449.346 493.696 449.346 493.84 449.418 cv
499.96 451.434 505.072 457.914 502.768 464.25 cv
501.76 467.058 498.736 469.866 495.496 468.354 cv
494.632 467.922 494.128 467.274 493.912 466.338 cv
493.696 465.834 493.912 466.482 493.984 466.626 cv
494.704 468.786 497.512 468.714 499.096 467.634 cv
502.48 465.186 501.688 460.29 499.312 457.41 cv
497.8 455.61 495.568 454.386 493.192 453.954 cv
492.4 453.81 487.576 453.378 488.512 455.322 cv
488.08 454.386 485.56 454.458 484.768 454.53 cv
478.504 455.322 473.536 460.146 471.448 465.762 cv
469.864 470.01 470.224 474.69 471.736 478.866 cv
ef
468.712 472.386 mo
468.424 471.018 467.992 469.722 467.56 468.57 cv
467.056 467.49 466.48 466.554 465.904 465.69 cv
465.328 464.97 464.68 464.322 464.032 463.746 cv
461.512 461.73 458.704 460.938 455.464 461.586 cv
453.016 462.306 450.856 463.674 448.336 464.178 cv
446.248 464.538 443.872 464.466 442.072 463.314 cv
441.496 462.954 440.848 462.234 441.928 462.09 cv
442.432 462.018 443.008 462.018 443.512 462.018 cv
445.816 461.874 447.832 461.442 449.848 460.29 cv
450.28 460.002 450.712 459.714 451.216 459.498 cv
454.096 457.986 457.192 458.346 460.072 459.57 cv
461.656 460.362 462.952 461.37 464.176 462.594 cv
464.824 463.314 465.472 464.106 466.12 465.042 cv
466.696 465.978 467.2 467.058 467.704 468.282 cv
468.136 469.506 468.424 470.874 468.712 472.386 cv
ef
512.272 549.138 mo
512.2 550.218 512.128 551.082 511.984 551.946 cv
511.768 552.738 511.48 553.53 511.192 554.178 cv
510.904 554.754 510.544 555.258 510.184 555.762 cv
508.672 557.49 506.944 558.354 504.64 558.282 cv
502.912 558.066 501.256 557.346 499.456 557.274 cv
498.016 557.346 496.432 557.634 495.352 558.642 cv
495.064 558.93 494.632 559.506 495.424 559.506 cv
495.784 559.506 496.144 559.434 496.504 559.362 cv
498.088 559.218 499.528 559.29 501.04 559.866 cv
501.328 560.01 501.688 560.154 501.976 560.226 cv
504.136 560.946 506.152 560.37 507.952 559.146 cv
508.96 558.354 509.752 557.562 510.4 556.554 cv
510.76 555.978 511.12 555.33 511.408 554.61 cv
511.696 553.89 511.912 553.026 512.056 552.162 cv
512.2 551.226 512.272 550.218 512.272 549.138 cv
ef
207.28 580.746 mo
213.112 582.834 li
222.04 584.562 227.656 578.514 232.984 572.322 cv
241.336 561.882 248.248 551.874 262.864 550.29 cv
273.52 549.21 283.96 553.386 287.92 563.826 cv
289.936 571.026 li
289 568.506 288.064 565.914 286.912 563.538 cv
281.584 552.81 269.848 549.786 258.688 553.098 cv
246.952 556.554 241.984 564.69 235.072 573.834 cv
229.168 581.754 222.976 587.658 212.608 587.082 cv
205.408 586.074 li
203.896 585.57 203.176 583.914 203.68 582.474 cv
204.184 580.962 205.84 580.17 207.28 580.746 cv
ef
275.32 566.994 mo
275.32 566.994 li
275.392 567.138 275.464 567.21 275.536 567.426 cv
275.824 568.434 274.6 568.866 273.952 568.146 cv
273.736 567.858 273.52 567.498 273.448 567.138 cv
272.656 564.546 275.824 563.178 277.552 565.122 cv
277.768 565.338 277.912 565.626 278.056 565.842 cv
278.2 566.13 278.344 566.418 278.416 566.706 cv
278.848 568.146 278.416 569.73 277.264 570.666 cv
277.264 570.738 li
275.608 572.106 273.088 571.674 271.72 570.09 cv
271.72 570.018 li
270.712 568.866 270.208 567.354 270.28 565.986 cv
270.424 562.962 272.944 560.802 275.968 561.162 cv
277.336 561.306 278.704 562.026 279.784 563.178 cv
282.16 565.986 282.304 570.522 279.352 573.114 cv
279.28 573.114 li
276.328 575.634 271.936 574.842 269.488 571.962 cv
267.904 570.09 267.184 567.786 267.256 565.626 cv
267.4 563.466 268.336 561.378 269.992 559.938 cv
270.064 559.938 li
271.72 558.426 273.952 557.85 276.112 558.138 cv
278.272 558.354 280.432 559.434 282.016 561.306 cv
283.888 563.466 284.68 566.13 284.608 568.722 cv
284.464 571.314 283.384 573.762 281.368 575.49 cv
277.12 579.018 270.784 578.01 267.256 573.834 cv
266.68 573.114 266.176 572.394 265.744 571.602 cv
265.312 570.81 264.952 570.018 264.736 569.226 cv
263.512 564.978 264.664 560.442 267.976 557.562 cv
268.696 556.986 269.344 556.554 270.136 556.122 cv
270.856 555.762 271.648 555.474 272.44 555.33 cv
276.544 554.322 281.152 555.762 284.248 559.362 cv
285.04 558.642 li
281.728 554.682 276.688 553.098 272.152 554.178 cv
271.288 554.394 270.424 554.682 269.56 555.114 cv
268.768 555.546 267.976 556.05 267.256 556.626 cv
263.512 559.866 262.288 564.906 263.584 569.514 cv
263.872 570.45 264.232 571.314 264.664 572.178 cv
265.168 573.042 265.672 573.834 266.392 574.626 cv
270.28 579.234 277.408 580.386 282.088 576.354 cv
284.392 574.41 285.544 571.674 285.688 568.794 cv
285.832 565.914 284.896 562.962 282.88 560.514 cv
281.08 558.426 278.704 557.202 276.256 556.914 cv
273.736 556.698 271.216 557.346 269.272 559.002 cv
269.272 559.074 li
267.256 560.73 266.248 563.106 266.104 565.554 cv
265.96 568.074 266.824 570.594 268.624 572.682 cv
268.624 572.754 li
271.432 576.066 276.616 576.93 280.072 573.978 cv
283.528 571.026 283.456 565.698 280.648 562.458 cv
279.424 561.018 277.768 560.154 276.112 560.01 cv
272.44 559.578 269.272 562.242 269.128 565.914 cv
269.056 567.642 269.632 569.37 270.856 570.81 cv
272.656 572.898 275.896 573.474 278.056 571.602 cv
279.856 570.018 280.216 567.354 279.064 565.338 cv
278.92 564.978 278.704 564.618 278.416 564.33 cv
277.12 562.818 274.816 562.53 273.304 563.754 cv
273.304 563.826 li
272.224 564.69 271.864 566.13 272.296 567.498 cv
272.44 568.002 272.728 568.506 273.088 568.938 cv
274.528 570.594 277.264 569.298 276.616 567.066 cv
276.544 566.778 276.4 566.49 276.184 566.274 cv
276.184 566.202 li
275.464 566.85 li
275.32 566.994 li
f
260.488 577.146 mo
262.648 576.57 263.656 578.802 263.368 580.674 cv
262.792 583.338 259.984 585.642 257.248 585.642 cv
251.992 585.642 247.672 581.898 246.088 577.002 cv
246.16 577.65 246.304 578.37 246.448 579.09 cv
246.52 579.45 246.88 580.818 246.376 581.034 cv
243.136 576.858 242.56 571.386 244.072 566.418 cv
246.52 558.93 253.072 553.962 260.776 552.594 cv
252.856 553.89 246.016 559.074 243.568 566.85 cv
241.768 572.97 243.136 579.666 248.032 583.986 cv
250.336 586.434 253.144 587.802 256.24 588.738 cv
257.896 588.45 260.848 587.514 261.424 585.642 cv
261.496 585.282 262.072 584.994 262.36 584.706 cv
264.16 582.978 265.312 580.098 263.872 577.794 cv
262.936 576.498 261.784 576.354 260.488 577.146 cv
ef
288.424 554.898 mo
227.728 525.522 177.544 507.522 138.088 500.898 cv
111.952 496.506 90.4963 497.082 73.6482 502.626 cv
56.6563 508.17 44.4163 518.826 36.8562 534.45 cv
33.5442 541.29 31.0962 549.138 29.5842 557.994 cv
39.8083 559.722 47.6563 487.722 137.728 502.914 cv
177.04 509.466 227.008 527.466 287.56 556.77 cv
288.424 554.898 li
f
234.136 532.794 mo
220.96 529.482 207.28 532.002 196.696 540.642 cv
186.76 548.994 180.856 562.962 184.024 575.922 cv
184.096 576.21 184.096 576.282 184.24 576.498 cv
188.92 586.938 201.376 594.858 212.608 589.89 cv
217.504 587.658 222.04 581.826 218.944 576.426 cv
218.008 574.842 216.712 574.194 214.984 573.834 cv
214.048 573.618 215.272 573.906 215.56 573.978 cv
219.448 574.914 219.88 579.81 218.08 582.834 cv
214.12 589.17 205.192 588.594 199.648 584.85 cv
196.12 582.402 193.6 578.73 192.448 574.626 cv
192.016 573.33 190.504 564.762 194.176 566.202 cv
192.448 565.554 192.16 561.09 192.16 559.722 cv
192.592 548.49 200.584 538.986 210.448 534.378 cv
217.792 530.994 226.36 530.778 234.136 532.794 cv
ef
286.984 553.53 mo
286.984 553.53 287.488 551.73 287.632 548.778 cv
289.144 524.082 266.752 499.746 242.848 496.722 cv
232.336 495.354 227.656 495.786 227.656 495.786 cv
227.656 495.786 230.752 494.274 234.856 493.122 cv
239.032 492.042 240.256 492.186 240.256 492.186 cv
240.256 492.186 229.24 485.85 215.2 490.458 cv
201.232 495.066 199.072 496.578 199.072 496.578 cv
220.24 481.098 246.16 479.442 267.184 497.01 cv
280.144 507.882 280.144 507.882 280.144 507.882 cv
280.144 507.882 274.744 499.314 270.28 495.498 cv
265.888 491.754 265.888 491.754 265.888 491.754 cv
265.888 491.754 269.632 493.266 274.024 496.794 cv
287.776 507.738 290.656 526.602 289.792 543.45 cv
289.576 548.058 288.712 551.802 286.984 553.53 cv
ef
250.264 539.562 mo
218.44 549.426 186.184 572.682 158.968 555.546 cv
86.3923 509.826 73.9363 542.658 34.2642 554.466 cv
34.1921 554.538 li
73.9363 542.658 86.3201 509.538 158.968 555.546 cv
186.112 572.754 218.44 549.426 250.336 539.562 cv
250.264 539.562 li
cp
286.624 537.186 mo
275.824 534.162 264.592 535.458 253.288 538.626 cv
253.36 538.698 li
264.664 535.53 275.824 534.234 286.624 537.186 cv
ef
248.176 538.626 mo
217.792 547.986 187.336 569.226 158.968 554.106 cv
88.7683 516.738 74.2961 543.306 35.2002 553.026 cv
35.1282 553.098 li
74.2244 543.306 88.6243 516.378 158.968 554.178 cv
187.264 569.37 217.864 548.058 248.248 538.698 cv
248.176 538.626 li
cp
286.552 536.754 mo
274.96 533.082 263.08 534.378 251.2 537.69 cv
251.344 537.762 li
263.152 534.45 274.96 533.154 286.552 536.754 cv
ef
245.8 537.618 mo
217 546.402 188.272 565.41 158.968 552.666 cv
91.5042 523.362 74.656 544.17 35.9922 551.73 cv
35.9202 551.802 li
74.656 544.098 91.3601 522.93 158.968 552.81 cv
188.2 565.698 217.072 546.546 245.944 537.69 cv
245.8 537.618 li
cp
286.408 536.322 mo
273.952 531.93 261.352 533.226 248.824 536.682 cv
249.04 536.754 li
261.496 533.298 274.024 532.002 286.48 536.394 cv
286.408 536.322 li
ef
243.136 536.466 mo
216.064 544.602 188.92 561.378 158.968 551.298 cv
94.8162 529.698 75.1604 545.178 36.7122 550.506 cv
36.6401 550.578 li
75.1604 545.106 94.5281 529.194 158.968 551.37 cv
188.848 561.666 216.136 544.818 243.352 536.538 cv
243.136 536.466 li
cp
286.336 535.89 mo
272.8 530.562 259.48 531.858 246.232 535.53 cv
246.448 535.674 li
259.624 532.002 272.872 530.706 286.336 535.89 cv
ef
240.04 535.17 mo
214.696 542.586 189.064 557.058 158.968 549.858 cv
98.5603 535.458 75.8083 546.33 37.3604 549.426 cv
37.2883 549.498 li
75.7361 546.186 98.2004 534.882 158.968 550.002 cv
189.064 557.49 214.84 542.802 240.328 535.242 cv
240.04 535.17 li
cp
286.192 535.386 mo
271.432 529.122 257.32 530.418 243.136 534.234 cv
243.496 534.378 li
257.536 530.562 271.576 529.266 286.192 535.458 cv
286.192 535.386 li
ef
236.44 533.658 mo
212.896 540.354 188.632 552.594 158.968 548.418 cv
102.88 540.498 76.4563 547.41 37.9363 548.346 cv
37.8643 548.49 li
76.384 547.266 102.304 539.994 158.968 548.634 cv
188.776 553.17 213.112 540.642 236.872 533.802 cv
236.44 533.658 li
cp
286.048 534.954 mo
269.92 527.394 254.872 528.69 239.608 532.722 cv
240.04 532.938 li
255.16 528.906 270.136 527.61 286.048 534.954 cv
ef
232.192 531.858 mo
210.376 537.906 187.552 548.274 158.968 547.05 cv
107.344 544.818 77.2483 548.49 38.5122 547.338 cv
38.4402 547.482 li
77.176 548.346 106.768 544.314 158.968 547.194 cv
187.768 548.85 210.736 538.266 232.768 532.146 cv
232.192 531.858 li
cp
285.904 534.45 mo
268.192 525.522 252.064 526.746 235.432 530.994 cv
236.008 531.282 li
252.424 527.034 268.48 525.738 285.976 534.522 cv
285.904 534.45 li
ef
227.368 529.914 mo
207.208 535.314 185.824 544.17 158.968 545.61 cv
111.952 548.202 78.1121 549.57 39.0881 546.402 cv
38.9443 546.546 li
77.968 549.426 111.304 547.77 158.968 545.826 cv
186.112 544.746 207.784 535.674 228.088 530.202 cv
227.872 530.13 227.584 530.058 227.368 529.914 cv
cp
285.76 533.946 mo
266.32 523.362 248.968 524.514 230.68 529.05 cv
231.4 529.41 li
249.472 524.874 266.608 523.722 285.76 534.018 cv
285.76 533.946 li
ef
221.968 527.754 mo
203.464 532.65 183.52 540.426 158.968 544.17 cv
116.2 550.722 78.9763 550.506 39.5923 545.466 cv
39.5203 545.61 li
78.8323 550.362 115.48 550.362 158.968 544.458 cv
183.952 541.002 204.112 533.082 222.832 528.186 cv
222.544 528.042 222.256 527.898 221.968 527.754 cv
cp
285.616 533.37 mo
264.304 520.986 245.584 521.922 225.28 526.962 cv
225.64 527.034 225.928 527.178 226.216 527.322 cv
246.16 522.354 264.592 521.346 285.616 533.514 cv
285.616 533.37 li
ef
216.208 525.594 mo
199.288 530.13 180.928 537.258 158.968 542.802 cv
119.728 552.594 79.7683 551.442 40.0962 544.602 cv
40.0242 544.746 li
79.6243 551.226 119.152 552.306 158.968 543.018 cv
181.432 537.834 200.08 530.634 217.288 525.954 cv
216.928 525.81 216.568 525.738 216.208 525.594 cv
cp
285.4 532.866 mo
262.216 518.394 242.056 519.042 219.592 524.658 cv
219.952 524.802 220.312 524.946 220.672 525.09 cv
242.704 519.618 262.576 518.898 285.472 532.938 cv
285.4 532.866 li
ef
210.376 523.362 mo
194.968 527.826 178.336 534.594 158.968 541.362 cv
122.32 554.106 80.488 552.234 40.6003 543.738 cv
40.5283 543.882 li
80.3445 552.09 121.888 553.89 158.968 541.65 cv
178.84 535.098 195.832 528.258 211.528 523.794 cv
211.168 523.65 210.808 523.506 210.376 523.362 cv
cp
285.184 532.29 mo
260.2 515.73 238.384 515.802 213.76 522.426 cv
214.12 522.642 214.48 522.786 214.912 522.93 cv
239.176 516.45 260.56 516.306 285.256 532.362 cv
285.184 532.29 li
ef
204.76 521.346 mo
190.792 525.81 175.816 532.434 158.968 539.922 cv
123.904 555.618 81.0642 553.098 41.1042 542.874 cv
40.9602 543.09 li
80.9202 552.954 123.616 555.258 158.968 540.282 cv
176.392 532.866 191.656 526.242 205.984 521.778 cv
205.552 521.634 205.192 521.49 204.76 521.346 cv
cp
284.968 531.642 mo
258.256 512.994 234.856 512.418 208 520.338 cv
208.432 520.482 208.864 520.626 209.224 520.77 cv
235.648 513.138 258.688 513.57 285.04 531.786 cv
284.968 531.642 li
ef
199.576 519.474 mo
186.976 524.01 173.584 530.562 158.968 538.554 cv
124.48 557.346 81.4241 554.034 41.5361 542.154 cv
41.4644 542.298 li
81.3523 553.818 124.408 556.914 158.968 538.842 cv
174.088 530.994 187.768 524.37 200.728 519.906 cv
200.368 519.762 199.936 519.618 199.576 519.474 cv
cp
284.752 531.066 mo
256.528 510.258 231.328 508.818 202.672 518.394 cv
203.032 518.538 203.464 518.682 203.824 518.826 cv
232.192 509.61 256.888 510.906 284.824 531.21 cv
284.752 531.066 li
ef
194.824 517.818 mo
183.448 522.498 171.64 528.978 158.968 537.114 cv
124.264 559.362 81.7122 555.042 41.9683 541.434 cv
41.9683 541.434 41.8962 541.506 41.8962 541.578 cv
81.6404 554.754 124.408 558.858 158.968 537.474 cv
172.072 529.41 184.24 522.858 195.904 518.25 cv
195.544 518.106 195.184 517.962 194.824 517.818 cv
cp
284.536 530.346 mo
254.944 507.522 228.016 505.146 197.704 516.666 cv
198.064 516.81 198.496 516.954 198.856 517.098 cv
228.808 506.01 255.304 508.242 284.608 530.49 cv
284.608 530.418 284.608 530.418 284.536 530.346 cv
ef
190.504 516.45 mo
180.352 521.13 169.912 527.61 158.968 535.674 cv
123.616 561.882 81.8562 556.122 42.4001 540.714 cv
42.3284 540.858 li
81.8562 555.834 123.832 561.162 158.968 536.034 cv
170.344 527.97 181.144 521.49 191.584 516.81 cv
191.224 516.666 190.864 516.522 190.504 516.45 cv
cp
284.248 529.626 mo
253.504 504.858 224.776 501.402 193.24 515.154 cv
193.672 515.298 194.032 515.442 194.392 515.586 cv
225.64 502.41 253.864 505.506 284.32 529.842 cv
284.32 529.77 284.32 529.698 284.248 529.626 cv
ef
186.76 515.226 mo
177.688 519.978 168.472 526.386 158.968 534.306 cv
122.536 564.762 81.9285 557.346 42.7603 540.066 cv
42.6882 540.282 li
81.9285 556.986 122.896 563.97 158.968 534.666 cv
168.832 526.674 178.408 520.266 187.768 515.514 cv
187.408 515.442 187.048 515.298 186.76 515.226 cv
cp
283.96 528.834 mo
252.136 502.122 221.68 497.802 189.28 513.858 cv
189.64 514.002 190 514.146 190.36 514.218 cv
222.544 498.81 252.496 502.914 284.032 529.05 cv
284.032 528.978 283.96 528.906 283.96 528.834 cv
ef
183.376 514.146 mo
175.312 518.97 167.176 525.162 158.968 532.866 cv
121.384 568.074 81.9285 558.642 43.1921 539.49 cv
43.0483 539.706 li
81.9285 558.21 121.744 567.066 158.968 533.298 cv
167.536 525.522 175.96 519.258 184.312 514.434 cv
184.024 514.362 183.736 514.218 183.376 514.146 cv
cp
283.6 528.042 mo
250.912 499.458 218.8 494.202 185.752 512.778 cv
186.112 512.85 186.472 512.994 186.76 513.066 cv
219.664 495.21 251.272 500.25 283.672 528.258 cv
283.672 528.186 283.6 528.114 283.6 528.042 cv
ef
180.424 513.21 mo
173.296 518.034 166.096 524.082 158.968 531.426 cv
120.16 571.602 81.9285 560.01 43.4802 538.986 cv
43.4802 538.986 43.4082 539.058 43.4082 539.13 cv
81.9285 559.578 120.52 570.45 158.968 531.858 cv
166.456 524.442 173.872 518.322 181.288 513.498 cv
181 513.426 180.712 513.282 180.424 513.21 cv
cp
283.096 527.106 mo
249.688 496.794 215.992 490.674 182.656 511.77 cv
182.944 511.842 183.304 511.986 183.592 512.058 cv
216.856 491.754 250.048 497.658 283.312 527.394 cv
283.24 527.322 283.168 527.178 283.096 527.106 cv
ef
83.7283 524.37 mo
85.1682 521.49 89.2722 519.906 92.2244 519.618 cv
100.648 518.97 107.416 525.882 108.352 534.09 cv
109.288 545.322 100.288 554.25 89.3445 554.898 cv
76.6003 555.402 66.5203 545.25 65.5842 532.794 cv
64.9363 521.778 71.7043 510.906 82.1443 507.162 cv
82.2161 507.09 83.8723 506.586 83.1521 507.018 cv
81.7122 507.738 80.2722 508.458 78.9041 509.322 cv
66.6643 517.386 62.5603 534.45 72.7844 545.97 cv
80.3445 554.178 93.2322 555.546 101.44 547.41 cv
107.632 540.858 108.136 530.274 100.864 524.226 cv
94.8884 519.402 84.3762 520.338 82.2161 528.834 cv
81.28 533.01 83.656 538.338 88.4802 538.194 cv
89.7043 538.122 90.7844 537.69 91.5042 536.682 cv
92.0803 535.818 92.2961 534.162 90.9285 533.946 cv
92.656 533.586 92.7283 535.674 92.2244 536.754 cv
90.5681 539.634 86.7522 539.274 84.448 537.546 cv
80.2004 534.306 80.6321 528.186 83.7283 524.37 cv
ef
55.7922 542.658 mo
55.7922 542.946 55.2163 543.09 55.0002 543.162 cv
51.4001 544.53 51.0403 548.562 52.9124 551.514 cv
54.8562 554.466 58.3123 555.258 61.5525 554.178 cv
63.28 553.602 64.7205 552.594 65.9441 551.226 cv
68.3201 548.346 69.0403 544.674 68.2483 541.002 cv
69.0403 544.458 68.6082 547.77 66.7361 550.794 cv
64.3601 554.106 60.76 555.978 56.7283 555.546 cv
53.0562 554.97 50.0322 552.594 49.1682 548.994 cv
48.5203 545.682 49.9602 542.226 53.2722 541.002 cv
55.7202 540.282 58.6003 541.218 59.2483 543.882 cv
59.5361 545.106 59.0322 546.762 57.5923 547.05 cv
56.7283 547.194 55.7202 546.546 56.3682 545.682 cv
57.0881 544.602 57.0164 543.306 55.7922 542.658 cv
ef
203.032 562.818 mo
200.368 559.29 201.16 555.978 205.048 553.026 cv
214.48 546.114 226.576 553.17 230.896 561.738 cv
238.672 577.794 227.008 594.858 210.88 601.698 cv
183.16 612.642 153.928 596.442 144.424 571.746 cv
133.264 540.21 153.784 508.602 186.688 497.73 cv
230.752 483.978 276.832 510.186 286.48 550.506 cv
286.552 551.01 287.056 553.314 287.056 553.314 cv
279.712 518.754 246.448 492.546 206.632 494.274 cv
170.272 496.506 139.816 523.218 141.688 557.634 cv
143.776 584.058 167.104 607.098 197.272 604.578 cv
216.568 602.562 235.216 587.874 231.976 568.794 cv
230.392 560.514 222.184 550.578 211.744 553.602 cv
205.768 555.546 207.424 558.57 208.576 562.458 cv
209.008 566.418 204.544 564.69 203.032 562.818 cv
ef
203.032 562.818 mo
200.368 559.29 201.16 555.978 205.048 553.026 cv
214.48 546.114 226.576 553.17 230.896 561.738 cv
238.672 577.794 227.008 594.858 210.88 601.698 cv
183.16 612.642 153.928 596.442 144.424 571.746 cv
133.264 540.21 153.784 508.602 186.688 497.73 cv
230.752 483.978 276.832 510.186 286.48 550.506 cv
286.552 551.01 287.056 553.314 287.056 553.314 cv
279.712 518.754 246.448 492.546 206.632 494.274 cv
170.272 496.506 139.816 523.218 141.688 557.634 cv
143.776 584.058 167.104 607.098 197.272 604.578 cv
216.568 602.562 235.216 587.874 231.976 568.794 cv
230.392 560.514 222.184 550.578 211.744 553.602 cv
205.768 555.546 207.424 558.57 208.576 562.458 cv
209.008 566.418 204.544 564.69 203.032 562.818 cv
cp
@
140.104 496.074 mo
140.176 499.458 142.264 501.186 145.936 501.402 cv
154.792 501.762 158.608 492.258 157.096 485.058 cv
154.072 471.666 139.096 465.834 126.28 468.354 cv
104.68 473.106 95.1042 495.714 101.152 515.226 cv
107.344 533.37 123.904 544.242 142.048 545.826 cv
142.192 545.61 li
128.08 544.53 114.76 537.762 106.264 525.234 cv
94.9602 507.738 97.8401 483.402 116.92 472.314 cv
129.232 465.402 147.304 466.77 154.432 480.162 cv
157.384 485.994 157.24 495.714 149.68 498.234 cv
145.144 499.53 144.712 496.938 143.56 493.986 cv
141.976 491.322 140.104 494.274 140.104 496.074 cv
ef
140.104 496.074 mo
140.176 499.458 142.264 501.186 145.936 501.402 cv
154.792 501.762 158.608 492.258 157.096 485.058 cv
154.072 471.666 139.096 465.834 126.28 468.354 cv
104.68 473.106 95.1042 495.714 101.152 515.226 cv
107.344 533.37 123.904 544.242 142.048 545.826 cv
142.192 545.61 li
128.08 544.53 114.76 537.762 106.264 525.234 cv
94.9602 507.738 97.8401 483.402 116.92 472.314 cv
129.232 465.402 147.304 466.77 154.432 480.162 cv
157.384 485.994 157.24 495.714 149.68 498.234 cv
145.144 499.53 144.712 496.938 143.56 493.986 cv
141.976 491.322 140.104 494.274 140.104 496.074 cv
cp
@
108.208 478.866 mo
110.728 471.81 110.008 464.178 105.688 457.914 cv
101.44 452.082 93.8801 448.194 86.4641 449.274 cv
86.3201 449.346 86.2483 449.346 86.1042 449.418 cv
79.9841 451.434 74.9441 457.914 77.176 464.25 cv
78.1843 467.058 81.2083 469.866 84.448 468.354 cv
85.384 467.922 85.8162 467.274 86.1042 466.338 cv
86.2483 465.834 86.0325 466.482 85.9602 466.626 cv
85.2405 468.786 82.5042 468.714 80.8484 467.634 cv
77.4641 465.186 78.2561 460.29 80.6321 457.41 cv
82.2161 455.61 84.3762 454.386 86.7522 453.954 cv
87.5442 453.81 92.4402 453.378 91.4324 455.322 cv
91.864 454.386 94.384 454.458 95.176 454.53 cv
101.44 455.322 106.408 460.146 108.496 465.762 cv
110.08 470.01 109.72 474.69 108.208 478.866 cv
ef
111.304 472.386 mo
111.592 471.018 111.952 469.722 112.384 468.57 cv
112.888 467.49 113.464 466.554 114.04 465.69 cv
114.688 464.97 115.264 464.322 115.912 463.746 cv
118.504 461.73 121.24 460.938 124.48 461.586 cv
126.928 462.306 129.088 463.674 131.68 464.178 cv
133.696 464.538 136.072 464.466 137.872 463.314 cv
138.448 462.954 139.096 462.234 138.088 462.09 cv
137.512 462.018 136.936 462.018 136.432 462.018 cv
134.128 461.874 132.112 461.442 130.096 460.29 cv
129.664 460.002 129.232 459.714 128.728 459.498 cv
125.848 457.986 122.824 458.346 119.872 459.57 cv
118.288 460.362 116.992 461.37 115.768 462.594 cv
115.12 463.314 114.472 464.106 113.824 465.042 cv
113.248 465.978 112.744 467.058 112.24 468.282 cv
111.88 469.506 111.52 470.874 111.304 472.386 cv
ef
67.6721 549.138 mo
67.7444 550.218 67.8162 551.082 67.9602 551.946 cv
68.176 552.738 68.4641 553.53 68.7522 554.178 cv
69.1121 554.754 69.4001 555.258 69.76 555.762 cv
71.2722 557.49 73.072 558.354 75.3044 558.282 cv
77.1042 558.066 78.6882 557.346 80.488 557.274 cv
81.9285 557.346 83.5125 557.634 84.592 558.642 cv
84.9524 558.93 85.3123 559.506 84.592 559.506 cv
84.2322 559.506 83.8 559.434 83.4402 559.362 cv
81.8562 559.218 80.488 559.29 78.9763 559.866 cv
78.6165 560.01 78.2561 560.154 77.968 560.226 cv
75.8083 560.946 73.7922 560.37 71.9924 559.146 cv
70.9841 558.354 70.2644 557.562 69.5442 556.554 cv
69.1843 555.978 68.8245 555.33 68.5364 554.61 cv
68.2483 553.89 68.0325 553.026 67.8884 552.162 cv
67.7444 551.226 67.6721 550.218 67.6721 549.138 cv
ef
254.296 121.89 mo
253.72 93.2341 203.824 90.354 206.416 89.8501 cv
208.144 89.562 209.8 89.418 211.456 89.3462 cv
232.048 88.77 263.368 99.8582 263.008 124.698 cv
262.864 131.898 258.904 138.81 249.472 143.346 cv
242.344 146.802 227.368 144.426 233.992 159.762 cv
228.664 157.89 227.152 151.698 228.592 146.514 cv
233.416 131.682 253.144 141.402 254.296 121.89 cv
ef
254.296 121.89 mo
253.72 93.2341 203.824 90.354 206.416 89.8501 cv
208.144 89.562 209.8 89.418 211.456 89.3462 cv
232.048 88.77 263.368 99.8582 263.008 124.698 cv
262.864 131.898 258.904 138.81 249.472 143.346 cv
242.344 146.802 227.368 144.426 233.992 159.762 cv
228.664 157.89 227.152 151.698 228.592 146.514 cv
233.416 131.682 253.144 141.402 254.296 121.89 cv
cp
@
189.928 124.194 mo
187.624 126.498 185.536 129.09 183.88 131.97 cv
171.568 153.066 180.136 179.49 200.584 191.946 cv
227.224 207.498 260.272 194.826 272.512 167.25 cv
285.4 136.722 268.84 102.81 238.456 91.6501 cv
236.944 91.0742 235.36 90.5701 233.848 90.1382 cv
233.056 89.8501 234.424 90.21 234.568 90.21 cv
263.368 97.4102 282.016 126.498 277.192 155.73 cv
271.72 184.962 244.72 204.906 215.056 199.506 cv
187.336 193.53 169.48 166.53 177.688 138.81 cv
179.848 132.186 183.376 126.426 187.84 121.746 cv
190.576 118.866 193.456 120.738 189.928 124.194 cv
ef
189.928 124.194 mo
187.624 126.498 185.536 129.09 183.88 131.97 cv
171.568 153.066 180.136 179.49 200.584 191.946 cv
227.224 207.498 260.272 194.826 272.512 167.25 cv
285.4 136.722 268.84 102.81 238.456 91.6501 cv
236.944 91.0742 235.36 90.5701 233.848 90.1382 cv
233.056 89.8501 234.424 90.21 234.568 90.21 cv
263.368 97.4102 282.016 126.498 277.192 155.73 cv
271.72 184.962 244.72 204.906 215.056 199.506 cv
187.336 193.53 169.48 166.53 177.688 138.81 cv
179.848 132.186 183.376 126.426 187.84 121.746 cv
190.576 118.866 193.456 120.738 189.928 124.194 cv
cp
@
282.376 168.042 mo
293.608 152.202 292.456 132.906 282.592 116.706 cv
268.264 95.25 242.92 85.8901 217.864 89.0581 cv
217.72 89.0581 215.056 89.49 216.496 89.1301 cv
252.424 80.49 294.184 105.906 293.896 145.074 cv
293.104 162.21 283.384 179.49 266.032 183.882 cv
258.832 185.538 250.624 184.674 245.152 179.274 cv
242.128 176.034 242.56 172.65 243.424 168.762 cv
244.648 164.226 242.56 161.058 240.544 157.098 cv
240.256 156.522 239.896 155.874 239.392 155.298 cv
241.624 155.442 243.496 156.954 245.08 158.466 cv
249.256 162.354 253.576 166.89 254.8 172.65 cv
255.664 175.962 257.032 178.05 260.632 178.842 cv
269.056 180.498 277.336 174.018 282.376 168.042 cv
ef
282.376 168.042 mo
293.608 152.202 292.456 132.906 282.592 116.706 cv
268.264 95.25 242.92 85.8901 217.864 89.0581 cv
217.72 89.0581 215.056 89.49 216.496 89.1301 cv
252.424 80.49 294.184 105.906 293.896 145.074 cv
293.104 162.21 283.384 179.49 266.032 183.882 cv
258.832 185.538 250.624 184.674 245.152 179.274 cv
242.128 176.034 242.56 172.65 243.424 168.762 cv
244.648 164.226 242.56 161.058 240.544 157.098 cv
240.256 156.522 239.896 155.874 239.392 155.298 cv
241.624 155.442 243.496 156.954 245.08 158.466 cv
249.256 162.354 253.576 166.89 254.8 172.65 cv
255.664 175.962 257.032 178.05 260.632 178.842 cv
269.056 180.498 277.336 174.018 282.376 168.042 cv
cp
@
43.4802 52.1221 mo
44.8481 51.5461 45.9282 50.0342 45.4963 47.946 cv
44.3442 42.7622 37.2163 44.634 36.2083 48.9541 cv
34.0483 58.6021 48.7363 62.1301 52.4802 52.05 cv
58.0242 37.3621 39.3762 28.6501 28.0723 36.1382 cv
14.6082 45.1382 15.4722 65.2981 25.9841 76.6021 cv
29.0803 79.9861 31.3123 81.8582 30.6643 85.0981 cv
29.8003 89.3462 26.8481 96.4021 22.0962 97.77 cv
19.8643 98.49 18.0642 97.9861 16.4082 100.794 cv
14.7522 103.602 14.3923 104.682 14.3923 104.682 cv
18.4963 97.9141 22.4563 103.314 26.7764 99.21 cv
29.0803 96.978 29.8723 94.53 29.8723 94.53 cv
29.8723 94.53 29.6563 95.322 30.0881 96.3301 cv
30.5203 97.3381 31.3123 97.698 32.0322 96.4741 cv
32.6802 95.25 33.5442 93.2341 33.1123 91.6501 cv
32.6802 90.0662 33.0403 87.5461 33.0403 87.5461 cv
33.0403 87.5461 33.6882 91.0742 34.6963 91.7939 cv
35.7043 92.4421 37.0002 93.3062 37.0002 93.3062 cv
37.0002 93.3062 35.7761 92.01 35.9922 90.7861 cv
36.5684 87.6182 38.5122 84.666 36.1362 81.498 cv
34.4802 79.2661 34.4802 79.2661 34.4802 79.2661 cv
41.1763 85.0261 41.8242 81.498 48.8083 83.1541 cv
52.6243 84.0901 57.2322 84.9541 58.5283 88.9861 cv
59.8962 93.0181 59.7522 93.666 59.7522 93.666 cv
59.7522 93.666 61.6243 91.7939 61.3362 89.634 cv
60.9763 87.5461 60.1843 85.8901 60.1843 85.8901 cv
60.1843 85.8901 63.5681 86.5381 65.656 89.2021 cv
67.8162 91.8662 69.3284 94.53 69.3284 95.8979 cv
69.3284 97.2661 69.3284 97.2661 69.3284 97.2661 cv
69.3284 97.2661 71.0564 95.6821 71.1282 94.0261 cv
71.2722 92.2981 71.3445 92.082 71.3445 92.082 cv
71.3445 92.082 72.9285 94.0981 73.3601 96.2581 cv
73.7922 98.3462 73.7205 99.498 73.9363 98.9221 cv
74.1521 98.3462 74.7283 96.978 74.8 94.6741 cv
74.9441 92.2981 74.5842 91.5781 73.7922 90.8582 cv
73.0002 90.21 75.0164 89.9941 76.2405 89.562 cv
77.4641 89.0581 78.4724 88.1941 76.1682 87.978 cv
73.7922 87.7622 66.592 86.6101 65.4402 85.8901 cv
64.3601 85.0981 65.3684 83.4421 67.3123 83.082 cv
68.1042 82.938 70.3362 82.8662 72.9285 82.8662 cv
80.8484 82.6501 127.576 67.458 131.104 80.8501 cv
131.68 82.938 131.032 83.802 131.032 83.802 cv
129.808 81.354 125.56 84.522 127 86.7542 cv
131.608 93.8101 149.104 78.4741 122.752 72.9302 cv
122.752 72.9302 124.408 72.5701 124.912 71.2739 cv
125.344 69.906 125.56 68.25 125.56 68.25 cv
125.56 68.25 124.768 69.5461 122.68 70.3381 cv
121.384 70.842 110.224 73.4341 110.296 73.3621 cv
110.944 72.7141 113.392 71.2739 112.6 69.042 cv
111.808 66.8101 110.8 65.6582 110.8 65.6582 cv
110.8 65.6582 111.304 67.458 109.504 69.4741 cv
105.112 74.3701 93.8801 77.0342 87.6882 78.6899 cv
84.8083 79.4819 78.0403 80.634 75.5203 80.634 cv
72.9285 80.634 71.488 80.418 71.488 80.418 cv
71.488 80.418 80.6321 76.8181 84.7361 75.2341 cv
101.872 68.7542 133.264 43.05 151.984 61.77 cv
156.016 65.802 158.824 69.5461 159.904 72.9302 cv
164.8 88.5542 147.448 93.666 144.136 83.082 cv
143.416 80.562 143.056 77.9702 146.296 77.1782 cv
145.864 77.8262 145.648 78.6182 145.648 79.4819 cv
145.648 81.8582 147.592 83.802 149.968 83.802 cv
153.424 83.802 155.296 80.2739 154.072 77.0342 cv
151.552 70.3381 142.336 72.1382 141.256 78.4741 cv
137.512 101.37 177.976 94.0981 162.136 68.6821 cv
159.904 65.1541 159.112 64.002 158.104 62.9221 cv
157.096 61.77 155.296 59.5381 155.296 59.5381 cv
155.296 59.5381 158.896 60.186 161.776 62.418 cv
164.656 64.6501 172.072 69.906 175.024 73.146 cv
178.048 76.386 190.36 85.314 194.752 86.9702 cv
242.128 104.826 240.76 56.874 224.2 63.354 cv
221.608 64.3621 220.168 67.53 220.312 70.2661 cv
220.456 75.594 228.88 77.25 228.88 71.7781 cv
228.88 69.834 227.368 68.322 225.568 68.322 cv
224.416 68.322 223.408 68.8979 222.832 69.7622 cv
221.824 65.5142 229.456 63.7141 230.896 68.6101 cv
233.56 77.1782 227.728 86.106 218.296 87.186 cv
211.096 88.05 205.264 86.7542 198.352 85.6021 cv
202.096 85.8181 212.896 82.5061 209.944 77.8262 cv
209.44 77.0342 208.648 76.6741 207.856 76.6021 cv
208.504 75.8821 209.296 74.874 209.584 73.7222 cv
210.592 70.05 209.44 68.6821 208.072 65.4421 cv
208.072 65.4421 209.512 69.3301 207.928 70.842 cv
206.416 72.282 203.248 71.49 201.808 74.3701 cv
200.368 77.25 200.152 79.698 196.912 79.9861 cv
193.672 80.2021 188.128 78.978 183.16 75.8101 cv
174.736 70.4102 165.952 59.8262 156.52 56.6582 cv
127.144 46.6501 109.504 60.7622 85.0964 72.0662 cv
83.656 72.7141 82.5042 72.7141 83.1521 70.5542 cv
83.8723 68.4661 85.5281 63.9302 87.8323 61.1221 cv
91.4324 56.874 91.3601 55.938 96.2561 53.49 cv
96.2561 53.49 93.7361 52.05 91.864 52.626 cv
89.9924 53.2021 88.7683 53.9941 88.7683 53.9941 cv
88.7683 53.9941 91.5764 50.0342 91.2883 47.946 cv
91.072 45.8582 91.5764 44.2739 90.4241 44.1301 cv
89.3445 44.0581 88.6243 43.842 88.1204 45.1382 cv
87.5442 46.5061 87.1843 47.1541 87.1843 47.1541 cv
87.1843 47.1541 87.1843 43.698 86.176 41.8262 cv
82.5042 34.842 71.7043 38.5859 74.0081 44.9221 cv
74.8723 47.1541 76.6721 48.522 79.0481 48.1621 cv
79.0481 48.1621 76.9602 47.2981 76.384 46.146 cv
75.8083 45.0662 75.1604 43.626 76.1682 42.4741 cv
77.176 41.394 78.0403 41.0342 78.0403 41.0342 cv
75.2322 42.6899 78.9041 44.2739 80.8484 43.698 cv
82.4324 43.2661 84.3044 44.418 84.7361 46.3621 cv
85.1682 48.3779 85.8884 51.6182 85.6003 54.6421 cv
85.384 57.666 83.8723 63.426 83.8723 63.426 cv
83.8723 63.426 84.1604 59.5381 82.4324 57.4502 cv
80.2722 54.9302 75.3762 54.498 74.3684 51.4021 cv
74.1521 50.7542 74.8 54.2822 76.6003 56.4421 cv
78.4001 58.53 79.6243 57.8821 80.2004 62.3462 cv
81.28 70.9861 73.864 80.418 64.4324 79.842 cv
58.8882 79.4819 54.0642 80.0581 52.4082 79.842 cv
50.7522 79.626 57.6643 76.8181 60.4001 75.9541 cv
65.7283 74.2261 66.9524 68.1782 63.1365 69.2581 cv
61.8401 69.6182 60.4001 70.2661 60.4001 70.2661 cv
60.4001 70.2661 62.3445 66.8821 61.7683 65.01 cv
61.1921 63.1382 61.1204 62.9221 59.1763 61.4102 cv
57.3042 59.9702 56.5122 58.53 56.5122 57.4502 cv
56.5122 56.2981 56.0803 57.738 56.7283 61.9861 cv
57.4482 66.2341 59.6802 68.8262 56.8723 71.562 cv
54.0642 74.3701 50.6082 76.2422 50.6082 76.2422 cv
52.8403 74.2981 53.7761 70.1941 51.4001 68.0342 cv
50.1763 66.8821 52.1921 67.8901 50.5361 71.0581 cv
48.8083 74.1541 45.9282 79.626 40.8882 78.2581 cv
29.0803 75.0901 17.4883 59.0342 21.0164 47.874 cv
24.6162 36.426 40.3843 35.2739 47.2961 40.8901 cv
50.2483 43.2661 52.3362 46.7939 50.5361 51.3301 cv
48.7363 55.7222 44.1282 56.3701 41.4644 54.7861 cv
38.5122 52.9861 36.9282 48.594 39.4482 46.5061 cv
41.2483 44.9941 44.1282 45.5701 44.1282 48.522 cv
44.0562 48.666 li
43.9124 47.4421 42.9043 46.5061 41.6802 46.5061 cv
40.3843 46.5061 39.3042 47.5859 39.3042 48.9541 cv
39.3042 50.8262 41.5361 52.77 43.4802 52.1221 cv
ef
186.904 157.242 mo
185.824 148.242 195.04 140.25 203.68 144.426 cv
207.424 146.226 210.16 150.546 209.152 154.794 cv
209.152 154.866 208.936 155.73 208.936 155.37 cv
209.296 152.49 209.008 149.97 207.136 147.594 cv
206.056 146.298 204.688 145.218 203.104 144.714 cv
202.024 144.354 203.608 145.146 203.752 145.218 cv
208.288 148.098 210.376 154.794 205.84 158.754 cv
204.4 160.05 202.456 160.626 200.584 160.194 cv
196.624 159.258 195.256 153.93 199.504 152.562 cv
200.656 152.202 199.432 151.626 198.856 151.554 cv
195.472 151.194 194.032 155.298 194.824 157.962 cv
196.408 162.786 202.168 163.938 206.2 161.49 cv
212.464 157.458 211.6 148.746 206.056 144.57 cv
199.504 139.89 190.864 142.698 187.192 149.538 cv
183.016 157.818 187.336 167.25 195.688 170.562 cv
205.696 174.234 216.064 168.186 218.8 158.106 cv
220.96 149.178 216.64 140.25 208.576 135.93 cv
194.608 128.874 178.192 139.026 177.472 154.146 cv
177.472 154.29 177.544 157.17 177.688 155.802 cv
177.76 155.226 177.832 154.722 177.904 154.146 cv
178.624 149.466 180.568 145.218 183.808 141.762 cv
179.272 146.586 177.472 152.85 177.904 159.33 cv
177.904 159.33 178.048 161.13 177.832 160.482 cv
177.544 159.762 177.472 158.898 177.328 158.178 cv
175.456 142.77 190.216 129.882 205.264 134.418 cv
216.136 137.874 222.4 149.538 218.224 160.41 cv
214.336 169.914 203.608 174.666 194.176 170.202 cv
186.112 166.026 182.656 156.09 187.696 148.17 cv
192.16 141.474 201.376 139.674 207.424 145.29 cv
212.032 149.898 212.248 157.458 206.92 161.49 cv
202.672 164.514 196.408 163.578 194.32 158.394 cv
193.168 154.794 195.112 150.258 199.36 150.474 cv
200.368 150.546 201.232 150.978 201.952 151.698 cv
203.608 153.714 202.312 156.81 199.648 155.514 cv
198.496 155.01 198.496 156.666 198.784 157.386 cv
200.296 160.41 204.472 159.186 206.128 157.026 cv
209.224 152.778 206.416 147.306 201.952 145.578 cv
196.12 143.49 190.216 147.09 188.344 152.706 cv
186.472 158.466 188.776 163.362 192.736 167.25 cv
193.456 167.97 192.16 167.034 192.016 166.962 cv
188.992 164.73 186.616 160.554 186.76 156.738 cv
186.76 156.09 186.904 157.17 186.904 157.242 cv
ef
186.904 157.242 mo
185.824 148.242 195.04 140.25 203.68 144.426 cv
207.424 146.226 210.16 150.546 209.152 154.794 cv
209.152 154.866 208.936 155.73 208.936 155.37 cv
209.296 152.49 209.008 149.97 207.136 147.594 cv
206.056 146.298 204.688 145.218 203.104 144.714 cv
202.024 144.354 203.608 145.146 203.752 145.218 cv
208.288 148.098 210.376 154.794 205.84 158.754 cv
204.4 160.05 202.456 160.626 200.584 160.194 cv
196.624 159.258 195.256 153.93 199.504 152.562 cv
200.656 152.202 199.432 151.626 198.856 151.554 cv
195.472 151.194 194.032 155.298 194.824 157.962 cv
196.408 162.786 202.168 163.938 206.2 161.49 cv
212.464 157.458 211.6 148.746 206.056 144.57 cv
199.504 139.89 190.864 142.698 187.192 149.538 cv
183.016 157.818 187.336 167.25 195.688 170.562 cv
205.696 174.234 216.064 168.186 218.8 158.106 cv
220.96 149.178 216.64 140.25 208.576 135.93 cv
194.608 128.874 178.192 139.026 177.472 154.146 cv
177.472 154.29 177.544 157.17 177.688 155.802 cv
177.76 155.226 177.832 154.722 177.904 154.146 cv
178.624 149.466 180.568 145.218 183.808 141.762 cv
179.272 146.586 177.472 152.85 177.904 159.33 cv
177.904 159.33 178.048 161.13 177.832 160.482 cv
177.544 159.762 177.472 158.898 177.328 158.178 cv
175.456 142.77 190.216 129.882 205.264 134.418 cv
216.136 137.874 222.4 149.538 218.224 160.41 cv
214.336 169.914 203.608 174.666 194.176 170.202 cv
186.112 166.026 182.656 156.09 187.696 148.17 cv
192.16 141.474 201.376 139.674 207.424 145.29 cv
212.032 149.898 212.248 157.458 206.92 161.49 cv
202.672 164.514 196.408 163.578 194.32 158.394 cv
193.168 154.794 195.112 150.258 199.36 150.474 cv
200.368 150.546 201.232 150.978 201.952 151.698 cv
203.608 153.714 202.312 156.81 199.648 155.514 cv
198.496 155.01 198.496 156.666 198.784 157.386 cv
200.296 160.41 204.472 159.186 206.128 157.026 cv
209.224 152.778 206.416 147.306 201.952 145.578 cv
196.12 143.49 190.216 147.09 188.344 152.706 cv
186.472 158.466 188.776 163.362 192.736 167.25 cv
193.456 167.97 192.16 167.034 192.016 166.962 cv
188.992 164.73 186.616 160.554 186.76 156.738 cv
186.76 156.09 186.904 157.17 186.904 157.242 cv
cp
@
167.464 157.242 mo
168.544 148.242 159.328 140.25 150.688 144.426 cv
146.944 146.226 144.208 150.546 145.144 154.794 cv
145.216 154.866 145.432 155.73 145.432 155.37 cv
145.072 152.49 145.36 149.97 147.232 147.594 cv
148.312 146.298 149.68 145.218 151.264 144.714 cv
152.344 144.354 150.76 145.146 150.616 145.218 cv
146.08 148.098 143.992 154.794 148.528 158.754 cv
149.968 160.05 151.912 160.626 153.784 160.194 cv
157.744 159.258 159.112 153.93 154.792 152.562 cv
153.712 152.202 154.936 151.626 155.512 151.554 cv
158.896 151.194 160.264 155.298 159.544 157.962 cv
157.96 162.786 152.2 163.938 148.168 161.49 cv
141.904 157.458 142.768 148.746 148.312 144.57 cv
154.864 139.89 163.504 142.698 167.176 149.538 cv
171.352 157.818 167.032 167.25 158.68 170.562 cv
148.672 174.234 138.304 168.186 135.568 158.106 cv
133.408 149.178 137.728 140.25 145.792 135.93 cv
159.76 128.874 176.176 139.026 176.896 154.146 cv
176.896 154.29 176.824 157.17 176.68 155.802 cv
176.608 155.226 176.536 154.722 176.464 154.146 cv
175.744 149.466 173.8 145.218 170.56 141.762 cv
175.096 146.586 176.896 152.85 176.464 159.33 cv
176.464 159.33 176.32 161.13 176.536 160.482 cv
176.824 159.762 176.896 158.898 177.04 158.178 cv
178.912 142.77 164.152 129.882 149.104 134.418 cv
138.16 137.874 131.968 149.538 136.144 160.41 cv
140.032 169.914 150.76 174.666 160.192 170.202 cv
168.256 166.026 171.712 156.09 166.672 148.17 cv
162.208 141.474 152.992 139.674 146.872 145.29 cv
142.336 149.898 142.12 157.458 147.448 161.49 cv
151.696 164.514 157.96 163.578 160.048 158.394 cv
161.2 154.794 159.256 150.258 155.008 150.474 cv
154 150.546 153.136 150.978 152.416 151.698 cv
150.76 153.714 152.056 156.81 154.72 155.514 cv
155.872 155.01 155.872 156.666 155.584 157.386 cv
154.072 160.41 149.896 159.186 148.24 157.026 cv
145.144 152.778 147.952 147.306 152.416 145.578 cv
158.248 143.49 164.152 147.09 166.024 152.706 cv
167.896 158.466 165.592 163.362 161.56 167.25 cv
160.912 167.97 162.208 167.034 162.352 166.962 cv
165.376 164.73 167.752 160.554 167.608 156.738 cv
167.608 156.09 167.464 157.17 167.464 157.242 cv
ef
167.464 157.242 mo
168.544 148.242 159.328 140.25 150.688 144.426 cv
146.944 146.226 144.208 150.546 145.144 154.794 cv
145.216 154.866 145.432 155.73 145.432 155.37 cv
145.072 152.49 145.36 149.97 147.232 147.594 cv
148.312 146.298 149.68 145.218 151.264 144.714 cv
152.344 144.354 150.76 145.146 150.616 145.218 cv
146.08 148.098 143.992 154.794 148.528 158.754 cv
149.968 160.05 151.912 160.626 153.784 160.194 cv
157.744 159.258 159.112 153.93 154.792 152.562 cv
153.712 152.202 154.936 151.626 155.512 151.554 cv
158.896 151.194 160.264 155.298 159.544 157.962 cv
157.96 162.786 152.2 163.938 148.168 161.49 cv
141.904 157.458 142.768 148.746 148.312 144.57 cv
154.864 139.89 163.504 142.698 167.176 149.538 cv
171.352 157.818 167.032 167.25 158.68 170.562 cv
148.672 174.234 138.304 168.186 135.568 158.106 cv
133.408 149.178 137.728 140.25 145.792 135.93 cv
159.76 128.874 176.176 139.026 176.896 154.146 cv
176.896 154.29 176.824 157.17 176.68 155.802 cv
176.608 155.226 176.536 154.722 176.464 154.146 cv
175.744 149.466 173.8 145.218 170.56 141.762 cv
175.096 146.586 176.896 152.85 176.464 159.33 cv
176.464 159.33 176.32 161.13 176.536 160.482 cv
176.824 159.762 176.896 158.898 177.04 158.178 cv
178.912 142.77 164.152 129.882 149.104 134.418 cv
138.16 137.874 131.968 149.538 136.144 160.41 cv
140.032 169.914 150.76 174.666 160.192 170.202 cv
168.256 166.026 171.712 156.09 166.672 148.17 cv
162.208 141.474 152.992 139.674 146.872 145.29 cv
142.336 149.898 142.12 157.458 147.448 161.49 cv
151.696 164.514 157.96 163.578 160.048 158.394 cv
161.2 154.794 159.256 150.258 155.008 150.474 cv
154 150.546 153.136 150.978 152.416 151.698 cv
150.76 153.714 152.056 156.81 154.72 155.514 cv
155.872 155.01 155.872 156.666 155.584 157.386 cv
154.072 160.41 149.896 159.186 148.24 157.026 cv
145.144 152.778 147.952 147.306 152.416 145.578 cv
158.248 143.49 164.152 147.09 166.024 152.706 cv
167.896 158.466 165.592 163.362 161.56 167.25 cv
160.912 167.97 162.208 167.034 162.352 166.962 cv
165.376 164.73 167.752 160.554 167.608 156.738 cv
167.608 156.09 167.464 157.17 167.464 157.242 cv
cp
@
229.096 1.146 mo
215.272 -2.09399 199.864 2.15405 193.024 15.2581 cv
187.552 25.77 189.064 46.7939 205.912 46.938 cv
209.944 46.938 214.984 41.6101 210.52 38.01 cv
209.944 37.5061 209.512 36.9302 209.08 36.21 cv
210.088 38.6582 212.392 39.4502 211.096 42.4741 cv
208.936 46.5061 203.608 46.4341 200.008 44.7061 cv
190.72 39.8821 189.784 26.562 195.472 18.6421 cv
207.424 2.58594 230.608 6.33008 242.128 20.802 cv
249.976 30.9541 251.704 43.842 247.96 56.01 cv
252.28 42.4021 249.616 28.29 240.472 17.418 cv
240.112 17.0581 236.44 13.386 236.656 12.9541 cv
236.8 12.594 238.456 13.53 238.6 13.6741 cv
250.48 20.4421 255.16 37.0742 254.008 49.6741 cv
252.136 66.0181 241.984 79.2661 227.512 86.8979 cv
208 96.2581 186.616 93.3062 169.12 80.9221 cv
167.032 79.2661 165.016 77.4661 163.144 75.666 cv
163.144 75.594 li
172.72 84.9541 184.6 90.7861 198.496 92.3701 cv
216.496 93.666 233.272 87.2581 244.72 73.146 cv
260.344 52.626 257.464 24.834 236.656 9.57007 cv
236.296 9.28223 235.864 8.99414 235.432 8.70605 cv
227.656 3.23413 217.936 3.59399 208.936 4.45801 cv
203.824 4.96216 210.952 1.79395 211.96 1.5061 cv
217.576 -.221924 223.408 -.149902 229.096 1.146 cv
ef
229.096 1.146 mo
215.272 -2.09399 199.864 2.15405 193.024 15.2581 cv
187.552 25.77 189.064 46.7939 205.912 46.938 cv
209.944 46.938 214.984 41.6101 210.52 38.01 cv
209.944 37.5061 209.512 36.9302 209.08 36.21 cv
210.088 38.6582 212.392 39.4502 211.096 42.4741 cv
208.936 46.5061 203.608 46.4341 200.008 44.7061 cv
190.72 39.8821 189.784 26.562 195.472 18.6421 cv
207.424 2.58594 230.608 6.33008 242.128 20.802 cv
249.976 30.9541 251.704 43.842 247.96 56.01 cv
252.28 42.4021 249.616 28.29 240.472 17.418 cv
240.112 17.0581 236.44 13.386 236.656 12.9541 cv
236.8 12.594 238.456 13.53 238.6 13.6741 cv
250.48 20.4421 255.16 37.0742 254.008 49.6741 cv
252.136 66.0181 241.984 79.2661 227.512 86.8979 cv
208 96.2581 186.616 93.3062 169.12 80.9221 cv
167.032 79.2661 165.016 77.4661 163.144 75.666 cv
163.144 75.594 li
172.72 84.9541 184.6 90.7861 198.496 92.3701 cv
216.496 93.666 233.272 87.2581 244.72 73.146 cv
260.344 52.626 257.464 24.834 236.656 9.57007 cv
236.296 9.28223 235.864 8.99414 235.432 8.70605 cv
227.656 3.23413 217.936 3.59399 208.936 4.45801 cv
203.824 4.96216 210.952 1.79395 211.96 1.5061 cv
217.576 -.221924 223.408 -.149902 229.096 1.146 cv
cp
@
167.608 98.2021 mo
171.928 113.754 173.44 116.706 176.176 114.402 cv
178.912 119.874 182.8 120.018 197.344 115.338 cv
183.088 121.746 179.56 123.258 177.904 123.618 cv
175.528 128.154 175.096 131.466 175.528 141.834 cv
173.08 131.826 171.496 128.874 166.96 125.634 cv
166.096 125.706 162.208 125.562 145.792 124.698 cv
161.92 123.834 165.448 122.322 165.232 116.346 cv
169.48 117.498 169.912 114.114 167.608 98.2021 cv
ef
280.936 69.834 mo
281.512 71.562 280.576 73.3621 278.848 73.938 cv
277.12 74.5142 275.32 73.5781 274.744 71.8501 cv
274.168 70.1221 275.104 68.322 276.832 67.7461 cv
278.488 67.1699 280.36 68.106 280.936 69.834 cv
ef
279.784 72.8582 mo
279.568 73.002 279.28 73.146 278.992 73.218 cv
277.48 73.7222 275.896 72.9302 275.392 71.418 cv
275.032 70.2661 275.464 69.042 276.328 68.322 cv
276.04 68.8979 275.824 69.7622 276.184 70.1941 cv
276.76 70.9861 277.48 71.2021 277.84 70.9141 cv
278.272 70.626 278.488 71.1301 278.2 71.7061 cv
277.984 72.21 278.704 73.146 279.208 72.5701 cv
279.496 72.21 279.712 72.426 279.784 72.8582 cv
0 0 0 0 cmyk
ef
281.152 68.8979 mo
282.088 66.8821 285.832 68.0342 286.912 68.0342 cv
287.56 68.106 287.128 69.4021 286.192 69.6182 cv
285.256 69.834 286.84 69.4021 287.704 69.7622 cv
288.64 70.1941 289.216 70.9141 289.216 70.9141 cv
289.216 70.9141 288.496 71.9221 287.344 71.9941 cv
286.192 72.0662 285.616 71.9221 285.616 71.9221 cv
286.552 72.1382 286.84 73.218 287.56 73.5781 cv
287.56 73.5781 286.624 73.5781 285.688 73.938 cv
283.024 74.802 281.8 74.1541 281.224 72.6421 cv
281.728 71.7781 281.8 70.698 281.512 69.6182 cv
281.368 69.4021 281.296 69.114 281.152 68.8979 cv
0 0 0 1 cmyk
ef
280.864 68.4661 mo
283.384 68.322 283.096 64.002 283.312 62.8501 cv
283.384 62.2021 282.016 62.3462 281.584 63.21 cv
281.224 64.0742 281.944 62.634 281.728 61.698 cv
281.584 60.7622 281.008 59.9702 281.008 59.9702 cv
281.008 59.9702 279.856 60.4741 279.496 61.5542 cv
279.208 62.634 279.208 63.2822 279.208 63.2822 cv
279.208 62.3462 278.2 61.842 277.984 60.978 cv
277.984 60.978 277.768 61.9141 277.264 62.7781 cv
276.04 64.8662 276.112 66.2341 277.048 67.0981 cv
278.488 66.8101 279.928 67.314 280.864 68.4661 cv
ef
280.864 73.29 mo
282.88 73.5781 283.24 77.394 283.6 78.4021 cv
283.816 78.978 282.448 79.05 281.944 78.2581 cv
281.368 77.4661 282.304 78.7622 282.304 79.77 cv
282.232 80.7781 281.8 81.5701 281.8 81.5701 cv
281.8 81.5701 280.576 81.282 280.144 80.2021 cv
279.64 79.1941 279.568 78.6182 279.568 78.6182 cv
279.712 79.5542 278.776 80.2021 278.704 81.0662 cv
278.704 81.0662 278.344 80.2021 277.696 79.4102 cv
275.824 77.1782 276.04 75.738 277.264 74.6582 cv
277.84 74.73 278.416 74.6582 278.992 74.5142 cv
279.784 74.2981 280.36 73.7939 280.864 73.29 cv
ef
274.024 71.1301 mo
272.08 70.2661 269.704 73.29 268.84 74.01 cv
268.336 74.3701 269.488 75.1621 270.352 74.802 cv
271.216 74.4421 269.704 75.0181 269.272 75.8821 cv
268.768 76.7461 268.696 77.6821 268.696 77.6821 cv
268.696 77.6821 269.848 78.042 270.856 77.394 cv
271.792 76.8181 272.152 76.386 272.152 76.386 cv
271.576 77.0342 272.008 78.114 271.576 78.834 cv
271.576 78.834 272.368 78.3301 273.304 77.9702 cv
275.968 77.106 276.616 75.8821 276.256 74.3701 cv
275.248 73.938 274.528 73.0742 274.168 72.0662 cv
274.096 71.7781 274.024 71.418 274.024 71.1301 cv
ef
274.024 70.2661 mo
271.648 72.0662 269.488 67.9622 268.696 67.0261 cv
268.264 66.594 269.488 66.0181 270.28 66.522 cv
271.072 67.0261 269.704 66.1621 269.344 65.2981 cv
268.984 64.3621 269.056 63.354 269.056 63.354 cv
269.056 63.354 270.352 63.21 271.144 64.002 cv
272.008 64.7222 272.368 65.2261 272.368 65.2261 cv
271.864 64.4341 272.44 63.498 272.152 62.7061 cv
272.152 62.7061 272.8 63.354 273.736 63.8582 cv
275.896 64.938 276.544 66.1621 276.184 67.386 cv
275.032 67.8901 274.168 69.042 274.024 70.2661 cv
ef
267.256 73.002 mo
267.256 73.002 267.04 74.3701 250.408 79.842 cv
233.776 85.314 233.92 84.594 233.92 84.594 cv
234.64 86.8979 li
245.296 81.8582 257.968 78.114 264.376 76.6021 cv
270.784 75.1621 267.256 75.3779 267.112 74.5859 cv
266.896 73.7939 267.256 73.002 267.256 73.002 cv
ef
261.712 78.186 mo
261.712 78.186 267.544 76.6741 270.784 79.4819 cv
274.096 82.29 274.096 82.29 274.096 82.29 cv
274.096 82.29 271.72 82.146 270.712 81.7141 cv
269.704 81.21 269.128 80.49 268.696 79.842 cv
268.192 79.1941 268.84 80.2739 268.192 81.21 cv
267.544 82.146 267.328 82.218 267.328 82.218 cv
267.328 82.218 266.608 81.5701 266.824 80.2021 cv
266.968 78.834 267.04 78.834 267.04 78.834 cv
267.04 78.834 266.176 80.0581 265.312 80.2739 cv
264.52 80.49 264.448 80.49 264.448 80.49 cv
264.448 80.49 263.944 79.4819 264.808 78.834 cv
265.672 78.186 265.672 78.186 265.672 78.186 cv
261.712 78.186 li
ef
260.704 75.4502 mo
260.704 75.4502 266.32 73.29 267.256 69.042 cv
268.264 64.7939 268.264 64.7939 268.264 64.7939 cv
268.264 64.7939 266.464 66.3062 265.888 67.314 cv
265.384 68.322 265.384 69.2581 265.384 70.05 cv
265.384 70.842 265.24 69.5461 264.16 69.186 cv
263.08 68.7542 262.864 68.8262 262.864 68.8262 cv
262.864 68.8262 262.72 69.834 263.656 70.842 cv
264.592 71.8501 264.664 71.7781 264.664 71.7781 cv
264.664 71.7781 263.152 71.2739 262.432 71.634 cv
261.64 71.9221 261.568 71.9941 261.568 71.9941 cv
261.568 71.9941 261.784 73.0742 262.864 73.0742 cv
263.872 73.146 263.872 73.146 263.872 73.146 cv
260.704 75.4502 li
ef
253.504 81.0662 mo
264.52 78.906 279.712 86.9702 283.528 95.322 cv
284.968 98.634 285.76 102.522 285.76 102.522 cv
284.032 99.8582 281.152 99.6421 279.352 96.114 cv
278.416 94.1699 278.344 94.0261 278.344 94.0261 cv
278.344 94.0261 279.136 96.4021 279.064 97.5542 cv
278.848 101.874 li
278.848 101.874 277.336 97.9861 276.256 97.05 cv
275.176 96.042 273.592 92.5142 273.952 91.146 cv
274.24 89.7061 273.016 89.49 272.08 88.77 cv
271.072 88.1221 273.88 90.9302 273.016 92.73 cv
272.152 94.53 269.056 93.3062 268.768 90.498 cv
268.552 87.7622 266.752 86.6101 262.432 84.522 cv
258.112 82.4341 250.984 81.5701 250.984 81.5701 cv
253.504 81.0662 li
ef
252.64 77.394 mo
262.792 72.6421 270.28 57.1621 268.408 48.1621 cv
267.688 44.562 266.032 40.9622 266.032 40.9622 cv
266.176 44.2021 263.944 46.0742 264.592 49.9622 cv
265.024 52.1221 265.024 52.2661 265.024 52.2661 cv
265.024 52.2661 264.232 49.8901 263.512 49.0261 cv
260.776 45.6421 li
260.776 45.6421 261.856 49.6741 261.568 51.042 cv
261.28 52.4819 262.072 56.2261 263.152 57.2341 cv
264.232 58.1699 263.44 59.106 263.008 60.186 cv
262.648 61.3381 263.224 57.4502 261.496 56.4421 cv
259.768 55.5061 257.968 58.386 259.408 60.7622 cv
260.848 63.1382 260.056 65.1541 257.824 69.3301 cv
255.592 73.5781 250.264 78.4741 250.264 78.4741 cv
252.64 77.394 li
ef
333.496 121.89 mo
334.072 93.2341 384.04 90.354 381.448 89.8501 cv
379.72 89.562 377.992 89.418 376.336 89.3462 cv
355.744 88.77 324.424 99.8582 324.784 124.698 cv
324.928 131.898 328.96 138.81 338.32 143.346 cv
345.448 146.802 360.424 144.426 353.8 159.762 cv
359.128 157.89 360.64 151.698 359.2 146.514 cv
354.448 131.682 334.648 141.402 333.496 121.89 cv
ef
333.496 121.89 mo
334.072 93.2341 384.04 90.354 381.448 89.8501 cv
379.72 89.562 377.992 89.418 376.336 89.3462 cv
355.744 88.77 324.424 99.8582 324.784 124.698 cv
324.928 131.898 328.96 138.81 338.32 143.346 cv
345.448 146.802 360.424 144.426 353.8 159.762 cv
359.128 157.89 360.64 151.698 359.2 146.514 cv
354.448 131.682 334.648 141.402 333.496 121.89 cv
cp
@
397.864 124.194 mo
400.168 126.498 402.256 129.09 403.984 131.97 cv
416.224 153.066 407.656 179.49 387.28 191.946 cv
360.64 207.498 327.52 194.826 315.28 167.25 cv
302.392 136.722 318.952 102.81 349.408 91.6501 cv
350.92 91.0742 352.432 90.5701 353.944 90.1382 cv
354.808 89.8501 353.368 90.21 353.296 90.21 cv
324.424 97.4102 305.848 126.498 310.6 155.73 cv
316.144 184.962 343.072 204.906 372.736 199.506 cv
400.528 193.53 418.312 166.53 410.176 138.81 cv
407.944 132.186 404.416 126.426 399.952 121.746 cv
397.216 118.866 394.336 120.738 397.864 124.194 cv
ef
397.864 124.194 mo
400.168 126.498 402.256 129.09 403.984 131.97 cv
416.224 153.066 407.656 179.49 387.28 191.946 cv
360.64 207.498 327.52 194.826 315.28 167.25 cv
302.392 136.722 318.952 102.81 349.408 91.6501 cv
350.92 91.0742 352.432 90.5701 353.944 90.1382 cv
354.808 89.8501 353.368 90.21 353.296 90.21 cv
324.424 97.4102 305.848 126.498 310.6 155.73 cv
316.144 184.962 343.072 204.906 372.736 199.506 cv
400.528 193.53 418.312 166.53 410.176 138.81 cv
407.944 132.186 404.416 126.426 399.952 121.746 cv
397.216 118.866 394.336 120.738 397.864 124.194 cv
cp
@
305.416 168.042 mo
294.112 152.202 295.264 132.906 305.2 116.706 cv
319.528 95.25 344.872 85.8901 369.928 89.0581 cv
370.072 89.0581 372.736 89.49 371.368 89.1301 cv
335.368 80.49 293.608 105.906 293.896 145.074 cv
294.616 162.21 304.48 179.49 321.76 183.882 cv
328.96 185.538 337.24 184.674 342.64 179.274 cv
345.664 176.034 345.232 172.65 344.368 168.762 cv
343.144 164.226 345.304 161.058 347.248 157.098 cv
347.536 156.522 347.968 155.874 348.472 155.298 cv
346.168 155.442 344.368 156.954 342.784 158.466 cv
338.536 162.354 334.216 166.89 333.064 172.65 cv
332.128 175.962 330.76 178.05 327.16 178.842 cv
318.736 180.498 310.456 174.018 305.416 168.042 cv
ef
305.416 168.042 mo
294.112 152.202 295.264 132.906 305.2 116.706 cv
319.528 95.25 344.872 85.8901 369.928 89.0581 cv
370.072 89.0581 372.736 89.49 371.368 89.1301 cv
335.368 80.49 293.608 105.906 293.896 145.074 cv
294.616 162.21 304.48 179.49 321.76 183.882 cv
328.96 185.538 337.24 184.674 342.64 179.274 cv
345.664 176.034 345.232 172.65 344.368 168.762 cv
343.144 164.226 345.304 161.058 347.248 157.098 cv
347.536 156.522 347.968 155.874 348.472 155.298 cv
346.168 155.442 344.368 156.954 342.784 158.466 cv
338.536 162.354 334.216 166.89 333.064 172.65 cv
332.128 175.962 330.76 178.05 327.16 178.842 cv
318.736 180.498 310.456 174.018 305.416 168.042 cv
cp
@
544.384 52.1221 mo
542.944 51.5461 541.864 50.0342 542.296 47.946 cv
543.52 42.7622 550.576 44.634 551.584 48.9541 cv
553.744 58.6021 539.128 62.1301 535.312 52.05 cv
529.768 37.3621 548.416 28.6501 559.72 36.1382 cv
573.184 45.1382 572.392 65.2981 561.808 76.6021 cv
558.712 79.9861 556.48 81.8582 557.128 85.0981 cv
558.064 89.3462 561.016 96.4021 565.768 97.77 cv
568 98.49 569.728 97.9861 571.456 100.794 cv
573.112 103.602 573.4 104.682 573.4 104.682 cv
569.296 97.9141 565.336 103.314 561.088 99.21 cv
558.712 96.978 557.92 94.53 557.92 94.53 cv
557.92 94.53 558.136 95.322 557.704 96.3301 cv
557.272 97.3381 556.48 97.698 555.832 96.4741 cv
555.112 95.25 554.248 93.2341 554.68 91.6501 cv
555.112 90.0662 554.824 87.5461 554.824 87.5461 cv
554.824 87.5461 554.104 91.0742 553.168 91.7939 cv
552.16 92.4421 550.792 93.3062 550.792 93.3062 cv
550.792 93.3062 552.016 92.01 551.8 90.7861 cv
551.224 87.6182 549.28 84.666 551.656 81.498 cv
553.384 79.2661 553.384 79.2661 553.384 79.2661 cv
546.616 85.0261 545.969 81.498 538.984 83.1541 cv
535.168 84.0901 530.632 84.9541 529.264 88.9861 cv
527.969 93.0181 528.04 93.666 528.04 93.666 cv
528.04 93.666 526.168 91.7939 526.456 89.634 cv
526.816 87.5461 527.608 85.8901 527.608 85.8901 cv
527.608 85.8901 524.224 86.5381 522.136 89.2021 cv
520.048 91.8662 518.464 94.53 518.464 95.8979 cv
518.464 97.2661 518.464 97.2661 518.464 97.2661 cv
518.464 97.2661 516.808 95.6821 516.664 94.0261 cv
516.592 92.2981 516.448 92.082 516.448 92.082 cv
516.448 92.082 514.864 94.0981 514.432 96.2581 cv
514 98.3462 514.144 99.498 513.856 98.9221 cv
513.64 98.3462 513.136 96.978 512.992 94.6741 cv
512.92 92.2981 513.208 91.5781 514 90.8582 cv
514.792 90.21 512.776 89.9941 511.552 89.562 cv
510.328 89.0581 509.32 88.1941 511.624 87.978 cv
514 87.7622 521.272 86.6101 522.352 85.8901 cv
523.504 85.0981 522.496 83.4421 520.48 83.082 cv
519.688 82.938 517.456 82.8662 514.864 82.8662 cv
506.944 82.6501 460.216 67.458 456.688 80.8501 cv
456.112 82.938 456.76 83.802 456.76 83.802 cv
457.984 81.354 462.304 84.522 460.792 86.7542 cv
456.256 93.8101 438.688 78.4741 465.04 72.9302 cv
465.04 72.9302 463.384 72.5701 462.952 71.2739 cv
462.52 69.906 462.232 68.25 462.232 68.25 cv
462.232 68.25 463.024 69.5461 465.184 70.3381 cv
466.408 70.842 477.64 73.4341 477.568 73.3621 cv
476.848 72.7141 474.4 71.2739 475.192 69.042 cv
475.984 66.8101 476.992 65.6582 476.992 65.6582 cv
476.992 65.6582 476.56 67.458 478.288 69.4741 cv
482.68 74.3701 493.912 77.0342 500.104 78.6899 cv
502.984 79.4819 509.752 80.634 512.344 80.634 cv
514.864 80.634 516.376 80.418 516.376 80.418 cv
516.376 80.418 507.232 76.8181 503.056 75.2341 cv
485.92 68.7542 454.528 43.05 435.808 61.77 cv
431.848 65.802 428.968 69.5461 427.96 72.9302 cv
423.064 88.5542 440.344 93.666 443.656 83.082 cv
444.448 80.562 444.736 77.9702 441.568 77.1782 cv
441.928 77.8262 442.144 78.6182 442.144 79.4819 cv
442.144 81.8582 440.2 83.802 437.824 83.802 cv
434.44 83.802 432.496 80.2739 433.72 77.0342 cv
436.24 70.3381 445.456 72.1382 446.536 78.4741 cv
450.352 101.37 409.816 94.0981 425.728 68.6821 cv
427.888 65.1541 428.68 64.002 429.688 62.9221 cv
430.696 61.77 432.496 59.5381 432.496 59.5381 cv
432.496 59.5381 428.896 60.186 426.016 62.418 cv
423.136 64.6501 415.792 69.906 412.768 73.146 cv
409.744 76.386 397.504 85.314 393.04 86.9702 cv
345.736 104.826 347.032 56.874 363.592 63.354 cv
366.184 64.3621 367.624 67.53 367.552 70.2661 cv
367.336 75.594 358.912 77.25 358.912 71.7781 cv
358.912 69.834 360.424 68.322 362.296 68.322 cv
363.376 68.322 364.384 68.8979 364.96 69.7622 cv
365.968 65.5142 358.408 63.7141 356.896 68.6101 cv
354.304 77.1782 360.136 86.106 369.496 87.186 cv
376.696 88.05 382.6 86.7542 389.44 85.6021 cv
385.768 85.8181 374.896 82.5061 377.848 77.8262 cv
378.352 77.0342 379.144 76.6741 379.936 76.6021 cv
379.288 75.8821 378.496 74.874 378.208 73.7222 cv
377.2 70.05 378.424 68.6821 379.792 65.4421 cv
379.792 65.4421 378.28 69.3301 379.864 70.842 cv
381.448 72.282 384.544 71.49 385.984 74.3701 cv
387.424 77.25 387.64 79.698 390.88 79.9861 cv
394.12 80.2021 399.736 78.978 404.632 75.8101 cv
413.056 70.4102 421.912 59.8262 431.272 56.6582 cv
460.648 46.6501 478.288 60.7622 502.768 72.0662 cv
504.208 72.7141 505.288 72.7141 504.64 70.5542 cv
503.992 68.4661 502.264 63.9302 499.96 61.1221 cv
496.432 56.874 496.504 55.938 491.608 53.49 cv
491.608 53.49 494.056 52.05 495.928 52.626 cv
497.8 53.2021 499.096 53.9941 499.096 53.9941 cv
499.096 53.9941 496.288 50.0342 496.504 47.946 cv
496.72 45.8582 496.288 44.2739 497.368 44.1301 cv
498.52 44.0581 499.168 43.842 499.744 45.1382 cv
500.32 46.5061 500.608 47.1541 500.608 47.1541 cv
500.608 47.1541 500.608 43.698 501.616 41.8262 cv
505.288 34.842 516.088 38.5859 513.784 44.9221 cv
512.92 47.1541 511.192 48.522 508.744 48.1621 cv
508.744 48.1621 510.904 47.2981 511.408 46.146 cv
511.984 45.0662 512.632 43.626 511.624 42.4741 cv
510.688 41.394 509.752 41.0342 509.752 41.0342 cv
512.56 42.6899 508.888 44.2739 506.944 43.698 cv
505.432 43.2661 503.488 44.418 503.056 46.3621 cv
502.624 48.3779 501.976 51.6182 502.192 54.6421 cv
502.408 57.666 503.992 63.426 503.992 63.426 cv
503.992 63.426 503.632 59.5381 505.432 57.4502 cv
507.52 54.9302 512.416 54.498 513.424 51.4021 cv
513.64 50.7542 512.992 54.2822 511.192 56.4421 cv
509.464 58.53 508.168 57.8821 507.664 62.3462 cv
506.584 70.9861 514 80.418 523.36 79.842 cv
528.976 79.4819 533.728 80.0581 535.384 79.842 cv
537.112 79.626 530.2 76.8181 527.392 75.9541 cv
522.064 74.2261 520.84 68.1782 524.728 69.2581 cv
526.024 69.6182 527.392 70.2661 527.392 70.2661 cv
527.392 70.2661 525.52 66.8821 526.024 65.01 cv
526.6 63.1382 526.744 62.9221 528.616 61.4102 cv
530.488 59.9702 531.28 58.53 531.28 57.4502 cv
531.28 56.2981 531.712 57.738 531.064 61.9861 cv
530.416 66.2341 528.184 68.8262 530.92 71.562 cv
533.728 74.3701 537.184 76.2422 537.184 76.2422 cv
535.024 74.2981 534.016 70.1941 536.392 68.0342 cv
537.616 66.8821 535.6 67.8901 537.328 71.0581 cv
538.984 74.1541 541.864 79.626 546.904 78.2581 cv
558.784 75.0901 570.376 59.0342 566.848 47.874 cv
563.176 36.426 547.408 35.2739 540.496 40.8901 cv
537.616 43.2661 535.456 46.7939 537.256 51.3301 cv
539.056 55.7222 543.736 56.3701 546.328 54.7861 cv
549.28 52.9861 550.864 48.594 548.344 46.5061 cv
546.544 44.9941 543.664 45.5701 543.664 48.522 cv
543.736 48.666 li
543.88 47.4421 544.888 46.5061 546.112 46.5061 cv
547.48 46.5061 548.488 47.5859 548.488 48.9541 cv
548.488 50.8262 546.256 52.77 544.384 52.1221 cv
ef
400.888 157.242 mo
402.04 148.242 392.752 140.25 384.112 144.426 cv
380.368 146.226 377.632 150.546 378.64 154.794 cv
378.64 154.866 378.928 155.73 378.856 155.37 cv
378.496 152.49 378.856 149.97 380.728 147.594 cv
381.736 146.298 383.176 145.218 384.76 144.714 cv
385.768 144.354 384.256 145.146 384.112 145.218 cv
379.504 148.098 377.416 154.794 381.952 158.754 cv
383.392 160.05 385.336 160.626 387.28 160.194 cv
391.24 159.258 392.608 153.93 388.288 152.562 cv
387.136 152.202 388.36 151.626 388.936 151.554 cv
392.32 151.194 393.76 155.298 392.968 157.962 cv
391.456 162.786 385.624 163.938 381.592 161.49 cv
375.4 157.458 376.192 148.746 381.736 144.57 cv
388.288 139.89 396.928 142.698 400.672 149.538 cv
404.776 157.818 400.456 167.25 392.104 170.562 cv
382.096 174.234 371.728 168.186 369.064 158.106 cv
366.832 149.178 371.152 140.25 379.216 135.93 cv
393.184 128.874 409.672 139.026 410.32 154.146 cv
410.32 154.29 410.32 157.17 410.104 155.802 cv
410.032 155.226 409.96 154.722 409.888 154.146 cv
409.168 149.466 407.224 145.218 403.984 141.762 cv
408.52 146.586 410.32 152.85 409.96 159.33 cv
409.96 159.33 409.744 161.13 409.96 160.482 cv
410.248 159.762 410.392 158.898 410.464 158.178 cv
412.408 142.77 397.576 129.882 382.528 134.418 cv
371.656 137.874 365.464 149.538 369.568 160.41 cv
373.456 169.914 384.184 174.666 393.616 170.202 cv
401.752 166.026 405.136 156.09 400.168 148.17 cv
395.632 141.474 386.488 139.674 380.368 145.29 cv
375.76 149.898 375.544 157.458 380.872 161.49 cv
385.192 164.514 391.456 163.578 393.472 158.394 cv
394.696 154.794 392.68 150.258 388.432 150.474 cv
387.424 150.546 386.56 150.978 385.84 151.698 cv
384.184 153.714 385.552 156.81 388.144 155.514 cv
389.368 155.01 389.368 156.666 389.008 157.386 cv
387.568 160.41 383.392 159.186 381.664 157.026 cv
378.64 152.778 381.448 147.306 385.912 145.578 cv
391.672 143.49 397.576 147.09 399.52 152.706 cv
401.32 158.466 399.016 163.362 395.056 167.25 cv
394.336 167.97 395.704 167.034 395.776 166.962 cv
398.8 164.73 401.176 160.554 401.032 156.738 cv
401.032 156.09 400.96 157.17 400.888 157.242 cv
ef
400.888 157.242 mo
402.04 148.242 392.752 140.25 384.112 144.426 cv
380.368 146.226 377.632 150.546 378.64 154.794 cv
378.64 154.866 378.928 155.73 378.856 155.37 cv
378.496 152.49 378.856 149.97 380.728 147.594 cv
381.736 146.298 383.176 145.218 384.76 144.714 cv
385.768 144.354 384.256 145.146 384.112 145.218 cv
379.504 148.098 377.416 154.794 381.952 158.754 cv
383.392 160.05 385.336 160.626 387.28 160.194 cv
391.24 159.258 392.608 153.93 388.288 152.562 cv
387.136 152.202 388.36 151.626 388.936 151.554 cv
392.32 151.194 393.76 155.298 392.968 157.962 cv
391.456 162.786 385.624 163.938 381.592 161.49 cv
375.4 157.458 376.192 148.746 381.736 144.57 cv
388.288 139.89 396.928 142.698 400.672 149.538 cv
404.776 157.818 400.456 167.25 392.104 170.562 cv
382.096 174.234 371.728 168.186 369.064 158.106 cv
366.832 149.178 371.152 140.25 379.216 135.93 cv
393.184 128.874 409.672 139.026 410.32 154.146 cv
410.32 154.29 410.32 157.17 410.104 155.802 cv
410.032 155.226 409.96 154.722 409.888 154.146 cv
409.168 149.466 407.224 145.218 403.984 141.762 cv
408.52 146.586 410.32 152.85 409.96 159.33 cv
409.96 159.33 409.744 161.13 409.96 160.482 cv
410.248 159.762 410.392 158.898 410.464 158.178 cv
412.408 142.77 397.576 129.882 382.528 134.418 cv
371.656 137.874 365.464 149.538 369.568 160.41 cv
373.456 169.914 384.184 174.666 393.616 170.202 cv
401.752 166.026 405.136 156.09 400.168 148.17 cv
395.632 141.474 386.488 139.674 380.368 145.29 cv
375.76 149.898 375.544 157.458 380.872 161.49 cv
385.192 164.514 391.456 163.578 393.472 158.394 cv
394.696 154.794 392.68 150.258 388.432 150.474 cv
387.424 150.546 386.56 150.978 385.84 151.698 cv
384.184 153.714 385.552 156.81 388.144 155.514 cv
389.368 155.01 389.368 156.666 389.008 157.386 cv
387.568 160.41 383.392 159.186 381.664 157.026 cv
378.64 152.778 381.448 147.306 385.912 145.578 cv
391.672 143.49 397.576 147.09 399.52 152.706 cv
401.32 158.466 399.016 163.362 395.056 167.25 cv
394.336 167.97 395.704 167.034 395.776 166.962 cv
398.8 164.73 401.176 160.554 401.032 156.738 cv
401.032 156.09 400.96 157.17 400.888 157.242 cv
cp
@
420.4 157.242 mo
419.248 148.242 428.464 140.25 437.176 144.426 cv
440.92 146.226 443.584 150.546 442.648 154.794 cv
442.648 154.866 442.36 155.73 442.36 155.37 cv
442.72 152.49 442.432 149.97 440.56 147.594 cv
439.552 146.298 438.112 145.218 436.528 144.714 cv
435.448 144.354 437.032 145.146 437.176 145.218 cv
441.712 148.098 443.8 154.794 439.336 158.754 cv
437.824 160.05 435.952 160.626 434.008 160.194 cv
430.048 159.258 428.68 153.93 433 152.562 cv
434.152 152.202 432.928 151.626 432.28 151.554 cv
428.968 151.194 427.528 155.298 428.32 157.962 cv
429.832 162.786 435.592 163.938 439.624 161.49 cv
445.888 157.458 445.024 148.746 439.48 144.57 cv
433 139.89 424.36 142.698 420.616 149.538 cv
416.512 157.818 420.76 167.25 429.184 170.562 cv
439.12 174.234 449.488 168.186 452.224 158.106 cv
454.384 149.178 450.136 140.25 442.072 135.93 cv
428.104 128.874 411.616 139.026 410.968 154.146 cv
410.896 154.29 410.968 157.17 411.112 155.802 cv
411.256 155.226 411.256 154.722 411.328 154.146 cv
412.048 149.466 413.992 145.218 417.304 141.762 cv
412.768 146.586 410.896 152.85 411.328 159.33 cv
411.328 159.33 411.544 161.13 411.256 160.482 cv
411.04 159.762 410.896 158.898 410.824 158.178 cv
408.88 142.77 423.64 129.882 438.688 134.418 cv
449.632 137.874 455.824 149.538 451.648 160.41 cv
447.76 169.914 437.104 174.666 427.672 170.202 cv
419.536 166.026 416.152 156.09 421.12 148.17 cv
425.656 141.474 434.8 139.674 440.92 145.29 cv
445.456 149.898 445.744 157.458 440.344 161.49 cv
436.096 164.514 429.832 163.578 427.816 158.394 cv
426.592 154.794 428.608 150.258 432.784 150.474 cv
433.792 150.546 434.728 150.978 435.376 151.698 cv
437.032 153.714 435.736 156.81 433.072 155.514 cv
431.92 155.01 431.92 156.666 432.208 157.386 cv
433.72 160.41 437.896 159.186 439.552 157.026 cv
442.648 152.778 439.84 147.306 435.376 145.578 cv
429.616 143.49 423.712 147.09 421.768 152.706 cv
419.896 158.466 422.272 163.362 426.232 167.25 cv
426.952 167.97 425.584 167.034 425.44 166.962 cv
422.488 164.73 420.04 160.554 420.184 156.738 cv
420.184 156.09 420.328 157.17 420.4 157.242 cv
ef
420.4 157.242 mo
419.248 148.242 428.464 140.25 437.176 144.426 cv
440.92 146.226 443.584 150.546 442.648 154.794 cv
442.648 154.866 442.36 155.73 442.36 155.37 cv
442.72 152.49 442.432 149.97 440.56 147.594 cv
439.552 146.298 438.112 145.218 436.528 144.714 cv
435.448 144.354 437.032 145.146 437.176 145.218 cv
441.712 148.098 443.8 154.794 439.336 158.754 cv
437.824 160.05 435.952 160.626 434.008 160.194 cv
430.048 159.258 428.68 153.93 433 152.562 cv
434.152 152.202 432.928 151.626 432.28 151.554 cv
428.968 151.194 427.528 155.298 428.32 157.962 cv
429.832 162.786 435.592 163.938 439.624 161.49 cv
445.888 157.458 445.024 148.746 439.48 144.57 cv
433 139.89 424.36 142.698 420.616 149.538 cv
416.512 157.818 420.76 167.25 429.184 170.562 cv
439.12 174.234 449.488 168.186 452.224 158.106 cv
454.384 149.178 450.136 140.25 442.072 135.93 cv
428.104 128.874 411.616 139.026 410.968 154.146 cv
410.896 154.29 410.968 157.17 411.112 155.802 cv
411.256 155.226 411.256 154.722 411.328 154.146 cv
412.048 149.466 413.992 145.218 417.304 141.762 cv
412.768 146.586 410.896 152.85 411.328 159.33 cv
411.328 159.33 411.544 161.13 411.256 160.482 cv
411.04 159.762 410.896 158.898 410.824 158.178 cv
408.88 142.77 423.64 129.882 438.688 134.418 cv
449.632 137.874 455.824 149.538 451.648 160.41 cv
447.76 169.914 437.104 174.666 427.672 170.202 cv
419.536 166.026 416.152 156.09 421.12 148.17 cv
425.656 141.474 434.8 139.674 440.92 145.29 cv
445.456 149.898 445.744 157.458 440.344 161.49 cv
436.096 164.514 429.832 163.578 427.816 158.394 cv
426.592 154.794 428.608 150.258 432.784 150.474 cv
433.792 150.546 434.728 150.978 435.376 151.698 cv
437.032 153.714 435.736 156.81 433.072 155.514 cv
431.92 155.01 431.92 156.666 432.208 157.386 cv
433.72 160.41 437.896 159.186 439.552 157.026 cv
442.648 152.778 439.84 147.306 435.376 145.578 cv
429.616 143.49 423.712 147.09 421.768 152.706 cv
419.896 158.466 422.272 163.362 426.232 167.25 cv
426.952 167.97 425.584 167.034 425.44 166.962 cv
422.488 164.73 420.04 160.554 420.184 156.738 cv
420.184 156.09 420.328 157.17 420.4 157.242 cv
cp
@
358.696 1.146 mo
372.592 -2.09399 388 2.15405 394.84 15.2581 cv
400.312 25.77 398.8 46.7939 381.88 46.938 cv
377.848 46.938 372.88 41.6101 377.272 38.01 cv
377.848 37.5061 378.352 36.9302 378.712 36.21 cv
377.704 38.6582 375.4 39.4502 376.768 42.4741 cv
378.856 46.5061 384.184 46.4341 387.784 44.7061 cv
397.072 39.8821 398.08 26.562 392.32 18.6421 cv
380.44 2.58594 357.184 6.33008 345.664 20.802 cv
337.816 30.9541 336.16 43.842 339.832 56.01 cv
335.512 42.4021 338.176 28.29 347.392 17.418 cv
347.752 17.0581 351.352 13.386 351.208 12.9541 cv
350.992 12.594 349.336 13.53 349.192 13.6741 cv
337.384 20.4421 332.632 37.0742 333.784 49.6741 cv
335.728 66.0181 345.808 79.2661 360.28 86.8979 cv
379.792 96.2581 401.176 93.3062 418.672 80.9221 cv
420.832 79.2661 422.776 77.4661 424.72 75.666 cv
424.648 75.594 li
415.072 84.9541 403.192 90.7861 389.296 92.3701 cv
371.296 93.666 354.52 87.2581 343.072 73.146 cv
327.448 52.626 330.328 24.834 351.136 9.57007 cv
351.568 9.28223 351.928 8.99414 352.36 8.70605 cv
360.208 3.23413 369.856 3.59399 378.928 4.45801 cv
384.04 4.96216 376.84 1.79395 375.832 1.5061 cv
370.216 -.221924 364.384 -.149902 358.696 1.146 cv
ef
358.696 1.146 mo
372.592 -2.09399 388 2.15405 394.84 15.2581 cv
400.312 25.77 398.8 46.7939 381.88 46.938 cv
377.848 46.938 372.88 41.6101 377.272 38.01 cv
377.848 37.5061 378.352 36.9302 378.712 36.21 cv
377.704 38.6582 375.4 39.4502 376.768 42.4741 cv
378.856 46.5061 384.184 46.4341 387.784 44.7061 cv
397.072 39.8821 398.08 26.562 392.32 18.6421 cv
380.44 2.58594 357.184 6.33008 345.664 20.802 cv
337.816 30.9541 336.16 43.842 339.832 56.01 cv
335.512 42.4021 338.176 28.29 347.392 17.418 cv
347.752 17.0581 351.352 13.386 351.208 12.9541 cv
350.992 12.594 349.336 13.53 349.192 13.6741 cv
337.384 20.4421 332.632 37.0742 333.784 49.6741 cv
335.728 66.0181 345.808 79.2661 360.28 86.8979 cv
379.792 96.2581 401.176 93.3062 418.672 80.9221 cv
420.832 79.2661 422.776 77.4661 424.72 75.666 cv
424.648 75.594 li
415.072 84.9541 403.192 90.7861 389.296 92.3701 cv
371.296 93.666 354.52 87.2581 343.072 73.146 cv
327.448 52.626 330.328 24.834 351.136 9.57007 cv
351.568 9.28223 351.928 8.99414 352.36 8.70605 cv
360.208 3.23413 369.856 3.59399 378.928 4.45801 cv
384.04 4.96216 376.84 1.79395 375.832 1.5061 cv
370.216 -.221924 364.384 -.149902 358.696 1.146 cv
cp
@
420.184 98.2021 mo
415.936 113.754 414.352 116.706 411.616 114.402 cv
408.88 119.874 404.992 120.018 390.448 115.338 cv
404.704 121.746 408.304 123.258 409.96 123.618 cv
412.264 128.154 412.696 131.466 412.264 141.834 cv
414.712 131.826 416.296 128.874 420.904 125.634 cv
421.768 125.706 425.584 125.562 442 124.698 cv
425.944 123.834 422.344 122.322 422.56 116.346 cv
418.384 117.498 417.952 114.114 420.184 98.2021 cv
ef
306.928 69.834 mo
306.352 71.562 307.288 73.3621 308.944 73.938 cv
310.672 74.5142 312.544 73.5781 313.048 71.8501 cv
313.624 70.1221 312.688 68.322 311.032 67.7461 cv
309.304 67.1699 307.432 68.106 306.928 69.834 cv
ef
308.008 72.8582 mo
308.296 73.002 308.512 73.146 308.8 73.218 cv
310.312 73.7222 311.896 72.9302 312.4 71.418 cv
312.76 70.2661 312.4 69.042 311.464 68.322 cv
311.752 68.8979 311.968 69.7622 311.608 70.1941 cv
311.032 70.9861 310.312 71.2021 309.952 70.9141 cv
309.592 70.626 309.376 71.1301 309.592 71.7061 cv
309.808 72.21 309.088 73.146 308.584 72.5701 cv
308.296 72.21 308.08 72.426 308.008 72.8582 cv
0 0 0 0 cmyk
ef
306.712 68.8979 mo
305.704 66.8821 301.96 68.0342 300.808 68.0342 cv
300.232 68.106 300.664 69.4021 301.6 69.6182 cv
302.464 69.834 300.952 69.4021 300.016 69.7622 cv
299.152 70.1941 298.504 70.9141 298.504 70.9141 cv
298.504 70.9141 299.224 71.9221 300.376 71.9941 cv
301.528 72.0662 302.104 71.9221 302.104 71.9221 cv
301.168 72.1382 300.952 73.218 300.16 73.5781 cv
300.16 73.5781 301.096 73.5781 302.104 73.938 cv
304.768 74.802 306.064 74.1541 306.568 72.6421 cv
306.136 71.7781 305.992 70.698 306.352 69.6182 cv
306.424 69.4021 306.568 69.114 306.712 68.8979 cv
0 0 0 1 cmyk
ef
307 68.4661 mo
304.408 68.322 304.768 64.002 304.552 62.8501 cv
304.408 62.2021 305.776 62.3462 306.208 63.21 cv
306.64 64.0742 305.848 62.634 306.064 61.698 cv
306.28 60.7622 306.856 59.9702 306.856 59.9702 cv
306.856 59.9702 308.008 60.4741 308.296 61.5542 cv
308.584 62.634 308.584 63.2822 308.584 63.2822 cv
308.584 62.3462 309.592 61.842 309.808 60.978 cv
309.808 60.978 310.024 61.9141 310.528 62.7781 cv
311.752 64.8662 311.68 66.2341 310.744 67.0981 cv
309.304 66.8101 307.864 67.314 307 68.4661 cv
ef
307 73.29 mo
304.912 73.5781 304.552 77.394 304.192 78.4021 cv
303.976 78.978 305.344 79.05 305.92 78.2581 cv
306.424 77.4661 305.488 78.7622 305.488 79.77 cv
305.56 80.7781 305.992 81.5701 305.992 81.5701 cv
305.992 81.5701 307.216 81.282 307.72 80.2021 cv
308.152 79.1941 308.296 78.6182 308.296 78.6182 cv
308.08 79.5542 309.016 80.2021 309.16 81.0662 cv
309.16 81.0662 309.448 80.2021 310.096 79.4102 cv
311.968 77.1782 311.752 75.738 310.528 74.6582 cv
309.952 74.73 309.376 74.6582 308.8 74.5142 cv
308.08 74.2981 307.432 73.7939 307 73.29 cv
ef
313.84 71.1301 mo
315.784 70.2661 318.088 73.29 318.952 74.01 cv
319.456 74.3701 318.376 75.1621 317.44 74.802 cv
316.576 74.4421 318.088 75.0181 318.592 75.8821 cv
319.096 76.7461 319.168 77.6821 319.168 77.6821 cv
319.168 77.6821 317.944 78.042 317.008 77.394 cv
316 76.8181 315.64 76.386 315.64 76.386 cv
316.288 77.0342 315.784 78.114 316.216 78.834 cv
316.216 78.834 315.424 78.3301 314.488 77.9702 cv
311.824 77.106 311.176 75.8821 311.608 74.3701 cv
312.544 73.938 313.264 73.0742 313.624 72.0662 cv
313.768 71.7781 313.768 71.418 313.84 71.1301 cv
ef
313.768 70.2661 mo
316.144 72.0662 318.376 67.9622 319.168 67.0261 cv
319.6 66.594 318.376 66.0181 317.512 66.522 cv
316.72 67.0261 318.088 66.1621 318.448 65.2981 cv
318.808 64.3621 318.736 63.354 318.736 63.354 cv
318.736 63.354 317.512 63.21 316.648 64.002 cv
315.784 64.7222 315.496 65.2261 315.496 65.2261 cv
316 64.4341 315.352 63.498 315.64 62.7061 cv
315.64 62.7061 314.992 63.354 314.056 63.8582 cv
311.896 64.938 311.32 66.1621 311.608 67.386 cv
312.832 67.8901 313.624 69.042 313.768 70.2661 cv
ef
320.608 73.002 mo
320.608 73.002 320.752 74.3701 337.384 79.842 cv
354.016 85.314 353.872 84.594 353.872 84.594 cv
353.224 86.8979 li
342.496 81.8582 329.896 78.114 323.416 76.6021 cv
317.008 75.1621 320.536 75.3779 320.68 74.5859 cv
320.896 73.7939 320.608 73.002 320.608 73.002 cv
ef
326.152 78.186 mo
326.152 78.186 320.32 76.6741 317.008 79.4819 cv
313.696 82.29 313.696 82.29 313.696 82.29 cv
313.696 82.29 316.072 82.146 317.08 81.7141 cv
318.088 81.21 318.664 80.49 319.168 79.842 cv
319.6 79.1941 319.024 80.2739 319.6 81.21 cv
320.248 82.146 320.464 82.218 320.464 82.218 cv
320.464 82.218 321.184 81.5701 321.04 80.2021 cv
320.824 78.834 320.752 78.834 320.752 78.834 cv
320.752 78.834 321.688 80.0581 322.48 80.2739 cv
323.272 80.49 323.416 80.49 323.416 80.49 cv
323.416 80.49 323.848 79.4819 322.984 78.834 cv
322.12 78.186 322.12 78.186 322.12 78.186 cv
326.152 78.186 li
ef
327.088 75.4502 mo
327.088 75.4502 321.472 73.29 320.536 69.042 cv
319.528 64.7939 319.528 64.7939 319.528 64.7939 cv
319.528 64.7939 321.328 66.3062 321.904 67.314 cv
322.408 68.322 322.48 69.2581 322.408 70.05 cv
322.408 70.842 322.552 69.5461 323.632 69.186 cv
324.712 68.7542 324.928 68.8262 324.928 68.8262 cv
324.928 68.8262 325.072 69.834 324.136 70.842 cv
323.2 71.8501 323.128 71.7781 323.128 71.7781 cv
323.128 71.7781 324.64 71.2739 325.36 71.634 cv
326.152 71.9221 326.296 71.9941 326.296 71.9941 cv
326.296 71.9941 326.008 73.0742 325 73.0742 cv
323.92 73.146 323.92 73.146 323.92 73.146 cv
327.088 75.4502 li
ef
334.288 81.0662 mo
323.344 78.906 308.152 86.9702 304.336 95.322 cv
302.752 98.634 301.96 102.522 301.96 102.522 cv
303.76 99.8582 306.712 99.6421 308.44 96.114 cv
309.376 94.1699 309.448 94.0261 309.448 94.0261 cv
309.448 94.0261 308.656 96.4021 308.728 97.5542 cv
308.944 101.874 li
308.944 101.874 310.456 97.9861 311.536 97.05 cv
312.616 96.042 314.2 92.5142 313.912 91.146 cv
313.624 89.7061 314.776 89.49 315.784 88.77 cv
316.72 88.1221 313.984 90.9302 314.776 92.73 cv
315.64 94.53 318.808 93.3062 319.024 90.498 cv
319.312 87.7622 321.112 86.6101 325.36 84.522 cv
329.68 82.4341 336.88 81.5701 336.88 81.5701 cv
334.288 81.0662 li
ef
335.152 77.394 mo
325 72.6421 317.584 57.1621 319.384 48.1621 cv
320.104 44.562 321.76 40.9622 321.76 40.9622 cv
321.616 44.2021 323.848 46.0742 323.2 49.9622 cv
322.84 52.1221 322.768 52.2661 322.768 52.2661 cv
322.768 52.2661 323.56 49.8901 324.28 49.0261 cv
327.016 45.6421 li
327.016 45.6421 325.936 49.6741 326.224 51.042 cv
326.512 52.4819 325.72 56.2261 324.64 57.2341 cv
323.56 58.1699 324.352 59.106 324.784 60.186 cv
325.144 61.3381 324.568 57.4502 326.296 56.4421 cv
328.096 55.5061 329.896 58.386 328.456 60.7622 cv
327.016 63.1382 327.736 65.1541 329.968 69.3301 cv
332.2 73.5781 337.528 78.4741 337.528 78.4741 cv
335.152 77.394 li
ef
18.7122 132.546 mo
18.2083 133.914 16.6963 134.994 14.6082 134.562 cv
9.35229 133.41 11.2244 126.282 15.6162 125.274 cv
25.1921 123.114 28.7202 137.73 18.6401 141.546 cv
4.02417 147.09 -4.75977 128.442 2.72827 117.138 cv
11.7283 103.674 31.9602 104.538 43.2642 115.05 cv
46.5762 118.146 48.4482 120.378 51.6882 119.73 cv
56.0083 118.866 62.9924 115.914 64.4324 111.162 cv
65.0803 108.93 64.6482 107.13 67.4563 105.474 cv
70.1921 103.746 71.3445 103.458 71.3445 103.458 cv
64.5764 107.562 69.9763 111.522 65.8723 115.842 cv
63.6404 118.146 61.1921 118.938 61.1921 118.938 cv
61.1921 118.938 61.9841 118.722 62.9924 119.154 cv
64.0002 119.586 64.2883 120.378 63.0642 121.026 cv
61.8401 121.746 59.8242 122.61 58.3123 122.178 cv
56.7283 121.746 54.1362 122.034 54.1362 122.034 cv
54.1362 122.034 57.7363 122.754 58.3843 123.762 cv
59.0322 124.77 59.9683 126.066 59.9683 126.066 cv
59.9683 126.066 58.6003 124.842 57.3762 125.058 cv
54.2083 125.634 51.3284 127.578 48.1602 125.202 cv
45.9282 123.546 45.9282 123.546 45.9282 123.546 cv
51.6162 130.242 48.1602 130.89 49.8162 137.874 cv
50.6802 141.69 51.6162 146.226 55.5762 147.594 cv
59.6082 148.962 60.3284 148.818 60.3284 148.818 cv
60.3284 148.818 58.3843 150.69 56.2961 150.402 cv
54.1362 150.042 52.4802 149.25 52.4802 149.25 cv
52.4802 149.25 53.1282 152.634 55.8643 154.722 cv
58.5283 156.882 61.1921 158.394 62.488 158.394 cv
63.8562 158.394 63.8562 158.394 63.8562 158.394 cv
63.8562 158.394 62.2722 160.05 60.6165 160.194 cv
58.9602 160.338 58.7441 160.41 58.7441 160.41 cv
58.7441 160.41 60.76 161.994 62.8484 162.426 cv
65.0081 162.858 66.0881 162.786 65.5125 163.002 cv
65.0081 163.218 63.6404 163.794 61.2644 163.866 cv
58.9602 164.01 58.1682 163.65 57.5203 162.858 cv
56.8723 162.066 56.5842 164.082 56.1523 165.306 cv
55.7202 166.53 54.8562 167.538 54.6401 165.234 cv
54.3523 162.858 53.2722 155.658 52.4802 154.506 cv
51.6882 153.426 50.0322 154.434 49.6724 156.378 cv
49.6003 157.17 49.5283 159.402 49.4563 161.994 cv
49.3123 169.914 34.1204 216.642 47.4402 220.17 cv
49.6003 220.746 50.4644 220.098 50.4644 220.098 cv
48.0164 218.874 51.1123 214.626 53.4163 216.066 cv
60.4724 220.674 45.1362 238.17 39.5203 211.818 cv
39.5203 211.818 39.2322 213.474 37.8643 213.906 cv
36.5684 214.41 34.8403 214.626 34.8403 214.626 cv
34.8403 214.626 36.2083 213.834 37.0002 211.674 cv
37.4321 210.45 40.0962 199.29 40.0242 199.362 cv
39.3042 200.01 37.8643 202.458 35.6323 201.666 cv
33.4001 200.874 32.3203 199.866 32.3203 199.866 cv
32.3203 199.866 34.1204 200.37 36.0642 198.57 cv
40.9602 194.178 43.6243 182.946 45.2803 176.754 cv
46.0723 173.874 47.2244 167.106 47.2244 164.514 cv
47.2244 161.994 47.0083 160.554 47.0083 160.554 cv
47.0083 160.554 43.4802 169.698 41.8962 173.802 cv
35.4163 190.938 9.71216 222.33 28.4321 241.05 cv
32.3923 245.082 36.2083 247.89 39.5203 248.97 cv
55.1443 253.866 60.2561 236.514 49.6724 233.202 cv
47.1523 232.482 44.6323 232.122 43.8403 235.362 cv
44.4883 234.93 45.2803 234.714 46.0723 234.714 cv
48.4482 234.714 50.3923 236.658 50.3923 239.034 cv
50.3923 242.49 46.9363 244.362 43.6963 243.138 cv
36.9282 240.618 38.7283 231.402 45.1362 230.322 cv
67.9602 226.578 60.76 267.042 35.3442 251.202 cv
31.8162 248.97 30.6643 248.178 29.5122 247.17 cv
28.4321 246.162 26.2002 244.362 26.2002 244.362 cv
26.2002 244.362 26.8481 247.962 29.0803 250.842 cv
31.3123 253.722 36.5684 261.138 39.8083 264.09 cv
42.9763 267.114 51.9043 279.426 53.6323 283.818 cv
71.488 331.122 23.4644 329.826 29.9443 313.266 cv
30.9521 310.674 34.1204 309.234 36.9282 309.378 cv
42.2563 309.522 43.8403 317.946 38.3682 317.946 cv
36.4963 317.946 34.9124 316.434 34.9124 314.634 cv
34.9124 313.482 35.4883 312.474 36.3523 311.898 cv
32.1042 310.89 30.3762 318.522 35.2002 319.962 cv
43.8403 322.626 52.7683 316.794 53.8481 307.362 cv
54.6401 300.162 53.4163 294.258 52.2642 287.418 cv
52.4802 291.162 49.0962 301.962 44.4163 299.01 cv
43.6243 298.506 43.2642 297.714 43.2642 296.922 cv
42.5442 297.57 41.4644 298.362 40.3123 298.65 cv
36.6401 299.658 35.2722 298.506 32.1042 297.138 cv
32.1042 297.138 35.9922 298.578 37.4321 296.994 cv
38.8723 295.41 38.0803 292.314 41.0322 290.874 cv
43.9124 289.434 46.3604 289.218 46.5762 285.978 cv
46.7922 282.738 45.5684 277.194 42.4722 272.226 cv
37.0723 263.802 26.4883 255.018 23.2483 245.586 cv
13.2402 216.21 27.3523 198.57 38.6563 174.162 cv
39.3042 172.65 39.3042 171.57 37.2163 172.218 cv
35.1282 172.938 30.5203 174.594 27.7122 176.898 cv
23.5361 180.498 22.6003 180.426 20.1523 185.25 cv
20.1523 185.25 18.7122 182.802 19.2883 180.93 cv
19.7922 179.058 20.5842 177.834 20.5842 177.834 cv
20.5842 177.834 16.6963 180.57 14.6082 180.354 cv
12.4482 180.138 10.8643 180.57 10.7922 179.49 cv
10.6482 178.338 10.4321 177.69 11.8003 177.114 cv
13.0962 176.61 13.8162 176.25 13.8162 176.25 cv
13.8162 176.25 10.3604 176.25 8.41626 175.242 cv
1.50415 171.57 5.24829 160.77 11.5842 163.074 cv
13.8162 163.938 15.1123 165.738 14.8242 168.114 cv
14.8242 168.114 13.8882 166.026 12.8083 165.45 cv
11.6563 164.874 10.2163 164.226 9.13623 165.234 cv
7.98413 166.242 7.69629 167.106 7.69629 167.106 cv
9.35229 164.298 10.8643 167.97 10.3604 169.914 cv
9.92822 171.426 11.0083 173.37 13.0242 173.802 cv
15.0403 174.234 18.2803 174.882 21.3042 174.666 cv
24.2563 174.45 30.0881 172.938 30.0881 172.938 cv
30.0881 172.938 26.2002 173.226 24.0403 171.426 cv
21.5203 169.338 21.0881 164.442 18.0642 163.434 cv
17.3442 163.218 20.9443 163.866 23.0322 165.666 cv
25.1921 167.466 24.4722 168.69 28.9363 169.194 cv
37.5762 170.274 47.0083 162.93 46.4321 153.498 cv
46.1443 147.954 46.7202 143.13 46.4321 141.474 cv
46.2163 139.818 43.4802 146.73 42.5442 149.466 cv
40.8162 154.794 34.7683 156.018 35.8481 152.202 cv
36.2083 150.906 36.8562 149.466 36.8562 149.466 cv
36.8562 149.466 33.5442 151.41 31.6724 150.834 cv
29.7283 150.258 29.5122 150.186 28.0723 148.242 cv
26.6323 146.37 25.1921 145.578 24.0403 145.578 cv
22.9602 145.578 24.4001 145.146 28.6482 145.794 cv
32.8962 146.514 35.4163 148.746 38.2244 145.938 cv
41.0322 143.13 42.9043 139.674 42.9043 139.674 cv
40.8882 141.834 36.8562 142.842 34.6243 140.466 cv
33.5442 139.242 34.5522 141.258 37.6482 139.602 cv
40.8162 137.874 46.2163 134.994 44.9202 129.954 cv
41.7522 118.146 25.6963 106.554 14.4644 110.082 cv
3.01636 113.682 1.86426 129.45 7.48022 136.362 cv
9.8562 139.314 13.4563 141.402 17.9202 139.602 cv
22.3123 137.802 22.9602 133.194 21.3762 130.53 cv
19.6482 127.578 15.1843 125.994 13.0962 128.514 cv
11.6563 130.314 12.2322 133.194 15.1123 133.194 cv
15.3284 133.122 li
14.1042 132.978 13.1682 131.97 13.1682 130.746 cv
13.1682 129.45 14.2483 128.37 15.5442 128.37 cv
17.4883 128.37 19.4321 130.602 18.7122 132.546 cv
ef
561.232 132.546 mo
561.736 133.914 563.32 134.994 565.408 134.562 cv
570.592 133.41 568.72 126.282 564.4 125.274 cv
554.752 123.114 551.224 137.73 561.304 141.546 cv
575.92 147.09 584.704 128.442 577.216 117.138 cv
568.216 103.674 547.984 104.538 536.752 115.05 cv
533.368 118.146 531.496 120.378 528.256 119.73 cv
523.936 118.866 516.952 115.914 515.512 111.162 cv
514.864 108.93 515.296 107.13 512.56 105.474 cv
509.752 103.746 508.6 103.458 508.6 103.458 cv
515.44 107.562 509.969 111.522 514.072 115.842 cv
516.304 118.146 518.752 118.938 518.752 118.938 cv
518.752 118.938 517.96 118.722 517.024 119.154 cv
516.016 119.586 515.656 120.378 516.88 121.026 cv
518.104 121.746 520.12 122.61 521.704 122.178 cv
523.216 121.746 525.808 122.034 525.808 122.034 cv
525.808 122.034 522.208 122.754 521.56 123.762 cv
520.912 124.77 519.976 126.066 519.976 126.066 cv
519.976 126.066 521.344 124.842 522.568 125.058 cv
525.736 125.634 528.616 127.578 531.784 125.202 cv
534.016 123.546 534.016 123.546 534.016 123.546 cv
528.328 130.242 531.784 130.89 530.128 137.874 cv
529.264 141.69 528.328 146.226 524.368 147.594 cv
520.336 148.962 519.688 148.818 519.688 148.818 cv
519.688 148.818 521.56 150.69 523.648 150.402 cv
525.808 150.042 527.464 149.25 527.464 149.25 cv
527.464 149.25 526.816 152.634 524.152 154.722 cv
521.416 156.882 518.752 158.394 517.456 158.394 cv
516.088 158.394 516.088 158.394 516.088 158.394 cv
516.088 158.394 517.672 160.05 519.328 160.194 cv
520.984 160.338 521.2 160.41 521.2 160.41 cv
521.2 160.41 519.184 161.994 517.096 162.426 cv
515.008 162.858 513.856 162.786 514.432 163.002 cv
515.008 163.218 516.304 163.794 518.68 163.866 cv
520.984 164.01 521.776 163.65 522.424 162.858 cv
523.144 162.066 523.36 164.082 523.792 165.306 cv
524.224 166.53 525.16 167.538 525.376 165.234 cv
525.592 162.858 526.672 155.658 527.464 154.506 cv
528.256 153.426 529.912 154.434 530.272 156.378 cv
530.416 157.17 530.416 159.402 530.488 161.994 cv
530.632 169.914 545.824 216.642 532.504 220.17 cv
530.344 220.746 529.48 220.098 529.48 220.098 cv
531.928 218.874 528.832 214.626 526.6 216.066 cv
519.472 220.674 534.808 238.17 540.424 211.818 cv
540.424 211.818 540.712 213.474 542.08 213.906 cv
543.448 214.41 545.104 214.626 545.104 214.626 cv
545.104 214.626 543.736 213.834 542.944 211.674 cv
542.512 210.45 539.92 199.29 539.992 199.362 cv
540.64 200.01 542.08 202.458 544.312 201.666 cv
546.544 200.874 547.624 199.866 547.624 199.866 cv
547.624 199.866 545.896 200.37 543.88 198.57 cv
538.984 194.178 536.32 182.946 534.664 176.754 cv
533.872 173.874 532.72 167.106 532.72 164.514 cv
532.72 161.994 532.936 160.554 532.936 160.554 cv
532.936 160.554 536.536 169.698 538.048 173.802 cv
544.528 190.938 570.232 222.33 551.584 241.05 cv
547.552 245.082 543.808 247.89 540.424 248.97 cv
524.8 253.866 519.688 236.514 530.272 233.202 cv
532.792 232.482 535.312 232.122 536.104 235.362 cv
535.456 234.93 534.736 234.714 533.872 234.714 cv
531.496 234.714 529.552 236.658 529.552 239.034 cv
529.552 242.49 533.08 244.362 536.248 243.138 cv
543.016 240.618 541.216 231.402 534.808 230.322 cv
511.984 226.578 519.256 267.042 544.672 251.202 cv
548.128 248.97 549.352 248.178 550.432 247.17 cv
551.584 246.162 553.816 244.362 553.816 244.362 cv
553.816 244.362 553.096 247.962 550.864 250.842 cv
548.632 253.722 543.448 261.138 540.208 264.09 cv
536.969 267.114 528.04 279.426 526.384 283.818 cv
508.456 331.122 556.48 329.826 550 313.266 cv
548.992 310.674 545.824 309.234 543.088 309.378 cv
537.688 309.522 536.104 317.946 541.576 317.946 cv
543.448 317.946 545.032 316.434 545.032 314.634 cv
545.032 313.482 544.456 312.474 543.592 311.898 cv
547.84 310.89 549.64 318.522 544.744 319.962 cv
536.176 322.626 527.248 316.794 526.096 307.362 cv
525.304 300.162 526.528 294.258 527.68 287.418 cv
527.464 291.162 530.848 301.962 535.528 299.01 cv
536.32 298.506 536.68 297.714 536.68 296.922 cv
537.4 297.57 538.48 298.362 539.632 298.65 cv
543.304 299.658 544.672 298.506 547.84 297.138 cv
547.84 297.138 543.952 298.578 542.512 296.994 cv
541.072 295.41 541.864 292.314 538.984 290.874 cv
536.032 289.434 533.584 289.218 533.368 285.978 cv
533.152 282.738 534.376 277.194 537.472 272.226 cv
542.872 263.802 553.456 255.018 556.696 245.586 cv
566.704 216.21 552.592 198.57 541.288 174.162 cv
540.64 172.65 540.64 171.57 542.728 172.218 cv
544.888 172.938 549.424 174.594 552.232 176.898 cv
556.48 180.498 557.344 180.426 559.792 185.25 cv
559.792 185.25 561.232 182.802 560.728 180.93 cv
560.152 179.058 559.36 177.834 559.36 177.834 cv
559.36 177.834 563.248 180.57 565.408 180.354 cv
567.496 180.138 569.08 180.57 569.152 179.49 cv
569.296 178.338 569.512 177.69 568.144 177.114 cv
566.848 176.61 566.128 176.25 566.128 176.25 cv
566.128 176.25 569.584 176.25 571.528 175.242 cv
578.512 171.57 574.696 160.77 568.36 163.074 cv
566.128 163.938 564.832 165.738 565.12 168.114 cv
565.12 168.114 566.056 166.026 567.136 165.45 cv
568.288 164.874 569.728 164.226 570.808 165.234 cv
571.96 166.242 572.32 167.106 572.32 167.106 cv
570.592 164.298 569.08 167.97 569.584 169.914 cv
570.088 171.426 568.936 173.37 566.92 173.802 cv
564.904 174.234 561.664 174.882 558.712 174.666 cv
555.688 174.45 549.856 172.938 549.856 172.938 cv
549.856 172.938 553.816 173.226 555.904 171.426 cv
558.424 169.338 558.856 164.442 561.952 163.434 cv
562.6 163.218 559 163.866 556.912 165.666 cv
554.752 167.466 555.472 168.69 551.008 169.194 cv
542.368 170.274 532.936 162.93 533.512 153.498 cv
533.8 147.954 533.296 143.13 533.512 141.474 cv
533.728 139.818 536.464 146.73 537.4 149.466 cv
539.128 154.794 545.176 156.018 544.096 152.202 cv
543.736 150.906 543.088 149.466 543.088 149.466 cv
543.088 149.466 546.4 151.41 548.344 150.834 cv
550.216 150.258 550.432 150.186 551.872 148.242 cv
553.312 146.37 554.752 145.578 555.904 145.578 cv
556.984 145.578 555.544 145.146 551.296 145.794 cv
547.12 146.514 544.528 148.746 541.72 145.938 cv
538.984 143.13 537.04 139.674 537.04 139.674 cv
539.056 141.834 543.16 142.842 545.32 140.466 cv
546.4 139.242 545.392 141.258 542.296 139.602 cv
539.2 137.874 533.728 134.994 535.024 129.954 cv
538.192 118.146 554.248 106.554 565.48 110.082 cv
576.928 113.682 578.08 129.45 572.464 136.362 cv
570.088 139.314 566.488 141.402 562.024 139.602 cv
557.632 137.802 556.984 133.194 558.568 130.53 cv
560.296 127.578 564.76 125.994 566.848 128.514 cv
568.288 130.314 567.784 133.194 564.832 133.194 cv
564.688 133.122 li
565.84 132.978 566.776 131.97 566.776 130.746 cv
566.776 129.45 565.696 128.37 564.4 128.37 cv
562.528 128.37 560.512 130.602 561.232 132.546 cv
ef
290.584 177.906 mo
289.504 179.346 289.864 181.362 291.304 182.442 cv
292.816 183.45 294.832 183.09 295.84 181.65 cv
296.92 180.21 296.56 178.194 295.12 177.114 cv
293.68 176.106 291.664 176.394 290.584 177.906 cv
ef
290.728 181.074 mo
290.944 181.29 291.16 181.506 291.376 181.722 cv
292.672 182.586 294.472 182.298 295.336 181.074 cv
296.056 180.066 296.056 178.77 295.408 177.834 cv
295.48 178.41 295.48 179.346 294.976 179.634 cv
294.184 180.21 293.392 180.21 293.176 179.85 cv
292.888 179.418 292.528 179.85 292.6 180.426 cv
292.672 181.074 291.736 181.65 291.376 181.002 cv
291.232 180.498 290.944 180.714 290.728 181.074 cv
0 0 0 0 cmyk
ef
290.656 176.898 mo
290.296 174.738 286.408 174.666 285.328 174.378 cv
284.752 174.162 284.752 175.53 285.544 176.034 cv
286.408 176.538 285.04 175.674 284.104 175.746 cv
283.168 175.89 282.376 176.394 282.376 176.394 cv
282.376 176.394 282.736 177.546 283.816 177.978 cv
284.824 178.41 285.4 178.41 285.4 178.41 cv
284.536 178.338 283.96 179.346 283.096 179.49 cv
283.096 179.49 284.032 179.706 284.752 180.354 cv
287.056 181.938 288.496 181.722 289.432 180.498 cv
289.288 179.49 289.432 178.41 290.08 177.546 cv
290.296 177.258 290.44 177.114 290.656 176.898 cv
0 0 0 1 cmyk
ef
291.088 176.61 mo
288.712 175.674 290.296 171.642 290.44 170.49 cv
290.512 169.914 291.736 170.418 291.88 171.354 cv
292.024 172.29 291.736 170.706 292.24 169.842 cv
292.744 168.978 293.464 168.474 293.464 168.474 cv
293.464 168.474 294.4 169.266 294.4 170.418 cv
294.328 171.57 294.184 172.146 294.184 172.146 cv
294.472 171.21 295.552 171.066 296.056 170.346 cv
296.056 170.346 295.912 171.282 296.2 172.29 cv
296.704 174.594 296.272 175.89 295.12 176.394 cv
293.824 175.674 292.24 175.746 291.088 176.61 cv
ef
289.648 181.146 mo
287.56 180.858 286.048 184.386 285.472 185.178 cv
285.04 185.682 286.336 186.186 287.128 185.61 cv
287.848 185.034 286.552 185.97 286.264 186.906 cv
286.048 187.914 286.192 188.85 286.192 188.85 cv
286.192 188.85 287.488 188.85 288.208 188.058 cv
289 187.194 289.288 186.69 289.288 186.69 cv
288.856 187.482 289.504 188.418 289.36 189.21 cv
289.36 189.21 289.936 188.49 290.8 187.986 cv
293.176 186.402 293.464 184.962 292.6 183.594 cv
292.024 183.45 291.448 183.234 291.016 182.874 cv
290.368 182.442 289.936 181.866 289.648 181.146 cv
ef
296.776 181.218 mo
298.936 180.93 300.232 184.53 300.88 185.466 cv
301.168 185.97 299.872 186.402 299.152 185.754 cv
298.432 185.178 299.728 186.186 299.944 187.122 cv
300.16 188.058 299.944 188.994 299.944 188.994 cv
299.944 188.994 298.648 188.994 297.928 188.13 cv
297.208 187.266 296.992 186.762 296.992 186.762 cv
297.352 187.554 296.632 188.418 296.776 189.282 cv
296.776 189.282 296.2 188.562 295.408 187.914 cv
293.104 186.33 292.816 184.89 293.68 183.594 cv
294.76 183.45 295.696 182.946 296.344 182.01 cv
296.56 181.794 296.704 181.506 296.776 181.218 cv
ef
297.064 180.354 mo
298.72 182.802 302.104 179.49 303.112 178.914 cv
303.616 178.554 302.68 177.618 301.744 177.906 cv
300.808 178.122 302.392 177.762 302.968 176.97 cv
303.616 176.178 303.832 175.314 303.832 175.314 cv
303.832 175.314 302.68 174.738 301.672 175.242 cv
300.592 175.674 300.16 176.106 300.16 176.106 cv
300.88 175.458 300.592 174.378 301.096 173.658 cv
301.096 173.658 300.232 174.162 299.224 174.306 cv
296.848 174.738 295.912 175.674 295.84 176.97 cv
296.776 177.834 297.208 179.13 297.064 180.354 cv
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 11.0.0
%%For: (pingwin pingwin) (home)
%%Title: (Grapes [Converted].eps)
%%CreationDate: 4/2/2015 8:34 AM
%AI9_DataStream
%Gb!R&D/UcCE@#oq$^grZi'J7.]bXV9<L&gqJ!)57X'JmI8?u;)Y9@l;S/JKNAqS?G\c(i4SqqG3o6DC_]>p4<_SVVg:GAh!?Qp`T
%p#Pk^s0IK)Y@$,"roRi(s7VY_Pg=BqBBqaReQflahY4eb?Z(@AoCf--H/7)0L?D4`Qe&`Fk.S2n[e">c$.&SJiVMC/c0M8\+!7Y(
%hS-[J\9iIJqie@Yh-F=dU&Fqf^K?!cpU>?*J,f"_J+[nac6jj^^UJsto_.R>S"H5(^IeIElg)0,YAV'jcelD3`I7X\>PlV;Hi*?&
%S#<18_=e'0qSb\uO8h+eq'Tg=rEhV__8#pEk*t,7:QJRQ[h#\BonR5ZdpEghmVd"">koJqqqA*t^A[Tgk;QaT]t8X^%\<8nm@R0=
%4Mr]K^U%:\!TgFH<SF@V4[-i?mJgo4oRB(tq#B4;oO%B;5+Bk6s3?s<rZ'h:hOmPTbM)rcq*7":!$;)iFV<0ugRJ(!G?7R![ZYpn
%cBe/Jri_ctAatJGc;U<<YLE<q<k0"G=m,%^D#;N?IA(T9hqn;$-YNJ@k3CLA,M2^gO&*O$rV*adlb8t@-'S8mGBZ!,s7H0]M$s%+
%?gPK.s7l*Kk"[a[r9s*WYcQldfRL6HDm(4s\TqpPqJc0=$h0@d3pCRtI!:'cp#5%QprKYqgq<XR_`q?qIoMa0CgVU!p<psmQ*X`n
%'B&"]jn)/-O/M[-%?'dgA&)G7hL9PCqBtR\pA9>a]RA>@Em&+Gs3!HQ?AJRIq@EJU7f;n#o9ucYGHY@Z4PXG$_=6@^=l\AjNOA3r
%^>WGr&,TT.k.<S=XV$$^bD5f,m;)@TMspVms&OXLjk[QBa+&>]Gk^>:YJ5P]id3obl)TTCDU,u/HMY'ee!nsmhZ!#'2#hj`O#6.`
%m<]GkYAW7qnC+Rg\p8]%X4R@=a*2I:4o=Wa_d0pI%JZjr9Nuppk&W^!NM$)5qr<1kjVM!BGIQHl?G61.pA2>o5P+XEcjS0Kc=_WJ
%D%lNr(D$N[+$4o1j57ZUI!tn'D:l2P]XrU'kp(MaIfl["p7$!(hLLQNIm:=<SGkIXg#W#ak=5E^fC*YG*o>[oH;Lcu#QO\Oj."A`
%S.G@$4l"l-^$g"t:u^B)o;]7Z*f'19ch>+\j+$stlgNSG)gBblIe:a1p)eQlpV0"95(0rY3VVS6pA3a/YO0rp:Kjt%Ka6&@rp]9p
%^V%.m3W#;sju9bD[,49Hl0MLHYOVD`h%_?Q(0P:hmsYU9r;(qNs0_gkIl5q%c^(ne4StIpS^(PidJh^g[26MkhtuuEp&")o^\H[=
%O'?ht&*nQ]n'LZ%:ViB!G>1]dGc/:RlF:oUkI(9QGQ3[p3;UOZf3`pobFeH'`f%UdFC2J#*_c+g\@fq5E-9XjIrkn6X8Xd"gWPVV
%07ADBf&?MtX/ED7huEY970!SNkNt-=kN_R>$,?AXb?q\&epmYVs*hrLNK8P[e@tFsfan)LrpFoEnK[t`lc*-n"ET"kpWkdCIs(K\
%/bZLms.Xr:i9sG`hWW9MrorJ'eaqV,^NmD:eOK&+kXG=YpYu/%j6bAuG>KUCrmgZ%YG3?B]BA3mH`QINDsq!qhRlmi@u_V![Zg1M
%p8`C5kjI@'hu;cK62fm3'dP+!b[4b[^Ve]a3f_6EUUNJ_IpTngrUme3:Cm2Lqa0VRlhN3<//lZPb@?%uansC(BB.@JJ)-m<;#]T5
%3V>V^)f6W70E9I4kE?SReZE!Gl*#6d`kadX,'ORLJ%0ds)$><cnG9!WpkoY\KD>'0`cmOaJ,T9/o4RE')W#rAa1ptTqY'@NqZ!Xl
%e40)"LNeg22s)=^.j!JCcTcfgVr?P2nZQl6mf(A;_M8p;cVG'Emb>Lr;>o8@U\a]Hp7#tb6PV6&HCen$J!FNm+J'P1+)bLLIJ`:!
%XkS<=02)/B*$<5jh!i%(G\YCbjiuCQmNqf?-9_7rcQ4/,g4ji5Nk_a7]:Ep@VjuRmg10GE2iPR_@\ej%q9r]HF;E.<o>.&)?G6@#
%h:4GCB4!j8H2$HgZgET&+)g#m4MJQjqsDYC4e;Q-X4sPQYAWfHT-W::]$>)=@R%JNI/<-elLEEX[7-h<fjgtBT5=AKj%TsZPE!?B
%m'>b"f9b7STb!c33qhNrNP@O)#u94qnMD.H4^PgNqrXn1o(@e3`S4I,Df>[SVD">!Im8:$p#bDArUp0GSTth#AtC?+=L@qT];IUV
%T$De5p%IY4nb1j'o%,*]lJd-Zcp-C"rUs0N9F&3Qc8rRSc*!XUgA#U1:A];%5J1lg`'`kJ2fNP**;muEhRpFJG<^KH?O+^B*4I]g
%eE4Z9o''tt^Q*N[_Wbr2TG?+d"L$\;Sf`1PlL+B51%"u*m2n1DEFchpH8X>C5Q/RS:Z";u`&n5c9Z+T6cG#=A5?brH]t_+,C+T#-
%e_SdAlXs8ti0cKIGIObocCW`*r62$VT,o*R&7Qfrd/*V,p.]$ppmV2aD3AfK*ra)&D^5i7hVUH0J]kOGSi/sf&!*o3?9PVAB0ZCW
%_p`i,Hfp,*G<tu`a&e=?ceWkgU9L8s]6aGPiMhmZ=7E#N7ecWDOj#q)q<mqKVqSLFYO.6LT?$-Te,T.(HoNdOH[fi$nE/95:UPHE
%a`guS*/Uem(1<(s[!6iO(uWO3m,O^Jdt)j?&j=jR8`(a!1f#b]I6;5TXj=I=ggna:_&I$=:U!*"e\oa1_a+tY\,@(V"ui0!j'BM+
%]K/6ZO'8qOHnndN`uEiEHbMY)hp40-IIg/Hq!X9iY+o$)h-t/7QnS+2k5EQ\7m?Y>l_j?`n%O,FZ/MD$X1L<O?U&X@nm%Noh0i4L
%Ua%u`n_`.%iV`]?nIKO[^Adua(#mPXs#?B2T@*T$iQ^OE^2%J/T8".c2plX:lD3U8d=1HXB/K'?s,=sQ4[8$11cAY&X/j:%Z9&sg
%%RJK<[=-Mge(`J]5CE%^O5k2NDe#P>U[u.43:'^*?fMP8c,JiL[^H*A%pqKU52DcUO%qcNLXt(dG9>Y\B_`DugeTdg4D17$G5_4$
%r2D.2TqFQXX3g(tp%@X3DGb?Ek3cF4+?_CN]\V,oc2%7_D><M=fFZ:K*l!Q@IC,-no\;0O2K'YnhL:(@d&\huRr9Ais8<VU*Zf6h
%CAKA3^:nqV%o):=U_\ERZ-LlY%o4;%8SC.U_WSJ4Z0%r@$8hSDp?DSAc,ju%;KEf"eQ[OgF4rg*K&rcd=7jjg[,n?X\$t8-roC`,
%H1Q8uB%BI4#Hb^W'(5/37n'>`qr;=t4)gsCjE7(10<Nd/I)p&-o<V>q27uA<l/A>@f'PTOO$>=i)C^*?Gs=/MU[`;<e0U[S0D>?P
%`n#Q$T3lCqcJ#U>95F.Ao3sm15?k270Ho::h6GY&2m5F9;7,@RHc)1Wg"Kj"hE;g!3,+>2EV"G=H2M=dr.-OdL.&-+^<qu.],NQD
%#&F'R_teofWh6<a)%<t:%.7be\!ONV^3B8B.<4k0eB5h@2gF6?7u!##DuXeRV?ti*J,#ffKJLq#_Dff%o"RA9KoEW`N8:D\>5d9D
%^H)2AZ-@XRLLHrNf\]6_7&lo*bs(QPiFDoWGkDCkMEU+9R26=&Gf\\N5Q5<i-N*4!DZ[OHkJ2!@9C0Ve^Nn4Zi9`/T41LsPi7A4J
%K?s)Ti"[>TkbQT6pA1Jp)pW>.S'(kgH!eZl"rsrINcNL.P'iFFD!BB>4.(aJmVP0]:!VjC"^qK.nuFFXpOiK+kO_"%F`.4.m6C!#
%+.ccP[Z/\#r]-&85Q0U)D53U`q"scX1ZF'mo%*)]^&Pi;Y+ar@rpGhSI.,lWb%,$M?@?-tA?t"3][ubFQZT[cdKFehBD5/k9?g4*
%W1;N7o2;[CHG65_T:o!81+@@fB@hC4SCb.c%KDplja:?4[25rLac2J0QSS#!8^$*hV=Q_/iMlX#fs2:>]P^1f[2NI'p<Yp=k@H7:
%fs:"I,PupJVu8_2XjP]<VtR5QDs)24)l64l*]uBJo-pF:9065'?I+S9\+WI$chFgVBl<s<lI<h>B(#^@9Wc3J)u27#+4T*FYtscc
%EuXg6[<K%c4Q#<[ri)HClakj7[`k^d4e>PCB=TSVWDrb$ShZR93a_"iI7c4C>?dJo2-S`SUkC%-Xgcm)db9qb%<&90gUs7Pp3rd'
%Gre_9?YdR6<_UBs9*/t(Zn]g>p!,1,^20BW2QOT78X%I`QED@q]&5@MiFO^\A8O<0f$4/@gG*oqH0ZWndKg_mk1*\tVKNg"@!'Ct
%[cWM"AtYcmg2PcG\'HYn7>q-,Ub6M4N+LYfH,F<Y0?cP\kKD^/'cjM9#-6IZJmu'$TA0.H7U57gZWWW`C_>fDnH!RI.#j&s(U((o
%AoYr)(C]7_S&T#GTRHL8dX'E_mZZ)1:a^V?mdHYb6_nF1Xg1_g-d:ahb$5(sb'BC5hdb-B[7Qc:jsF3'r@HXTV!e4EB\pY89M;dK
%QH$mg%CXZ%1X`.tE3%Qd[E$@sF-MjG[r&Ci-e!sD3Y:dX5%>"^[4Ti1T%M`6Ab+ei)WuD%N<7,[m+\rK"$iB`A+G#f.^nT0Q=OcL
%*Q-7uZ;mNW78r$nGV.dr#LWfls0+)b@JLk]2W_?)YC/\qQe=;ehC&?DZF';[3D3pY0stP'P>N1e^1.]'Cu&nHKmP#O290B/S%LM_
%RnXkR@'.Q4%lTf7EbQ0(=K?kjH.jT,qZ8Ubh^>ET[PK]gD*o9BJ<ADG\J1F@i3P5]](l>HBqnBL4D*Kg&1>1?,:>FED,BR!'AT85
%>V%nIg^Qj*\sD&lpiEdf61o)Ph`_992TaV/OLJVPp<*]da(h_/(eec27Jcs(N>dStq4Q-p65f6\2@Qcfg1',[PAnH#!,6!Q#oR5N
%Xt>B"/_`pfM6F"o!qu05W4,sjZ+]NGPGon((R%=*Qkrl(6K-SrC@g+Zl$W0c[#I,!A#^P!`VImsGbN?tHJj;cgUD$Q*RtAS>A\(i
%3\?ljA`J%$7(M%t'Foh.h)Qe>Wtd/AABnBR>iRkLN[7cia5!&(gMFj`T,*7&G+=tZ^g,/I0ll;8gZQSPeJ_:gXF@C*ik)NkKPa,(
%D"mA*=jl#@^71I4>+9=k<A*!X?[H/ICsru9mkdrfQ?hMZ[UIn;de8H=2CBMCg;W7\jL7k'\r]:KPjtm3-HpXIDYqQ%Uh0!WK^#ks
%Du7Pp=XG2T1IngtG$&.CNDFD>G+OV/H#8nUrTsIbcWXC*H>FP2XbD`<&'gC`EDiHt01V5U^-JeN'LD)jIBcV.Bb,g]d02_#NAL,t
%5/<(M-*Zpa3Z0cJQj0&,Uj8@R3gMBH(<QkU-mVMK9_l5anfd%pF`CS1QC?Ybn!(&*%YLBc$>\\&N<6&$&ngtC(;3;uKcTnh-go'q
%)Q'C&nB-Hi&/7k2Be<:O)[eN@ZQ699eJUS;%7:rc1#hag@9Z*c=P'G#Utn!R2,1tJ@;Son[W-&Vgf+MTCbm=b*ii/(d$bTcL\5,!
%To@UXnHFMa9N/\><%>!;g1ICBOF267O4pKs[*@-Jd2'Nnb'WTG8`I1RI6R-Y3tg+f<44FIp5.?/&nM4k@=qnGZdcZiS,uFO>^BK<
%?s3*T)eN/5)TV^Wf$H:6[4Ril(V4F1ctI9:+>=EFg?*G09RfQ^S+O"(Y3k_uOl,e9fCRSeBcgt$k[dEd(t;qeA5+[)n<h>-"ALr;
%r4o>,V\j%-\HiLO><Fd2j+;L<To2[QPK"</VAQn782(%:&N"e"B5PM_Jg/lC==AFX7,(GE4F!4[%nr=*fFlQ>S28LgenJW>bZB-E
%jqtPIS1A<-qFd%PSH!a4plSe%LO@Z!IadZNF,eiE:)krcL5f\dm[posNM""Mf$C2[A&n[\Qo86VmDI1o1H60b>6,5NQj5:N/HUgq
%G3riqPDt?F8sX5ics*pRCKmmob8LJNiRR"P.HSQKfdB+0Ls^<T1jNX>)MkUjk2IE<';r0n$oc;^DMpMmEm0hcWP0`F_nYT+a4?gV
%8k=5+$JXKTY@.2L%dc)Z=79:,mrgR.XY.mQig!"R('@nG_)kq7mg;OC-Z!nl&@'?r(ReLib$*Ksr()O!r3EHMYP:H=&Uo6eDDoZj
%28.2X^WHX2D8lO^5]NVaS7(PI1cFK?nQ)Um2)_q-aL9/Zm2lNJ(*hA_Xm;js@b\Wk2jm@A]<bQg)s$eBe10mQ<O4r6_Y;6TK>G=W
%U`^CX;hs"V@WkTcD-2jDS*UY1DWF(989[fc]6S,2M9-r<N6e/MRpjJho^fJI-X3*O(:9XK;r=S,N*r%(b.,P]cU>Ad'4>md\k3J*
%h0KKeC"Q-/ZrbpqQq]^lKck\C+nK+oJDqeg6Hj7D;#JCQdb_pr[6NkZW6#:6:C+4:0XR%3r\VX^XKh4o8s?-Uq=8H%r0sp6Iabmf
%W*NYT#d.k\d^0Jq>dDL_L\,`8##tHTofL5uS%LYQ[QGZlHfLWH!!L9CWcll2Q_L*0FF*5jT[Zj1#Jml<4.2%GY5L@^+I^U:gB&^j
%CKcF.>,>ZMBX\N?jMH/GD&OLWZjKXHOLF35g)m+kR(3d9b#;0JVH#N_P>3G2nR-\_h)26m/2_//iX2]`\8QTOYrucq83;lg-AZIs
%JGF@,i@Ds1g/do)D1(dW<BH/p;:;t-^*1/3"E'\P)aWq)gZ0^Xcq!h'Zql3"fPf@IiKf,1#YJ6$QPMK":jeIZ6FS#Mk9nbShbijm
%c7OU=;u:br!D;<-3:bFQ4NUfZSH2L/M.[(36!,CdmK0Q.@,&a31WdR2fa]>WPALF!G0bV$J7+6t..5Q7.V=jBIFae7PgGhRS7KZk
%/S/rD>mb5/nZMPkZ"*L6cpWGa\7Y3:6c7DCfO1S$/F=jiJ(ShJ9k+qcC96B59e`.'W9W"rCqd[]C<[H!]:Y'j.#>%'eYJ&7ZKN]V
%pOj,PRdC`4NT/+a05m]BB^<4)dPRi>8V*MO%ViLTar0QcG`S@53D2l4>\rT3@`CIp7%\56VSik9s-Y^@EF_CU'nf4dBXB[XF_:RP
%gLP=F@86>2T!8d,=MWV9n(a-1>@A(Om"@s<66As:CR",-[DETgdq9p>C/)(D1)qje*o,GF[S(IYY&N3I=i!6T,`8SNm:0pO+gs:-
%E6J4n+'0]R>5porfa9g`I#it".s,otT(!>]7CL(R:ee<KAmts$b]7S+Ye:_RT5L+%CL^V+X.b;12b%Roqu_gng5I91FSRrMZro=H
%5@rHD(n8jYkr$J`/"Dp;3G7Qc?HjGS-NG,LhTa_R5IbZkX^JG:^N!0JRjf?%V^%CCVG7YWJnsap%>TdWPLW?!IBNF.BA3(CPg;sK
%OY9tu)aOc8BVBJY7%5]#Mt6pThfp4_=(j+fm?""8T'ck\9Nul4F6nhlo@K:MV&pHN1.hJ]SHlOuP"k0eB\<RVg6gW*N"P=R_Y^F$
%GJiQXo4mgu>L:=;g6?8t#J/@WWGP/pOte2iZ5\p#n@7c1G.\h/fRpV5Pk%qZ[Cq)74e%!,&RZ8_Vcr)]:#*!ubTnAjQq9M(fN+X.
%VSge#eKb3!S8)R?4_&K#e<#[(KB>R79&"f4;D)kK?lnF`ME/9fS-bQf\fc0:i^+ICH_3aaf*b<-%)4*Ih/s&f)NPe(K4m;#<Wt+J
%VYI<Jee;_;F25h(Vi<R0.Cj>[GFgCG2:fWP)I(oeYsQ4KC1i#Sdd@<"M"Z"B>+*rbk6DR.BPkej#s]J8cG>cPZ1gB<WfcX9_)s_N
%\$]I#>'^lKZ?=%nRh!$t;s<$ano9tse^#%Zch9\8!'_ImZADn.TWHBno5OPnKb&U-dR%g\g_J0?ALhpq/]@ooIEb$p!-(?-E1'`=
%B4oP-mmcm1&dDY\k>#aGi"R1E:q5mdK,Xsi)\QXsYW<@i@BAV"8;_jmTo1MOPtE'IFA_h<"n'\(TeI'kDjjp9^uD[`JCDLB$&[&)
%P<Cg<@JR\\'K.'n%hlA1]X"-3hEa-7.'q>oc$N_Vl"1WB5L8)"D&u5h)-*W6?.'0[NCf+60*fg!4+Q6^a$aS1#>@YZfOX_$Y>*KN
%_r^jT>(ZHXrjPRtTm_'&O=a^tf$*ch]>=/jO1Hcr'AXu<1)X`bqn\DGmC0quOkbc0OPEHj7g(Un'b'LhN!*M+i;puXm4.lEc#u'd
%0Y603h&"t<2l`l305Tt32^1RU1BUJq>M.&tN8;^ih!ntE+ht#Wccut]QdQmdG,3>TW$\RW^FZn!F"9-d@,*J(q(tBjn16sUU)S8"
%68F00m?FIA_mD)`4XaJTnu*U6c'`Qd\3P5:3I.Cg^!K"E`AemXMch3rGl4M2L8HBW_0.ZGX/*s]-dPbpA`ABgelYa`CHnAZ1r2d-
%GiS\"C$EW_o0PD7RW='f0n$L7&4d@!1W5*=3:?g6GBp%mrH!4"pY`Ae#[!E!2:uB_>6J,TX<KE1d;SWp(Dd*njY7"D]4m\+fL>q]
%pt+*Q7gak\V@FNTZWqse[LrpCeDAHIg:0SX:1BQl2mZG0DJ\a$M.JE^O3Phk&-C-RMjkORJbdi#Wu51,(=!JRhHU.JTYWk%amN)X
%icI,t7Y-30"=3O_XRSH04GGQO*cI\K0UZ@.Jg4]og"sUr.'Xrn(Gg`PH^uLDGi-$L:gP`.Uf7^afQug;#"TI"&^BqP,L-U`(m-ER
%H>IHg*6QPY6NG72fGYdk/C"[jDMkM_7Gcfu1F$@CI\8kp<09GNUDFU0iR(*q"'df]\1sm`qRju]D'/D`2UNJ(2U$i2+=P+k4ta@S
%[b]a[FHimj(h@[I!Y=_kXYh.RJJq)oiR(m#Xp$IraPi&=8Br_bHbkb\ZL@)KcD>3+?HFDL;3/q<fnC3Qm$*r0BpO[VB8D%028qnm
%Erd=SR,!KnR&*N>!LK,`Tm5:C9akO_d0EeKO:Dh2%#-QK%>s\UI;O*sK&VPn$Vss#;g:$D/"94r2ZPZV6!4qo';(Oikm\("iBc/@
%Z/LFDd7f'4@;uO>q^pQ",#&qbnWcD1cJ/`K8hc*\5Tc4M+5Q5JA@!KU]9T/$-,LYgkKL95o";E],M-F:I%r/jJ5pQd?__i^FEZTY
%Q25aD,U2?df[62p$F'fufb!8ODaYpKcpcD$'\]YUh*E[RD*B8N"HlNBojk[UVlZh%_mV`e2iq-HH=f1]<A'_.LBpWjRIk`\*R,b5
%hune<Ai?UHCqi-V6c.1k>>5!/F.sX/qLjtsk1uQOgL@q:ee?r.j;N6mDJ;_%]BN4ZA?7CB.*k!V9\F.tM/a)+'DFO;K`uqI`ANW=
%Zqt-AfW'jd-P&;2#^S];B)!`:VGB_K]o+lX_r<-ZNY$EHcA\D]Xr_JSCR;*Sl'@=fD-ZdFf77jq15CjOFusB(*\&k@`<lbrR"bn&
%c")VjD1#p!C`YrQIM<]_5paEE7d&G6rA_sLi9mRP\<E';51mob]pdU^D'"f7^bGb(H!1H2)W-7/A(.i4?AY'il9E2KLed`n:5ipA
%\-_m!@j=\VihJ5RS44D8)6YLcE]Q/i3qS8l>ukC\7=g.Z&*(;PC/Qh[1IV$'(kk?G=8+['"TaU-m!47oL/5u&KS</NdrI345uVKg
%Z^Q'U1Yb;J:i]eWBHkQQ6)=po>S0BQKZoijB_n>2Ne;67T2,YbHgEj']('@AP<DKSPM_o[2GG$'TpLQC6$)^QSnLl&1LK@b(&<.H
%QpP");u3ZQ)Y&MVdPlFq,,``YjJnU7jA'1EW^3)AH<k/91dWs1V^'YGn'[o8$^#dCHPb\cm$MdS)>h487!#GrLF!P.iIM&BE#GQQ
%)Dkrc9Dm@QgdCRFle616nL1N:lbuIj23lA1rgX2cH"@%Z45oS/K4[$P,'#_2NdR[/%Lq5N.#`Ob-LX8+j)"X-G(XAGb_r3cb.0es
%(7e_e*FEL"g`WSTNBrt%b8_OlYa(?XSO\c]k`E'*l10H05/KY+>,]+W@3ZM&j@1LKK[[2?[1c?2`!eUEoB&)u)4kKIj];1;Crb`J
%<=m@mC:k!Ya]9'l7-)G`4M5f:[bbO>[))/kMs15[5l?#!(_mQkfrPOX*b*UQA7-Xm+^>A^#0F:%O_L*:4Kp]]?l.O>=;]elYf;r(
%D,/W,TqaQJ#kVQ.dVGelU7&D"Kk4R+`iIZe4m.N5XGTj#X#0jpp^-)?Vu5s\l.Qrm-R-mjEN9>q'Z)mJ)FqCnrXaAC2IqdpGm_l6
%XCUL/-C6U_ON0_J]Wi?cPATiHd7#m5WtB=t4*tTd9X\HLk240PX)/&&RJiVWJLOZK7]%0!>O\$GYS/%4Z^JSJF/HdF%aBe,:LAKf
%a5mB;qsQ3<gO),IEOGU\@>%J$d0Vi'm#l=>Zcq%.\;qP&,d#eKGTPF*[2DVIWl2KrfcC"*+r*MG$PqH$i>_AhnLAbLD6k<s'4Y86
%GK`dD>L`UkkdLB#2\3<fN/c!6[V0ot+1Cp;F28N<-ndmV.Kk.Q]C*sX\ddGu.sJ*8$*C\n@n:Ds\YBW;U=\%4h<8+^`e?'dRjIOe
%`rMqXq\/r-gFR=Wo>C\C:cof(eaO"*r,LW`[S%K8aK*`lKHsE>r7dpF^_(6$4f__di6Lpd?bW(\O@H:IM!`Sa&*[%bYE]\M:g@@1
%Bf1O;N)L92$>b;+^r2_H0ek_UOC`V,#SUitOF5uK:_6@fcWV%fV*TZ&HX#RkL?u8`Lr2-N5kpYeUN*j/;`nFp;lp;5ERWm"\&<?b
%HGOf@B?.]L(aYUBE+7n,0X/oNKaac2SY2,LRORT_i#[#$\%uDmpaAer>=6Lf(4e!g%5bEKZ[%![hnqA(@F:E?d2XhNh:T?"6L(8F
%\Jk:[VDHRd]opQ?##EWFdrnf)OVUS0,cdB9dcUTChZ?<-6Eq^U0=_nC"@m62H7O<eLF0>_2aCS^GK>!J/7-JM3FUQu%Wa,XC[S!,
%ie#$(f#,PlZ\>iJ)c!seLaa6DS1`e'^@:u\B6e-#0PA#t(XC-NNOUb!OukT^U4Ua`O[nRP^e*s6k)MiG#o8_A36NYW'Re2cmHBfA
%`:/D(\ul[+iLX/n@;V<9_-\M0oknGPhIQ142tKd46tklb2\2(ejRipuT9;$do"(pPBG"+G<#Z!/P1P+)5LhbL:SB:/'cgaoDP5D-
%L3*F!]ISji.j"c;Q'JtS&RBH2Pl8rIbj[6V$"^XObe_<2(^tR6'ts8<Q0BV\'9?1f2FP9j,'fF62oKuG/:^X3Y[M,4GKmg+!^p\>
%9Z8X4C-ck:De7!3*u)&9_&:o?iU]H`"7o9%&4IkuHCC8Ld?`?@)GI+&I8TFek.Af7&q#).GZ;fj*-*+h9$E@46?tW8`*CrIO!tYG
%]eo86n@mXZEl&tT.4:%!^b!MNb>jDS!`-C8?K=eL`WG@n]^/6GYtSU'+H&(\K03prn_=a23TU\Gi,dMY#:fhB!<Yq2OoAJUFYV2b
%dgE>,R(LFU7Sm?tQ`gt4?iHJ?@4d:;ku.7cYu;G*iaJacl4Z8-]p["R`U[%*?X.D!;eKo,Bs=HUmm+D*6DlV4+/.GY[CsjC$Eq<A
%5QZe5:uT:.qb9nAd02uI?_jc4jGqU92,e!fR$uKGHi)d"9=Q.(&`'llP#ee6XT8uT\:bY>7,Od<gIiWXZN4Z0/oQ"MYSUDXA?lN$
%g^p9Z?AUFZGT1?tQKt^?(FJWZJm:^iV7WiQ$4@$#3sh?]kU\VFiAUjkc!)$dMsVIU6[E@DUICJ>,lXt43]sm?=SJ96WJDp%(JJ0c
%=OK$_$g/'c8qV3>F3Y;9N6&mDMZ)SP]uR:eXE'slQLnIm;Dc9CjJ#1f.u6%L<9LMD);6QFh5\h#l.f\G`.`h4S`sVOi%g+1H5@_=
%ARL78%ghZd&^6%#$iDZD<3N*5a>Y!CE(Kif7S%*#\u$u>\S;d(]mP%oFO<83TXb:-740E$kAX%t^);]em3-r*;A\IHY<X;4L%S06
%)'_?-/._S,i.<nmJpah!dDWjGSua7@<hVS?F(2GTGmk0QVXNhqPW'E^Rd82+_&Oo'/k2/gE`-E^\VCSmYZ_QS9`E^c;bslF0eIAu
%ga#(NE;i4^Kslj1;m0W(4@1hCn5:,6M7b;Zg_]C[[RMbL@!$)B+np?7Q'msH*Or!H8c;ak&MN#^[MK%Q'6=2`*_h;B8h4pp4_Id;
%;H7BT;*`['\W81YTkFV"]/s<7oelCD!FIo*^9LCrZDO#3gGe4h^4lo&!nJ,5Q8k;6cNTs225X$K=</'g8SbclU$ni6Foc8MN+Xmh
%hW+-D[`6q[^H!FB>[sE<+bALHF_?BEJo1/:K':TZ*Q>YR5Xjg"#X-<KO"J&'.oOVT.%)O>&34/r651c!kQ+)C)ou\OSP=kBfX%1h
%/en'><P.l/@p"c/^p8_4kCr(<\7W%I`!DeU<3`!n2[V[4BaX;::,Y2qb/?883:9$dFW7mSacbfM)nblL#oEF7Xst(Sd]PXj&?'^^
%mslT=E'=i:@?q4,W$Njj#S.IV2'+er.W#TC9ha`d:8&T%_eP[8oQ#0mErj/^8!ecI<L,ZnpV[X,6nd@0gKs;<:p'Y#PF^hsgQMuQ
%0q#0emr[PXoF/9aY/N;ujc6-V;XD=^1VbMrJm`n6ChF-TDfju,BKS*L0,u_sNJF<c$j(W)6"DP%EPZ(KiA-ZOp$q09Sg?FSY(mS&
%H'2Eb@<C4he%G#L_*360,]5lApn<gQo*j#W2.9+D0j-BQNq7*il(RKk&98;qN_"uAgrZ%FIX3d)SpESWb>h)J5GGK1&@Db$To/X"
%4^/"+Bi$U#lHDV=.M6JTV,oi]S7'PXg]i0C+X\_]$7UZV"G%%IdamHIajlR)S<[)Yf_)CIH0Of7R*i\FYn[KNSdYG+ACY[Ej[hC#
%l6ZZeo`4nBQ'-:4..(t@5T-0UPZSbZ]f:+3>b:lk)Xp-ZLCqL]5U;'?Ha\YNoLkE&-#*0KG?$mVP^G:J4=\a\4U/B(&@toSd+XP<
%$8^`Yg=+1G2dhu/^'NV;W\Rp[7qNV[A5(9pmS42PKYW\S"/Q;,\]:hRh/_/QQ-IgG2l^ktYZk3E#YR%^bD"K4Qj,d8(O@Pb<F-et
%4JDBdr=cu2IVoN:95b:CK7PG?U"2T6Mh7Q'P8">+o'JkPNJTtio5%rf-u`%"=lLF8/$].[EARqj$B^;7m$*k?M/,St5r6')J9kTe
%X0.C\j3J7MELZkWPC&QMo1hqfHH^`.7NAWY0dCrm`18?@6gR40&.SaT2oa7'WZC.(l-ne2rmT!^cje-&rLd<Ks*a>m(MO8d0%)jf
%gKI`PLX+HonJPJ)9Y"4OW/4C@8Y(0j>8*0Kr`5`%"D+Kg^0$c<ZK-A"*'%cBq(]d!okdsc1(fT/"()T+*^g7/g/Tt+GrDD[J,lnB
%+f@IOG$p%u6LgB]OJ>0TQXj)"aiXI/LhZO:.\O%lQ!LgJ5TUVY.;L@:@cT7"CHjr[SPhNtej*aqK@QQ=&7JG<^5P6K'R!mqn!1)-
%+<;Yg)-3u`l:E>Qap>e:J']_R'gj&RqEoL^:N)ns2o.OgR.jA:fU57]UE%E>LPb$4q/[(s%ZZ"7%kDoiEeWHnQeN<EDZ7SmOEbXf
%8(pVFV.U/!_\'>6!0!hNSIXo\\T-I\9Tp3s+L'D4p`it?N3")"g4Yog5Tn,-icZj?-F8pOKg.^*-O_alCcSG]#fU`Yqobc8V>=$:
%@.;Eu_aFWa't[<WE&u#)OSMD_iHNU6m_M:KKbSJXHgqtoW?6pGG76#A!7g)g2j.fM)s5PceLS*"\q]uI3f#$)'pbmF^s*c[%jmqn
%^c"EWjM4H6/@#$a7<3S@!8tpAZ%T.\Qn:ho.<EgBR%-lIctELKng,3<\FW>5%pm;>6ML1C'nTi^XBuYFk_2I%1>T8"]J8q=&!0W1
%Ysmf6aZe5LGsFsS-<<I$MML0CV7Gb+./&L4#KQU<0G$+<bi`LH4t)#AW]W*><!\+Wi[7@m4M4o:"2q4nTN+4,n&\oNV$LH@j0eUW
%1B9UanFq`k>j(T,XARd3X0'gpHP1BI?+rjME$:K*JmsETNSmJb&57+Npg]=*LR$["&2VfsH?t&"8VAGAF*m>BGkp0O4)5d:lL:@"
%d6#FT`'YmVK[1#"0GgIVf`2/akaOc`ab%*,BIMHf,MK!C]Me1H1kT-bKKP^P,%dYJ%hqrdU5ma;a])XZ4W>Tm+9TRrPb93>\lq[O
%`iu'l=1uFB4kP9*%:digd2F#sFMX+`SBk92ps$oHE6u`AmPuY[4E'%kHpYJ.-J&$cVl=o*\1D7nh6HGb']1;b7Cr#Z4UE%-m<]4Y
%0\!'<=p&j*R1G/qc^H!nX@2Nm`&d*q&MbY1LqIW:=#llc0>B$b+UL>,S;:sXd=Pg?"7tYXP3.V0R9[U:3@/!\2e);R%Ud1:odrr[
%8Bb#*1VIp=-(B$]M.>Q,T8VnVWSg;)[[Pb]Q27.ukrLc!ol"u<!jh5iURBt+@ff;hb?9TE:D:%d+n>+V:Xg.Hb/AHGP`)RS=@^h,
%T[QJ9G'UE8:K]fr^a*4<:U,1]='R^0*mcOS,:tSE1Pc^N4o=LMS$n6uWChcmJFO1-Cg\sT9kJrA&b'02m+74JD-j@Qf0p1+QiEP3
%?6=Y^A0O72.P)#\$c#0oK>H2<Elcl<[*.o)/"0Ad?t?kD9b0r.VeeCMAiT=2an.9;k).rk6[`IrX-\6<#.Qn8\1KTb3"o!pH*T+]
%$2`+mZcsL6(V\Q5BG:FV:MhP?PG9-[U.QhiR;b`jkg7XI#SRPDA_"J4N1!&cq.abLE.uq:%P4j31P+Z*./SoL<q9WGR:0O*\]#?&
%+jP4S=Qb[#.!W:*X.f$W$i]_-+$8/hj44<:'ZL1NHSWiQF?Ij#]Eh8tTG>@l-5W,e(7&#Z*O:oCQNuisGWF\XX]'p&+)'[1rCW_h
%HP]PR^`$OZJ4QL;*QObr<U/I&N*3"".t*P$p;fsIn8(Wnp:GPIOEC<o,cMRf]oC[*ZiUNY$IRrR;b)F"Tj@XFBbS18ka[Ds-fPMV
%7;\c)*<7A)DB@$j(>'tQ8%K;J4,PUtXNhFBnkVqO8I.1n:eB!eR*C@+i5bTSAITH_#H">-)YX]6$KsV</7VBcFc\uMjl[2m_L%k&
%?%Qcsi#V6.ilZD3M9s$f^1SW#ZkBPs!Qn3$!gek__?BAAD.@He&fIabr6@]oNh7X2i!&I;-u''`Q.]M@&AkM\"Qb;[q&O,sc:ERH
%_$C7X"C99<3\aS<9ft*!aTL8YT7]&NPUM!6,mFgpd%6%83YfIoBRuTbP7*Sa"tjAB"=S_G!k0LZPpW5lFE[c"Z?j,)s#aklN#p=u
%^C*d!hkt.O`;%2sg+]O.f$edMGL-\WBq/kNT8GpD^q/9CM<0M$:t(:V<BddDDP&XY1t]rl5H9cXQf!KDoa;mI[CYgZ8gt-*+ICjf
%'2Sjd<=jifA>aZ%H14XA`_=!2S!idl+3+CHX[:,?+%J<F&k`B1j,:T1,[PpY@cbUoD!FauAfGsY:maRAjiD@j.!3R^6:4DUrup>/
%,BJ8%OEc%='Iq\tVh/V-LY%)eloPe2KPD"*=_RLZF.hK"Rp!Q6\`f'f]ZXMPA8b:ll';elNX$R]D]tbThJZ0F`KNh$6/HoTJpB:&
%>'OehGS)$fLq`geNb2a'BAGl\)N\I%3$1&"_'R/h3**@6FQph4XXatQn3J&Lpl+`kIuNV)p-!uHXmGMh$DDko8-I)?>iM*!kD+K3
%4aE<Jb"V/'BWnS,bW^,n[=qP1<`I[`k%hpuk^9hUb:Ns7ctDcUHR1.fms45j<G,42RG1c&UkS'jE;>qS*1[d7iB.d7+jV2('FnpQ
%$I;\#;%_tdm7!;UWf\6%I:i11BO5L01S)IWiDT7D"W!"6fFup?[9tVrT4EU,.^'4[)h<"RDQs1m]5Nio;WjjNJQh7$/i[f::Q3N6
%Lkm`]iBe\Mi(7m,Q(#9&GL9e!ln4adcQOE4R:_+YGS\6Y*^!R=W+hnb\;"$+RCsbZ,Fno4ZKI5R`Z<Y8fh10g+>oYU<XESF=S7ab
%=a0K6(I.<p/%k5Z=br"d.U*ap$,2?[HD"R6=HC,Xn=-J]#e*(GYsD@=D$g]=P:8[,;Q>&h#1u1O!S'BSD$rLgJGd$9l+O7meLb0=
%VP4&`<23(iOIZsUS_t'Q_&a/UkH$1cetflN`coC;f8_HpgVIgI!<A[IQ^PRi*eTl-Ag1]1-H1;0VFT$9F,LU%3M"`M%1e&^*j?"$
%SKd7fXMXLeZ*kfVA16*``.mRo#\Oo:k%fjKHWSVWYmSdQ.Bcl^Ys((Bf:sq)J.rLC[nP>frA>W"@^+VF9oZ,qjsr\:8@Ah<!u'U\
%XufMMlt!D\XN"m:]/"9-4g1D(#cj#a/G.,ePhg:enE@RTkBqBWCd=\$>%RW&ZLqH[j7[6^6FdSV8h8Y-Q"-GgV?QGFa"TO>LiB8Z
%$UHEM`G\g2:3M6t.r6`f4uX5jgcLX)&`uW76MlsL`p^\;?D*815CeZR<S!bTgjRjU"$OU?UCML>Gnik<FmTT.IS7R`=Ik/_BGP:i
%2dl?L)0B:uXq+J7()D5;M7:d_Ron+7C32/*)fC0H>:ao-hO0lh)ZnSI5]38s[Lr#3/aH\q2@bEBVg(a?pCT\L1UfI\peW22.3Dfe
%o\4:\M8#&@)g%#mm$MFHbKb)6gG.fB)b]T^R$g9QrbfK7LO^Z=?&\V0V4G$&3h:B7<nn[K9<FGE'),4R>AY299n#QLJd4;EYA401
%+aX@;(CLT<L.B<=XkQO]dR*$agqA(M#Dq-!G+Frs=0j2[`=6%<IdlY`=s:eah,SUmq2:FH>s:bU-=PMSWY[Lt"ItKK<H]fm3Lgi-
%/50-U(G/Xb\GloLoRf/(?.Ykr6.L'C[57>a7kSSn5_T-kHMG^ZP9Z?g8r1&k\q$A5$o=FpJ^"s_Yp&H$55CY.Vr9C/5s.Hsk<=a8
%)NfkI>\[S)[SV?*;`@,!][4WLkA9PPK<.bbC?oI?4DX@lBe_?'ENS57-SD"Vg#WT069r&b([Kn<Z8XE-RhR2l2uYMcF!0J\jXot6
%H6,qVs&RE,P-fW3!en&dBDk`<^:E6@2oi8R+u:t\]Q!((TS?0n^$=1p3$-u.OZcWi4k8e%*3MBccuTAP#0j6q3B8#S^<376MSEA0
%0ODmRR_!-MTd"K\6t$AfMsP9!nj8I#kX(.9Ib:dG(PoNVQ5a5U(DZ\FD@U4QF<GhdYihQO1"!Rg%dA7&]@'ie@W!/ej]fQfA/;:B
%?!D.mAqik<C<*ZP#<3S^Z/lX9LL"#8&JLgPh.PBsl*aMj;:+>%XMb![3")YMm-akD5dU4QNo<-kILef=S&A<ih%5p#^)2jrSJZX\
%e?a=n(01Z?7R#U!#;2V6e`@1WY=BNPJBeP=Cc9jH`uTb1pt!U0L+33H+$$9>+!i\KIAAa$S4fmT`oM0C[/Cq3?.jjCc$HMA4-lEI
%Vd4gd@jcs#dB/2`a@[E?S%sC7XOsrPOrXiFccsAl;THJXJ`%:2E:g(Z?<DJKcKT9/Z-,q2f3"3mei>?!-.>8PEG&V<5nE&;53^VZ
%$UfUu@aQC`[d3A;Y-9.b$EmIVDD3tOBH=FlFg/W/d5@NP)m#@E?YX&,"!P&2!4?qjM,Vq[HR,dU]\9Nj\dRYBlp.b,)Z&^8*\47K
%7nj`,U_MW0I.>u#S1_)d9>&OBhVI1_+Yl&U%hrYo^g2eMF2&SNZ4'c>+KFa:D4.dPp8S++QGB)6pZ#*u/tV=[jmt<5jjNVZ[Bkeu
%VXAK)!oYHjA@Ts?8`%>sLIr9TBiLs'a/'SP37o^/a)`TiCn2B=R-p*<J7h$iU?YpP?27'3oC(<>PuC0J1'BXh+IOoV01>l7?r'pD
%/tSPhe(+0-[e(nNmR?ubm!qNU/\dP!&5R]&QZ2r^>NS6(M1]j5?<VDK9nIH//AQdM6"=EgJpm%G\UIhu5lCJ:NbK2_$^!7$TW`s<
%(?,>VQ)JhokrJg"<*k_-Z8-su@jSCg*n@Gm"CI+$l>iEs8KQ3hRO$J"XYoN\Xn7/aF@0`ikcG.;hUj!I64CnGTeLWKQK=%fVW)j6
%=_aFMiksZ'Ts0!E-M*s"!F6ig!&iK92Gs0"hIg<3[%1t8n7<Edbahh<$spqh@u!8;[[,Bk?+rQLI&8F:m@]"$aHi<^`gOWO=VXnQ
%-s4ALkDkiZf;dY?4L$<X2V'4ZUQtVlU%?[^kuU/LFgAuHgOa#8U#op\12Z,)]aq*/%*J/3/!T5>HG.[W!9Uc\:mI5Y2XD8.R6*i6
%k+MMC4eAR0'4,XMVJ`*AGH9Eq)A9/Ks4j?3/J$VeG=bJ,:LljWd[#ZZNl\sY[8)8Q=,9W/94Y[3A6P8&9&*2kjTkbN)&UDb^O1TG
%,oJ7Ma)MjVBD";RlkH0G.X/IA6?A"&+q%ha[NbU,aI9'\ZeFA7kJ/)"HN4[^)!\G6:[TIJ3/d,!T#Di3pYeH2K3f,)bM:7*%XL?$
%X+PhU0tg<84M.+&)p^$rgf_'[]\n2S"Ous8Sam1BN[N7-,CdG13tX5n_+s'8c.gH",rXS5]@'q!SQ*Y8$0E"G99/?,BLj76B([WQ
%IT66WLQK!A>#<+k0m5?>]dJ6CI"D(#X8a4kRrV"Qh2*^#RkDk4@3%B'7:3//q.`q3gT$_kilZ.FBtLOLWKG#*4@<X'8d=;m=[S[r
%SSp=UhGs[A%ikoiCanV6e[tFEj_Nh?,_>\N:Jpm."[\lm?bUKGlh!B/Vc/=i%eHDH@i'Dm'CXfd`+#K$/$Lum>gX@?ruXX-GuW1%
%/kf2?2e%Yu-%+ZH@Lm1QP/_mKSl\A)60kH7b3M>Cin4(MB1ZG@b!qnp`\#=YgZ*$3JeONOF/X*0Ic]BpjkSZr"R%S$(iKK+>U`ai
%.uL<XBVo5"EFmpgQ/YAC9>$cP9oKT)oKc$iJ7?@b'*+gO9AE0Ch4nG7\h`NMYk@&]`j@Gk:/u3['6VGMZl"ZPZ13aaq^kYl&\H@H
%$.YFHmWWJ[l]4.qaohjd6Xn1@"Hp*(__VbKfL;49.BlrX?5;]]OefQ%CZXQD^0a'"1Oc>$^(.]#LB(fPI'_L+XR8^M$`8]Eg3SFW
%3*[)$\Z>p0nfuOJLrsP[[&Y8/1N$&8Zn>4KZDJmce&"0cG3.E>'D](Z`/6tOF\'n.Pf@*Y`N.l;'I@Y*6uio6</Mop(I$L#\N4>j
%.\@k=.?.tto;ClaTWEGN;f4q;jtO*RLNfuf*5j]b3-_AI7%ugMDX]-+:9C#)-48Wu?mbDED/]PPee7`USG)pP"le-_qSY+dX-<`"
%&[==2?%a,0-0ouqp(#;JWjE2nYpP7<0ra1J_Gk^;(9rLC>[pB)-#Pf4-F0WlSOB+]b"WoQ:]oAiJ0hAJ$HZWks'd\M/`!c(-+K!i
%BlI<.1aEokPm.gM_9#rQ1/7P4ZiT-Rn?i*bGj7\*lTr$d(qFgpKm.0,dc\Ql%qJ0b:Do^s]UF48)UBtJI*CW$ZYCFZZe%i/p8sZh
%*"[Pi%"gR:B[<1]`E/Kb@-M2"N3<?hcFaP&n!W7FalCbP%n6P&.R^+lr\Z"t3XPG/9(P#\GTAALFNtT"ci_6nnB]BpoT?.K5?P$!
%C@.[$JNbF-RBT[9kor`G"mZr#0Gf1m1Ric)F5?'\MJ$@gbhjkQ\bfd<4_chB4^HT&?Rdj892AGn`F4c9(mtb4K4Ln7/u:K=Pr10L
%Z$b@i*SP./#tK&:Ap.34Eg>fGW\6HUVhRG#g--P2`H1'^5/[3Y6^AX6moXFU;279B!99a[7rR=iU:I$7Q!G8l/Fp52i)HXaQQiU)
%Z%7VQ*DT?c"g4/1OFXGM[hdD?@AGEr+,<Tfc+,1hQ)Ri%=a9OiG-fJtIb+_a_hI,I\_?"O`3'p0VuRJNm<Gp3R>SgZ?F`Q_H7$CQ
%p-$ip=MV6.>)QN0Ysbn0E'H*VA-o$=R.nT7A@Ats(]UV\AAb!la_m8[i<;&1m0\L4^i-$4;j-4'i.pFakUrGGZM:GuIb;5Vn+gKN
%+1;/Lo@23F=EVN-c2g!:jd:6#l`so(/D(KUQ+(&]\j\e9M!fPM<b-#(4R8-gD,Qe0n:&Dq&-sa<pm?/]N\4hZE!UH_UJ`Q:(Tn-j
%1J%Y!Fb[+[SuZ@u@[VfF"3+9M]4;n\*!&'/XDL,">WSFG=eHXagJjDbZKRg>:+SOQ=tYDp>:O+^81&BCO@iYX+W'!Hd8nl\gb@Fg
%b&K26MeC$iA9A$rAoPKSP:fCr#R22<C9W&G"iSh$::I%)8sZf*VI4hAi@"`Z"1jU)H%@L-HGiCd<>mOaqSElSK+6_!BOk/`>>I6/
%N>ega>"kl5^:/A/8(o/#mY.*QV:!Mu]&It3/tU8acm]:9TWU=ZAf>2P6\68.8/?f^&sO8m4Bc??fam.;MJJW9K+h5jE@D_%mbqk`
%PrL+mHstU";U>71c3P5sUslDqERNAWiR0h+hSjPG*r1`gO'+'R?H?HbXAF?GLjON'Vq)<X>9[^$fs6do]l[fC'4%EG0^K>WK]Fae
%RVERXnNa?hpn&),N^Z#(T_gECPrSDOm=EYi1h!s?03(GfKFN`@?7ugm<5m8RZ:r+D9ggssdZ]mjlV'5]cPZ94g238hF*P1s!\$n.
%F^jT4=;_)?kCV34hqbFS.maLi<+HcVKkUuIE,oq>QOd--%BHX4gp:J*\p%V@>21*R3YlF'XK%i2>KZK5%QS<e.-5U23M^"3rQ`6i
%1UG_FNacj.)a+?]UCf'iMo/mL/XoAq0r83U4NY,N)LeJnX9QI5M?h.DUnM+L0Kg83DcPeQ!U#g>FJ6'S(24mpU.a>IT,.$c!Y-a/
%f`5j>@rXT:+t?O4V>:?b)>%-o#jtU/$lIK\SS;hI5@IT+T@)DhM$qR]dm@);\/-N\k*>3(8CHMcm+33r,hM,1<i3l3.S<W;:1P#,
%RZornaeMLBG#0%U@4iiIUq<'-[0qJG*eQn>*9fOa\8=U_+U.2cdD`2EV!@N%W@6aQd)W+8T4dGgN[ZKh6.]!":1BgSVu,%(3AAK:
%2,/@UpBO+KN.YT?+jX1sQ%K^nN\j)\DOJ8qD\bl,n8=>>_E3CR>r\X)=VTN`75?YL>/No9gh2A1H`A+%Vk#!>L%sPjGSC`)a@s?h
%hnD7\\1a4Y*4IH.6a<rH_HM2-?AUG8K4_Oo1J88oLr?2Rj^]loi37mRmWfR'2[gqC#"]OU#J$o,Xs@@[@Br^cooUiCPYqO9/\s2q
%`!j.oamr',#$!eSb4R<Jp4=%KH'>On'qdd]\;G:L7X2i<5p`KYS]Y@.-O0-IiLa2+mWqKUNS=)Y!q\hrBORToB3Jt"p>F*cXdQYL
%XGS8R:%O%703CX7lP&3`T/K;'Z-(`A^Bd>@<*e@mA'DObVb$Ao3*ec,o"hqQC8LJmY<AmP)+=Bt`+`Mi7'9*)@KVR+'Cg=/p\@82
%P\PAr!Yr>1-g/p/XR5pNQ]fC.i`>,&1YXE4kK]C@@Sa+"7C<jhrHBTO]5$2t678G^d)@CW=CrHt\pW&5^J"n%NOf9/Io$)5E6F7:
%[HH>65l2X1FJtof9I"s?DLn;%SQ1"K".]W)/'sb#pT)(Gjgt,R<,XVd*2(8&"r-!@<gmo<b^!*^L?P<kc[knmTO#j7;IYt*=u#R6
%i90T:HX_tb&NFuf6JM@eS:hkiL*@DcXUpAsC\R'8TkDl?-/uNJi"d[5%CPK6;mV+&eLCfb8qBd*^-24Uhk%P[nmG5;cFS3D&MW!h
%NLPQfnUc+?=I2XP)eOAuZjAKrS)ZP?/1Z>q"BL*t+gfM(eHLe+i5eo0RW3hOh/!7Q@bp)@<oDj21p)[V4L[Kk^RAS,;$Pm\\tS:Y
%GP6d7WY0([_f[1Z7Ap8Em\HG.YS:)AkpQZc/"I[(RR>dAnV$b@Hcs\[qb[6A]%jJ&K]-L--+]Yn*-]V0#(q1WJKO3\2S5rf>38DL
%L1BLM\cnHJ-U>,-V.CD^9u#-o<tJ6V'f>k5a8qQdg-rPY.+:gnj*#<u-2FCL_.;?GVekN9$,r'm[PcJYm!<X"C327GAVsHL*a:SZ
%r8m(U9sGnlLu?,_FDt8KaSdNUr#u0_EJYNtHN`=UIf!Eu",.Sb2,YH;a&N,6VG1-IH@I-./agfop)FjOGDa!9'5%E1`j*me#`bDc
%98qK/l,'fAe*Wuq1e:Z`@MA!LW'23gXFk,6CW[ne7nHS)B==H&N!VOD4X[hg6*WLU;UY6B?1_UaIT`j]g6NS=/rguf$EPDkG&*jW
%=95$4G/M=!T[9&lfiASX%XM/i6ML1oV2\W5QL/U]f&[lNj5"h)gVG>OlHPSZCtHbKM;,3pK?60Vb`e)U0CUbN5od%&Wlic;H"(1/
%G";BilQ3RrNSs(rjMf(AXnPT_K)!m$7!dOm,5uSc**>ZhPlagS0VqHq(<1a:;gX^@\`C9K&k$q2`P'At,h(#La%Z`%,qa`%PZL[`
%VdYtC``BU:bp82+X)[C,8\VS_8tN(^I+]_]L`>hgKU&6#BAJDnlP3_khY2Xl=';80S/ZSNV\`mYZ3Q-eM0U@[_V;EKm]KZKs)(6:
%'.tp7(8:@<:l<Y(<I*k5TNqhp?(5rLY%2rE0R)PH3m^"[d#SFf9FN=SPFJC<H#tLhV#0(R\#iVoBPSp5Rm5MM7Fbcl'(/_],./4l
%i6HJ1le@%2A,Md)Y`Hg=<+$'AF%o(^99VG)=BR2L.a),gd_O`fl33;K;<e%Om90[G<$1ghhf!_OM_7cmmDVL_VPU>4s5%HhgN8'^
%AoXQE]YG0\in;>_,MV<:7[_IoIKRR[!E@n^K)5NX/72PT$JV_OBu8\:c>tp%-">jH_C0A*mCjW.A(a/"6]*iYII\MaW@I0[^U/*B
%RMcWu<]0Q6o/,;[$,K?9397S:nEn't=R?lTNn"_3Rpe]G?pj=+*jRUfA.a&CgF]Imd$"*Bi?Tj:X9Uco/L>Ip3A=7jJM\%jXP_GA
%QVDSb0TWJhC?c,L7<^6$]b6-S\pGan6?P-Em>f%m.5gP3`7c)45V,m[W`8)>%@L%0JNl\3TohX-6WQo(Ym$-Mb_k<?8E9,E&>ccP
%#>[sEZ?lguM\gV!gd$9@q";b6?\Y\&Y^oRD=>N3MJ[mig&C&,Z*?i]!9GgeSRKKD&4i'HA&!Ve\dQA):,2*Jfam0%BFDIKYLuq%m
%#XEG6%r=s$T)$;-e,KuNGp828^mS!4$QQ?#ZAJl@Eu')%/.kngECDcsSgAt:FsQ[0[gkk^N%LME)2CJ;+CJYKV\!lB!1@IZ@#VpU
%NWGp-F##h=GtuMH)1]qPniPY/`uG4@FGXK;!l8h:Nd4A$*>FMohX4FV^s%k-7kPq"Qpanm">`7g?@Ijs:u%6sC%D!(d6-3l,G]V'
%MZd`8Y*T-X%R9dqBmr[er2rGkj+oQ/',0a`11`sDo>jc:7.]8b_*^_Mp4-h*6G*/51dZ\&jcE8IGkk(q0-;@^c"ldQgS?;f(0lUg
%6RBoD1riCD`lO"<#!t-W(OJY/+%RF"g`h,PSPB8*P8@nU/9R`NI"X=@-!hW+C]2T.Atb_!QauQAORL%X0d<&j0pNiaMpgfhW@^g8
%83S"Jbp,k4E0W#ka6#gXk*?9Y7p`J+O,93Q0&e@Ro;$+khXhhUk,LZe+jEerQS6en,<HI;&q:'uY2%t9#`<<XLhD0/]_lg_Kk_lN
%"GQ?J">gA&O,F%d4<fB.R190uB)s[ObJFGOLuteT(_Oae&gZi^6,Rk#8dt;VBc'.[<TY=U=B&U"eVjM!#\/<U]_lg_Mh!su.]T`k
%Uu^*H2,n'*afGN$*#T@iAWAFT^Nk>b5:'Y8jbZS?,F#`16^%b,1@HbW@%!W"0>A0?gP#[6oKlWR!NsX3W/TDQi)8+/$Ni7Yj!Du:
%i)qZlo0>nZ5\](5>u/;:$ZqM.fYB:-U"N8*3m6m$W4)#,U4T0CSiLI"PEVOT6/d>Ma3h^'=MU=ph/0rq7nIiQ'3"<h3-1qA%WLP[
%d0gY/7J]C7NF:\#Ar_<qp,Y^;%kfJk(GRLPKJUY:d;%"UNFFpTBAWGn^b\2$?662@K'JgXAJ1^t9rS`N*$h6sDn=2,'>BtpDXbMn
%B+?Qc]3N5I:clJJ@C?)jBRWRdr(b1,15'G'bt4[\\E3g70ER`9&hj7f`3&cq'q@\1kUIP12b%V)-.mBnN8`[@OT`TYJt&AF0E5:q
%=jXlDb<kk7b]so)$o$l#7M*kUD2gqd^gM?JH.R&]:M?)eVM4^;/1oA0d\.^e!(9;4.j'@%=#GK'K*H!g+:&V^AAgA:;F_o1duoAr
%+@Pfl7g_Y*.#DA='@H`2G55EW7Gt.r"2pZ0".gphQA.*`$17<05uX'o1!KqrD]>qD>fZ-&k5Eq/^1?Dq<F?MDf\!10F-;OHR-&r5
%'UW-FAp$Z9A('J2RO!MhB]`o''Bt_R8$Zt:S`#mTl1DH'!R^&"*Z!T"Gp3?RGsF3?U<p"t,+3Wg3Io>78XH&FReltq/?BZ3RS_5'
%1hf?459L<P4Fi*rG=oD[?(",#a3kJ4o?KTf0aGZs"hE7i>J1N4aYE>V]+MN$3u[_i_JrD!iODO6!QD_;6p`UeZdFc5,S47u_i6),
%Vo6b'U/9&E]N'V>s,Ps>@q$P`G>2t*0b</\^mIK3To2sUMQ5>O@Ebjj]%2mNDOJ0"UQcRXb3ORjh:YM>_G)Bpo.Y>W(j#0KdAW<R
%)]U%=F&7[Xh-nMn1iJgZb`1.H_@+CH*.A!KGuld)@ug/;PmmdEQ]l-:0otcP1(kI8JRTZ8V^%-\RVaU--[p+'alp)]9#')A:qp:/
%'T@>+\\jeY<ZPSlYtoY7AKin@V=4VDH)*'P+QcQn!lMY]8JpUKBHPi23Fm\L*oXKA0ZR/f.ilSKW\NtLlJOL2HjRd)/(ar]Gm"?X
%/01FGcn8,g_!$0+C8hf`>`SA'.7lVem%SGWXc-)9+Qb,Rcr,.-Bpt;?kHCsUR'.OK*);GM%hRkBOU"uF[dZ>t!PWq1^$ZET[f?ku
%\YlmH(>dq,+I?_H`6(aUm)(])fQ%DBF5mA14B51Rm?`5*k']`OT4F#mYiWohH6AFt;F]=0N&4P5NC#5c&HcGck%Ro6CS6t@jM`)3
%XHIJMcBDQM5h^oF3ImD7dGP*1>(0!CcR.;UF6U=@G+3Se$a`$#+\1rLTfq0d@$]tY[s(5>-Gj:#L<V7Y))9>)gu0933NEcXT]J0A
%#Bl%6!A<%nUL;8dY&R%!gT\6^$h9$VN`!;S-#,FG'V8VlDETaJ@)+?a(L.=ZDE1$Kr`S3GkEL*F7c9SB8a-]t1?(^gJA<b_e#G$C
%h"!SL_a`GP4O"3XZ`Z#Yb0h8KbPTInZ@G:!1NCSC9#iLgOUqL\8BY$[2FM!E/A0OD>E7BWNDP^/+\@AlI_$P)4p@h++`9:J[0GE,
%(2=lLQ=h^XA8,&a\TQEmn1p''jUooKeFJFNNi;'%RN!]-(kAIXFO5'4n=FF`T]K9<:](UMnpXk";9Qe;`0L\YEbmD+19.2q$(,?j
%/Vj,*]c*j2Tg&ZpH$IY*e8c>$p8`+lIXc=uO_'u]ooSKM5V+hpA<9V;_)nK@E%B[!!ej`oV;#;n3$OXrA#po@cQ0YhLun%j*<F?K
%+5[+B".kK$:8`J^4T^qU5c*M+G6SRF;MbJfCFQ9O(]_`FN*7>iQ?NR9KOi*Sdg\2.i8V7>Qd65WFp081U;SO:8>VZ:BQZ9f(dXke
%+`0de+81#AIFkmM'WmY9O7HI,87SKs<:FPDf(4J!;h"YsY"K:];Z?%'XcI(>bCadqNipZMR.?FY\3)0?NLJi=TcC`4a0$DjX(&1C
%4BWND*<;:Y^etCcLOR5n)K]uAn91O`*V\OP\W0t05ZEFd,W[/n*MkkdD>9TtWF$%F*)(M\.8LU_`rT(El+W&W(225[CIJA'^'Fdc
%5U`g50Z+.cmPT35nq.E#Et#_j6duot<gfF8EFcopkiAX_E-YWVN*.DK8r"h`iO!Q,D@8*1nC3^EL$]`=+I^#"/lLp/.``*.f!Vql
%+G>;BIbLjG(Po?S\,p%c>eP[1Ta;$tP.H8iJ:o?n-<r7dBj(Xp`e<4f%PNBH!^90gP9AtFm^O,gb/XaH#OlWj8.mUhkWjZ_UR02a
%O;BSYls$;e4Z-X&F=3:A_MZfde\TDQa5TlMI)DmYPVhF-$p[QrQ$;hG^ach'9-2Zn$=OqYr[2'fGcj]+0+e#$LWdHMQ07MTqF[%Z
%9jAk/@BqssH(*gT&u#bK3PF?/X0u%VA;;XA@#Bpe*3Ao(TSX2lgT=[GPok*6;!$o?gWVLbgN#(T75=SFE;p)>q<8U+Yh4%3G.@,2
%lW1YdRAE94-!oF/bD5;%7kB_>dGUOplTZRW1NjsifZ,#EI"Bq:4B&n7e8eY+2#--KSD9)Rd.1VZ4(rn36DS"EW\+JgBK<)D9BrE(
%XCL(_fHJG=]J(C&^h\3,'!_AmlRL^1]',?L[uO-P;i]KA,A?nppn(j[W[MZ`QQ$I3[0)ac.Ra?(j42(Ym(h`]HQBR8IOCFif:ru6
%5UnhZ_o4G1\pU(bCE<Dd!PBCaZ^5\E]0+j4\^g+))s4bbQ`$WHN8WetkoYI^4u%J-5V@i^hG$!]G3#+=dt@DC+&*&^n9L;DTU0cf
%/P:.b;CpW<(bSmc_j6q?_$^WGCrME?%X'*7=&r:HZ$Ik]VREggqnFABGK9+O>n.BUjN.0?\3g>q1s5bekjm2??+rSj/&#caGPq$%
%B;SrI^)X/7l[4:;mo)F".]5C#q5!rDl#dL*E[r1l4+JrM#!F)qmt)>lB;Dp#`YZ5R%QYa-!q\8Mokq:b&et`i/@'U-kjm2*G[\i[
%@:?r)n$f.4Kn.=S$j:Vgk"Hua85sQV6o\HXjq3<)P\1#L#D2b;08O"bg9\s=Ljdr(?#L</k2t9b*.$/5GaAFZ"`0RuNaa'De`cA&
%d!24Nlb:4J`#M=A@hlVZ486"]_Rp.rci'D%%m#Gj\'(/GQD^<:8I)oN('YKEmO=*:YJm^6'T2_.1gN5i(.@WY;!+IVoNNNpeEN<_
%bq'/AJ^"#QK!Fb``N,fORhXH`%T)<DV]mP\E!6Xd$k46E#oCXq^O1SLX>;N@$)%Hi,Q0amfWgIPCMUa&!LaNLf)a,01bMcnfE1Gk
%K-<?uprdGKY]>N0^UfaDmjV/GC_nFCKXNWI`m5=?*.<c.Dc]>)TFKB:7^[BAEdcRYX^/V\8M[K$ITOq5aW/"030XC`cTI6;IdR![
%+^k)UJ1^,DjrO1]LurZh=^@s+bs<K%:e*@'7-m/X$D?Pa!50%6o@)Q'^-E+Haa:P<KPD"K1R!X*"VE&R^Q3$QY]:c74Mg9LL[0`i
%/BKP=o?>"n!,8$iRk$nuh+]6B)8eP(q8O>pK28i+0^Wl[#4]nl#eFX/fUf"$5V-1llgdK0Y2k+:eX:kK6SEBfe,'6t4Go7&eN>#j
%JSG\VLY/:@eNBQ.68]"aeI7%u>6r,DM*%Y]jCJQ]A7.t4W&a^r9sG07M+=,OI%JnlAgZScLGhZp+SM+l!,5LE[B_lKFmIE:$0WiK
%X[+Vh5'N@,A"*i3CP4TaZqS_3d,t5,A5AMoVRGFi6c5;]5o52jNh3i(+aET@eW;Ge@HBqe,^4KS&.P6h0"K34XtA'&Gs#*QnkMka
%+Iks9C-X%6e3F<&3)0qZD?)ZBRBEjr3![DqZ3>3=1Eg-2J9.[$*bH/&\^Fsih`S2F#CQ-,SmOZW$cYbhPhSLL&W&7g$Z<aZX#prR
%EB^I,a#Hk9klmk0+ns[W80OKVB-XiFUSS'uq5uOU!h850I_;Z\p#*`f,=RETof*Y_Loj+A_:&om'r#/-2@%VaG_KrT0u"2OF#$$7
%n4V0Z^4J;);V/]C2c\FDg#F!h[-FRrHumXsng)j]kmRT3DIm^2)?T9#DB8f@(-B"pN=b2F4j-O['/JHZmk8#jG-8sckS)*ag3%7d
%@*V\&dLp!D%#`_'cI9F's'Sag^@Zeea#HSRM$`&?EK9Z3<^d>SI&@3O!9a&f01#7FOQ$'Wi#I0@_Q3I/Cngtg6_)Yi.6>7)BETt)
%Apbe#814`kZh+=bKR51,T[L7n=i9lPK-_)OGttA0&!Z[Ur8KA=(hYp>EXIbH&6rUcLiXij&<<-NaAM(>&Ega(@t6O',Z\%Q-^;Nb
%>s((*Og?B7n..MA:d5uRJiMqmb#?.;l+XM,c8c`WIF1[[hj(bp0]u7s*G8Ouk6l\tJiN56"`V3Aj!p;^S0iXTKDqgl'YP!CKR<HY
%T+Uk\G0DtXEX+Q/OnWu1m5.UYhZ@4[:FGQ6B(LA4432[]p]SYuZ9ELD>j3[HhTl5a*(0j!lG@Z`?^[;DD@TDC],skp]C@58o-dfR
%R.K7C&a9.CkU0^KWm$U#&RIRUl2uKFd`%#dSp&qC`*2,!Z]mO4&VgPXE9I24;??R,6lCo8STDFK=Q`Wk#-@FT0pAPZZt>@sRo1qf
%^&sq(.W%gDk@o,kkW$d5^VRC3S:fh$LJ&6'LTc@rc;/*:=iMqRq]qhU9EHkCE1h7hHURR*`nlqA?Eo%+60&agZdP^++bbb]N'7iV
%]d')']d]auEt8'>m+fOAYVQ'A7\X[cI4T@ibe`3iSf.%5;j#JXZ-JJ[B=]%Uc;RG-;!5`RG,Y!hY:BB\9$g<aQiZFk,<7j(3@B'#
%7l_Y51F[l6H^+mlc4@Y85[u)_TchXSPnU*b&Ej"n*$ENmoO\^<Qk@(97&&[cNaCYC_!Mrd\Rfa7:=RPYF54u*^iOb\4E4m34:fc)
%&C3Z3'p(I@FK$LV_d226E.U1g:-p(pUS"]^&!5rZ`-'G9!qZ>3GSe\cR=)F69!89a**ToM/I5@<lD1I`nqiatE9Apk=F/*cQJ`7H
%SIZ::!HnsC4VLbL$mhur]Tj:71\^h*it9M:P>Lh8Qs+cZVP)4S-oqcW+Iu"(A0@Fqig<`/!%1]eEKiO/R(ECZ>X/=P[tG$hK38N?
%4RK_"X[AV27L3g>SD2(iB-P@+\b42B1k;+6DrGtR9!HaX%Zk`^N1K6iE=NU7Zr60/%Ctom4;ltoF$g^!Yp==B2hrGJi,$9"Vlf6(
%=+>u/mI98;D*-mgHSJ+T$j"uphF9>0S"!`(ere5SDrI/Zf<@pR+#7K+C(lBjFB%k=0m4>2jqsHfE=(/8V]o"("4c2>Bm]*;jrb5C
%IShlfn[*EK)hDUE?(fm0b]hn^UN8Ch\h]BP7@I8&!'6Ek9!dq^dLOU9g0%87$'=,($Z/lSUb#T@9(MMH-qZ@bKauHaduhl?hU0SB
%IW'SCO6rpkJVOIAF2Y0Cgl:U1a<mUs\QdY-LgRm>D_(bV?0`a1o">=`1Z6HQ\4811mKmXF/r.'[[,qD#I+re#$DGX%'gjC^<s9U!
%!1.nj'bd+c'_fC!_(DKpLr9ls&52%f;0j55L+*HdGd%\Mr!9gfOumapVbR#j.pD1)dX7%YjnkdjEh\lgV3ejJ;b5^7?.UgSZ09+=
%nP\L+WH)9)3g!W'JsM$[[k0nhNEp`h')eVok+6uNcuLsQdN#Yg:`P+Y>&uCs#[37TYnE+rja06#'*W%+Ph4A=bP,-?IVM^V/Eph\
%nF=Njm9<Q/hpKT!`-O+n+?LV)X"$dg+-=X'U6J9O/HkfW[:rL7d"###[O@b&T%d3E6>mYo$pC!5PO5eD"EuQW9u%\<mr-@\$@)-A
%.PCs^/+_\`)Guchf<NGQ-C0.ur,Y:C\#>6;UFZZe\$6hMf*`O&Ns*U0?4IT:;.nsD_ZY2%H'jA?M5%#O%S0o(%r-Y_9;Wr]^rVYY
%>O'lI7:*($Wp@Q,P4P,41cf1-mjR7!!d?\FcYU]b-4"X&("L4#^;d'1H[M0">80mUe<g"f%/>/<V6DR#1,+dBoAX9$j5E$=&]_df
%-/:L+UrQ25B(7.WYQi0g76!>]_n7KU>7M3QC(5^R#cOsc:.'m7XBo6h1Z;mF*J_Mm]cuZbC.me87A/[T<De6rNi/^%A!k>=WT^X&
%JrW4%2^NCX*:G0R`#Q5pNZ=/@On(LTNq^VI&B?#/3?jLX$X)L>/0uGDicmq`Pc)lPaDmU9G,@^ie]L4b5TESc')?K=hao=K!+S\s
%a6m?qn-Rg'(pM")TI-m_"<79#+kV$=`f+<cp]+aFP[HVW_LiOt7$\_;_8bG55JjkMPDZhLZI]RZ_W(;FnuRpX!,a+9SPc_?_XSFo
%)c,dIJ2EiuhW?B<0s(M-GGOb>.BE7EBKVQ>=/caD**T6fRL!Og@F(C64Q)0N$bbc?EQ6HGJApKrd9THKg2]g&[M@)4RKeRfBHF;p
%"ibd_,uP(:O2D65*,ItVPn#R0dF68(f`>eaBp=X_[]5SOb*,>QO\a^31(HIeX>hYB#sN">XqoAD;A_OBDZC\OMs_&fd!2iolR<(c
%30q?)BEQb/g5(=s:ue4YO"t;Tet)_5dF#A57`qeFa;!O7!ZK+6ndt0g1nI`cL]A?;p>Yd/i&0[_W.,SX*mhl)AfuZ_i_\/3g+."r
%<J"6V\9OsA!Z-V]lBdnG?@:qP5/N4JTn^q4G6/KQhZp[N3t%a9.p`sB?r*#%2PQ)tKU`@1gtao;5`/3/)gQgDb#/4smf?$ShZ*\n
%Kd<g]CZcfn1\81cF.Mak+:KCP#c\h"#X`uPVF!P(mt%h#Aa)Ab&DGPQG"$e8Ke.Xm6kBlM7KDGrhZ`L$eTF+f:QoO5M&m-YQqPYn
%#ued%km-j"&D_f^bH^G^15R'DVQ--F4*p\;6"(A2<$BW+_6*p8ma/\fT76StNHn@udOh/JTCBC,.$9TLJqo!B:(`)5pMsbpLSqe.
%p(/?'Li+LF4?R2o7"lZlMA>sti8G5R^72D:B\h\klu5c,8h]Q#1^e,*f\pde3BIO/>[bef3ZJbqJ@[lqAmml1@#$[1mbm3Tl(Q$,
%IG.\O[-1+8JVU.G&tF1O&'(A1`-2F0q^KENNF([/J;8c%!"GM8h(d?-+/"Nr-Nj)"ldZ[.c/qn=GW:@:59KC'TXbpmnF/a)'0I8`
%A7DfRLF:m+iS/Dq4P#P[X^"pApA1;$lu4KsmtHc12[72%3ui%])\P2T3/GKVk6uui%^EpfA*cS'%L5l%aaEuqF`J@r+t/[F*W6nX
%mo!E;iO1ge,7p!T:Ue]i$*%t['#fA@?72^[b\XAE!"7Q`XqLhj4)0"?.@*d?&>3.G&k`4h*MAt^.@'o]&mDWWU1qK]I$+peWD\!f
%Om3=S^a922=KC@`qK2,R=ho^Z.C<JIaW`mI@t^HW8p3Lp8U'#k!nn7'pT6engY1usE)9*<5L]/=GH&=(W!n7Lc$foWOE.E:i=e1q
%%"U<?A9SO9i#&mm(Fb;c4pBqCU]guYGSH/d_HMe^,ZsOcCm+l7]["B2eq0hOPMdj.#gUA><[($s\qR5c!fr%=2<h^J%L=]-K6"e9
%>amK%3u"4NfjYs1]X,(-3;O-KgjZaZ:3Xqp0)/)j[*5&B*R@T=VAf=@e^%iO.2ccf<VMV<R0Nl2"CqnDDR7s&,3-k4&-V-U/cIFP
%`j"'dqsN;F+I^NN-Z*`l2cL-]WK8'^>j9@iSR(r.44-E!We."iTJ(HPha9(9a%aBB9[#T'%i0DAC'UC\Kg(+scQP%".:qu#&n\'V
%<7G(V=rU\;JjlR>$ua$O("iMG\7O5hW=0'&XMD7.eeSh:m`(pST(&O5/#D)LGG:q)Wc6YI%0QW^m:je$]Y-kX0GCF9j/cp+Vc0[i
%kh]$-F4QYf91snt_5UcsnZH"K?0:Zl]ZK;M$?\B"50?(^4Fc\?QAN"%ba31$4+u^>$h%!odJ[rL"p0]/_r)YV3=*Xtf:ES_qo`*\
%/6#"KLf(GQ"9c]r7pIrJ4\aVb!1Mami%/*t?Bt#@/jbL5mVg4!S]naGZfE`*UX$Eo4Dg1"!NAqhhJM@J!HbTM3K3_F/EiNI!,,Z>
%(7OrrS`D=gg43m+gE\026p/'jW@PqD&e6mZ%*-<,Z4<4=,<KEkhH<j*_O?(.e&V'%c+fW*4`ggEZOfB'ZLtZ)'NC@Hf^Wu/=C&G[
%*"l`s9n!qGk2!E\:tCVbU[k@#ft:JKS8Pk4_5f23m-a5!F`$/Re%YP!#YZ9-gHcr&Aa/X2E:GQtdY!]j9o)?ZqqCNX*ROmq:f^Sh
%$*UAe:QBfki2X*6:a!PRFrHV)!%.4QK_%N@)*=P72@VSZ&ASB1lgZYq`./u_Cm2kMZTJE;iO6om6#l@qMG3PT60?i1JFqmX"G17%
%4;'<02bua]YiqFOG`:/oj=-$:fc9R%f6$JQkop!5;d"rX-$7#0Cp?-O6`i/l>E0QQq3nSAD=`u(>W]:fG;fXC/A]9iC>*SQKrm`S
%f`4oXgBmu7etDT8663(_$A93Rgl'3<7@!h0$PZ98(&q3`iri/bfeV,1CNQWPq$CRYR.2+hFM!jWpH$_`m#(,N[dUZ&0)_/s\CIZR
%(#"Mrrc]m,\2/2=[l)9-\PSZ%^S'm6+5R!:A=+6./_H@/>_RYcnIil#mTHq(S1Rn+$m8,bKOk[b@#)R90`q(pj:ct\_RD\9jY?gh
%3E+ssYduXQe8:V0_B3aC-!)D)[q6uEi>FT?&_/g,%65N*Sc'>&L%a"#.%8`)%lQHkCdDOTNBpt1<=Q+=G`PMt9OYn%Cj%[K88+CW
%hED=;i!C\r/mRP#K>IZtSSFkL0V3mpWQgLh`=k!b*6,$HqnS;r90Xf_1#11T2/m8[Zff`8eMm-[(_$2J)=8NY%D%*K`@_1549`CL
%f^QT)f.YcIpq3/N/D8eobF_t>6GECJE?1?l%(:l3SB&B/=RmnaN3O0Y'?R0N*JKom)ghplib)Aa`M3Bg8XUlVkHWPKkfSf*$(Je8
%g[;X'Ur#TV21E"u[iT?4lsd[e_MI1\kZJl!7YIq3p5PG?EJAnG.&C\oMo,Q\'o.?LLD)T-Hdh$".`KHp0S],]h0&GW^JiHU#T?u^
%-\N"B^[Q2QTWO%tqd7"h-MDjiU%g[7XV),`Q9<o,<$lV=;qUKF8EiaNDXB$0'<0?YXFol*,N3_5F!F:Wj^l=-)8?J^]<H0.%IETF
%,LlbG=YoN^NOI^/`*?P@?$kIgWN"FuN=.eR'HARs1K=ca,_PhI[#CP>fPNN21S0/kN1U5WM_?kEJ;b)hGa@EH1E-p7JiSQNECeK:
%n5`q5gQH]Rgg,$V:Na*)nPff7"G/Fi(2E):DK>24G+/V#BZ$*"p^lC6D55,%U4jAS\bJo$,[mji^W[Vmi;P:q6E6&b<I&o7_DE3Q
%"R[n1G1AV2ob2VtI(o;'6AWFfjZ@IY=6Q*L&XJ3YRfCI!Nj]P.Q'X_LG>FWJ/tD>sDcS3HJ+,DMWP8K$h0iod7uN`ajS&Ho1D'#1
%C6::?MF=qTn0bPA)hcnt"uPMgPt)iW@X^YCTC@@K+//knEOKg9bJ\?*$V,/&gE-/E30Ie-Ecsa.GM2>Vl\Pr+gWJlCLluR)98)8I
%\'nd=_aD(T>"sT,mLp+rblh?qGDpuW%oP\F(AHUOMN'oO0]k/+%A1(]A*5-G)_,keFd[W3E>Y050H7S;'VA?LK,-9g.M#6eE@\q(
%D[t<WY*Qf5)m-4EG1o9eYl"^![b9IEM[(]!oJg["[(;*SiE6c=.[tHUP52\I-`4Bc!+@dp@hoe$Xt47ml,TS.'M^jPF!OZJ68'ce
%\.'&&1I"r;(icCS'?td0!W)5#W2OP%KK[C5S(J&bUJ$u>j]Mlhfp'I9*SopUestoHhUrH17bX44O6mbj<O"[*eLM3$HOEd/gR>Pm
%9,ni^A/6Qb_%d2a_cGG1YC%jd`/rp+0K#`35k2O/JKMi:TpoFh=UG='jX"j'*I.cB0Gj6J:ZO56+&^l[G:)RRb7kGPYjo.QccF89
%TPYpR#uYX!&B&f.,d^_U':0!S^gi,J&;O&L9K>r"2EG^<^-+;OlWl;&[LaIF&9*iF;_3"*r?O\`qTX)1,U%,@[0sV_=9SMkUYPQ$
%7IjUci@Kl,Hc'!@$<Z&b,n'EuBU'G#/g(R,82/<&L9HPf?($Gcpr1qOH$s`H_j`=Gg'`P(De>H!M%QsOS59q)\Vc(T69I$dm3s%0
%%__0#!n`dkgm9Ya[Cbg)R:j2k(S%)2QWHh6[(HoJ9PJKPYWd6.'a@%SMIBe\&DA@5XoefR!.AH+I:H`'<;kQ$Oj!sG__di\_(PSE
%?&<lXMHuG.4Rii`PMTMg's'/<H%6-:kRl=\V8MGA8@.T_Q3]PPq;tH!M7<et0<^-\.Zcd5DIVlW*j^B[18AZCkkqH#U23/RA*k.W
%^J!AAq7@S`i)!a;3G."HPIUGK0J,]Ih&2Hpn-_1@dS&VR=#@T(R'V_=-mG>&?E?_&=?'hCrN7jO$g4e^NoF*o[7@_Yn0m6,J92W]
%CLn/TY78L.!kf6V5.M(G<"=MJ-gs2!est?:e8%L+S[]h(&&%ajGJZ4+q)gnsc&PP[pR\/Fr.UZ0L"L\M=B/DC`%X>&o#X>c22E:p
%FHArh2PgfIT.JeZLGL/Q#4T0>;s-VOFU7=EhLr8Tfki+XdoHe%r8-uZI-$IYdCuK:m0s7#"FK6!I/*PGZM7&_CR'+0@6/42G"23k
%LcCCOFG=ED#ISU.Z8,PO^.5(ZF$IMU,(,^d!Fq86;>Xpq8jq@4CF7K^.eDR^fR)Ec7b/i^;Yf:V1gqG=Y-*1fN;"fAD0I?,D3]rr
%TuJ6:8u'L,q_<&:GUHrQr+B==:O`a39OUD&^jsO(0qj#I*+D"NG65nPClb/2A;]44hK2Gt?T4]`<t@4K1YGJjQU[I";F\P;8\<V@
%@;2Ge!*`A:!8)+NRD=b89+K7Y`qtc!JmXVjb.6BQd7J%<+$Sa3']^H4:jsqWF+HR]-8p&g2*k0jXG(MRZFX,=5>c#A)_C:0#`Toe
%pVq!9+>rD.`!'j70NW<7DnN^so#]GT,$iGcOmED2:]Spcpsq%p%3)'SB#iPT9VGA>2u)7dj,]NqiguWE8fgqsX<3TSGiWAB9q6QF
%o^;])Y(M1\-*AhffLbLf.YJna'6&se58d*_Dijio@7Zb_!aJE#KBO1)]-MW`PCO%9K<MNC%[1`*d0F_bD0,6rdJC\=M(+&r6)jFB
%G:DK^k3.3t$Zd!/`7tQ9oXdS!+tOB+0Ykc="dZ&i*!&b.8qVc>)'7,Sd[8s=L$",<jqZ3q'#AaomX(A8e*npKU2,[=6?mfqO]P(=
%prL-Gr6jej,"9L>AW^,SATR=P&&g]i)\[s,-JO(/f67nu!;kU%o4p\toCY"#iNgp0^UrpGAm\h*0Wr[2kl"skEI7i^+#O)Q5Ih"o
%hF^??RU6c9nu`7W`^Bqr=SrF5#32?NUsGA,0nYlE"/l.!LBRCa38Y&5!@*55571=oIk1gGl/!KG7Q(NuB_Ahc4tE+#T-l9803)SR
%\epluDGq@>VMpo8i]5L8Qcg`Fm$ngRcJ;hl&j=I+4h_WHdS@khJX#/PGTpXD9Rt.W*"Jn>aJ74L;3l"DYP.0U-#-iA(b?sY==X%5
%?"*Iqclrm`)%2=5eps+F7ak#5>uru1^aseT3PffHpi14q.5cK[k`<ct$e=pG5\Uf5%YO+Z;q0@cb/j8tCgJ5*0R0MTJOJ$'o0qns
%f9iER0j/:W/YlJ?.6e?#7C_!fM9&sFU&tF-TL`JK.j3!D/\4i2Bp>G"#)^A-LeRA[%0F!^2CWb`es)_ki)-Q4b:G(nRmR>Q-+-qX
%Hu'^>jfKM"XC%X`\:G6#q5W3)dnXPiAS7Ab(ZBN`-Xckl1$dDgZ?fCm6AV5sipaouonm>r?K8H1,1dh`pq5@[R5`"TIAT^<ZD[1d
%@<S4AG0e!#4!?p&n1P8X2/.p0"2@58QW3f=2jda'@T;L*QFa7*GK%B'@B3V7NJ4Pp`j^ob6=g!rnjkGSY*LKqW?^1@Q=,:T?o;K^
%,>#]a6Rn!5LE<K-?(WTHa$I4>^bdB9UPFOO;X_;aO&`_MrT/_S#Z.Hrm60@VmcuXriXILRn\>Jei*_5]92P>m?P=a8k>GG/1)%u#
%gh%$%bDRfRBJIS.?n@a*>DB@bB?-Mb)B9[J+0LBNI:Rki!ESUTjFpSIZ!JQ5"I'a)T-/p1_9R;=%6-pS#YOck/62%$DKi\E<>lN4
%1eA>upT`YGYhe-%1J.dG$_3#MJeaYO)#Yd-6>TD=?fV#1mJrf^g=1"Kq1O["T0Knk"EM[Y\X626M-'CUA?*_ePT34!UN<@V+pO]1
%Oe!fr+:u^%-r`)0$Yd@-9b4FqR0ARFqCs<<JG9YX>eU!Uo0/8+0mJbLFZ'aIb70)fc:_&FBJoN^-=+@g<q\m:Ge$R['>fg>1I7PM
%m[.?*n;jhbk%[;H.a5PXgb!(E62^O]*1U'jn'[IbT_(#a.:\C[oN%&c"bMHRP(9.>N9h235tamZ)\a6K[UW>#_Fm\ie;oqmJLgiN
%LfAr`F`uF\fpn_\S)PP*#gRis@Aj5N6sqG_i]u)DN;=&U^&l`45iEk["_aQN%1"UGT1Wc^BGT@<UCDoCmSO'Y`O"!g!(H!FaCYPA
%R.>eHPY,IJ;@UM<IEnYnfo1/1B;e,[PUHB"%76/pf3$LP*goS_l9Q#kO<.s&*Gj0NK;*[3d"KieN*#71&M=>p87cOg.V*Id[NRdc
%Q&SCKdDpKOjJWD7L`fD?D+sqo-Bts?A#F*/kbB0r;M6a7e9e,#@7jc^l2id[]G<M020idq;\A:F)gY>dZ>!gj9b<IVRM#4cJ3k.H
%T]uMsT`tNJ_M,_t\J=iVhfM!e4`D8l4XdE`d%i"AC(8bt##,B.4?j+I$L)TB^=u\lm2Zob9WiH0'VS,H?<;gFc35+cPC[=\:u,^O
%86/^H++KpgeQiE4lTpf7j]rIu]0sd92-r*m<N%\54gnR+NS&e3<9[QR\kr$fW_e(Z:ke2;j&;sSFE5lb@_eZFl/eTGnKu$R9k\0S
%M)6B/a4tj5-=k6!K+`jVVgbnW%#,>5@PnkG5U$[f&1Vsre#3=j6/sFkg3?umJI5A?Z3[9.eO=hRB>R,6m&0t/k*VN)mF_ZAfJ2na
%'aR^np>hkJ7F3hi+KH']ZW3Jnn`#0Q%$-]g@FB]r=l@XY>F%;h.M.2q/g!DjDG$@n%YTf_k&1B.MdLth&"l7mSQ)7m8[%qT"7#J0
%%1(d5$]?KrM9s0NV)TZD"0Y[sJRBshM9pRA!(Du02umu+X9a*&SE@BC"8sUm;:g7NePp^jrku#Fm0E4)PZ0(rSUIL8(l1t.,M@?W
%@TQ7t8K6tkV#+P&QqH+U+)n.H''VTr@T%X&[SjV1_jTF8l)se\(.<;aVbRji?1I/91ARlo:m`7R33N$!OD?&;U7tkY"nU<dME3H?
%FM/4iW-$BU-_feTPiX6NCE2V-*"9Rp-!Y[!-S%-CnH2cnO,Af3pKGEukVmHlVFri3;4*UiO24jYlS6Off=GU?/bda\>I.3^EBl&`
%dCOh@lIt/%rXRm#\XqS,(T)c^7/goCMZ<IJ[M+dW[S##q0(#-UDQK-m^6:TH+][/sQt=<^=m.<;RE.5-%&e-Qkis%!8<uLAA"%V7
%1-XgI1#4&_a(QWNTe?Ab0YM9J]@-EQpN8)?\h$?qSdY04p-`:!5#G=J=dPi<Hj55=*n^6L,BML$a9Gq/,duremp<9MMMS`G&fTtU
%mX"2^f>q2/:V],\bc%4:gp`UBGUT-2^,_+&17Hu(R,qO:giK2X8!PK\eaC?KOI(NN2K2YU-TED&$KT+f7-6H%K?T-fYm[HA&_1l)
%Hb8_BR2ni&#iICTfdFk$UQLKYHHaEZfMU'JCATLCVBc%E&Rn$4!jO!D1U0Z=GK5rb1N=Z\RUL"uMHP_5Z`P?b!uQSn_5?oo"k/IR
%P!*K"0+"8j3WdPKL2][E->>+-Yh0[PS>?%Z'L(\P)MP&DHTUT?OmRDVH.nM?'$?RECW^>t,slupRrUSu8bkdC_pMhD68],&))T(q
%,L\#NK\284R.0B*`4Nt_&:'9o&8!OQr/e\QNE?^-M!\N#!_2d/T'^:ia"`"`]_`qU?[=d"6f)Fa]Ts,#P%H'?H)P.g**q<q6THH$
%6UC@`I5AFtT^1*sc5U8*@c.]U_!&;69m&mqGbH7]Si>Afgb:n8-!fXW6;ZgR\ffL=@Q;c_\.s?9EUU@VhU@"hUdK&7f\X+lEF)&_
%Xd1a?4!!*iQ"N58)iYTPl"op>`\$C8LR=^'.k*@=I8A@tUR834'=V)N2:OB$e%[fkRkj.::==;V_E):fU=HbII:d+cn@>K4Y>M?`
%fj6(+>"E'BnN3=>R2u^5%nA0#pJ\#6JJ5`?dn-ndr2iE3.1`-1$-d8kZ"7V=kDup/@hAtGqmW2Od())af^8$/:,NeNNLQ)l8SF\j
%af;Z_PZY<.RHSdZs%n4OT;-cYUH\%IR]?P%+6%09kWNfPGbbj#We&IYWY[3U2^:3'#L(u@F99X-QPN!LE=Y'-'$]aE:G]C!cF-K3
%6(Da%pJGN.\&-R*.6)2gd&U0a6h-lIRj,N+4k=A1NaR#lrm&[L`*>O5o/?:Oj<24Gfir7J'^1!X5F/M"?2<cVfZac-BtPl-B?lks
%)e\I0lsrCq%N0?D1^9JV0.$PbN5VM*;0r/.RI&fW1c*nR44D&"C>3R9bWt0"GusEY=&plRR;+oXG5D6I(R(asVA%)o^,PCX3hs,b
%AM7u00^E86d(:4Vb,(JH_[hJZb1H5]]W[0D(=a)SLW<mgG[k72O+K!Km73LbW1'c5V,)HZ\S7pHrU-$_^NPU*%d?>I=0h$DVg[)Q
%-^f.H5.!eY_SsBU>5mfo5+%J7p0^`)=o9`O@^?\BVb&[@(I-Y,^,iqXg:=iaj@&^eSsMV]mi5Ni'7!nZcJl*Pl;[0VYDP'&O7V8'
%PJ4e<UG(<D4"$!M*<#'b&.XrH>=D(r,8G3:2"-J`X.<:uS]<[[8!4C:&Y.MXqQ^Z!K/6;t+EM]![f+Y61UHg8fl-3*,3-NuN?h?_
%-c>+7DGQ\Q_>][eBEn^=OuoR'X1*W0=i9Tc!6T6bS!b$I9.i<hUJ)h5kGP"."/4%ao"#9s?Dc,/;kS45<J,@iR5YlF>lX.TY9rE`
%4>VnWe;WrGbm>GJjm=PbS?2*5WG1=Dp!Cg^/RF8mp%l*Q?oiYXC.YjKYrW448uLBOc>bJeUD0V07-H\]N!O^kI-DL50@&:A/"cCR
%b2"Gsn=pc2.6+*ZFQA2ShX1=2"<]&Uid7%X?=;!I35>')=pmf^*q_L*\j*Q2e(Il";eur-?^eH[^E)0fh^P(pj`dLN21,<55!LT"
%Hb^pa1;3D=H'PJN9UVl%@CUSV_g0?Tjt(DI-nV\9SK]:'6.B<[R^':*S)p@k#B+7)am,/E6m$4A9dHhS,Wo\9Zp@lUadG[CQ_N=I
%#hJe!1VWJuFUn']H)u?eY,7Q>;%7V*q(cIWEO\MjVgmoi]9.DZamD9%2e([GqTQL^YM!DfJ]iA2Aobj\3!;@=.,K7DUT\8(^/uPc
%7&njP;*&M9];<hM"k76Gl:ttSeZM'*<jr8]rE)PE>nkI>S^#_Lg0j^%X!X3hO&ES?s(M:WS'.]>=l3Q0F!F2\H_bf`\UiT+S,8g9
%&kYsBC!B$E*"(hicRE1Dg647$?KPsP_dKgGZ7r+qlIL4hngU[L7Tq.JClVuQYe,^OC[pVNR%4n":-A@GLXYR+(&F4V<j"r^*7(*]
%^A=D.iTsh>(.uYa?ZV!>jBL8"pI?<OF(m-&<1n]8K-2J&buF9_M3I]VSDJ:C;F`ki"<heS%D-W^c:#O[8EP$^OKWiL=nZ*L@D/!)
%AE)]hG'^'#p"CFOHLsYt#Hq#]3mk2/Opc@bT!-eCfkJ%h:#fP]L)UK.ES4;g8_iX=\YA6-m+qKY\Ck_#@leFSqYR1oNW2(_M,C<S
%k%o5?hHDqG6YX@7GaSd'g%(t-[DB!;kq%XWrT7r5l3gp8r$me0?klp97C4hioON.$N/pAT.AGsJT[^Ac/)4`703]?8LOSDt3e?qC
%n]KdW$6_0_b3(3%OEWb;.5dl$kL4)qqtU=4bAd?3/a&]:,ru<7)7,LEXBI7Boi:R8c]gr/2u?rSIenCS5X!#qU=,;(A+-f!Dsqj%
%i$cCbf56=3(ja?iKQAg7B9\PAJm`P=HHO`"7D$\Oik`,44>'[EZ,[jLUSsi(%A-&Aeogc&/8(QTMpm6X*c`fHe)g2.K?1qpd'TWh
%-sfDI1F#HK?IUsea'NNn42`g5he<.2,+_<XpSFHB\=tHbhrpW<B8$G70d+K2F#q?)O438rH)'%p9jY"l>:9Tj!^Ttdj"eOSANYrk
%a?R\M+u'f'?es?8nM.bBlT-3q04l8gNksEAVn^iuh!^O6!NfWR!2d0)N3$`"?(70QV(:h.8O7"00uuMrSeKBT&ma.60=1=7%)2J+
%Hg`"_*okjPc<ciiBB?/m;W)e^Uh/Sab'5?r+d=&^.P_)M4S80#J)E9sZX4&:9a4ueH58EF&J*Cni>CI1T'SK35X<k.>.rM_35_:5
%JlC0`_TagT=>M=AB!`W$H\.u(E(U2[HXouciBp;VdHi$$$&&/@M+E#G,.WJ]o$#%NLJ;-1;eMCHLO"W7G'cjTiP@Mo$*0H]TDhS]
%qqXJp2&K7CW(mUdTgkh7U@AdhRt/<E9F'E%+`KP66,%puMSkn8+e'''m\b"TNj]#eP\9`Z'ZMifc*J`h\2Z<7+:@-S-5hA"BntT#
%(i*V1EC<;"JlYJc&0h5i7P(`/?rlA+?;]%"7m>uY71/gdkrJ]!&u"(mJVeA@7UT]@9aUaO$K"2US%Dg<71#Kr_T9^$S%DR])\`"O
%Ou`680S/h?auPaRTgM.SEma$X3UoUj!p_'7$62kt&WU9r@"QJ3_aS/O:/E(ki`n)=$;=cP7jJ+7bO()d8:_tF\QGLi[#S6D"U[p]
%YPVfRI1m_:T]=\>1f.S&21ksmJ;9mu'g.N8aG'a"!ltl?&Rtm_&cssGJ`F0LDSlUOnL+DV'0(d&",.&Oa!bjdKhA,>ke]qei7o'U
%:JTj'Q'J('J`o'Ua>#&]DE=:F-h'dd@[E#N6i1Lki+6iOj92?(4ZJ"\Y?.7082Y%4M'VrZ!*j#U`pIis`X*WIY!$A<Vnd@2V@>7t
%T5->[+P>L2gIY/5rBgJi-h+D\ZSWgNcNn3Za2AgY<aB>Ajtn;`huGG@7ShG6d2b2])D)L6:SR@rXLBIc-:&186jNNW$WI<7Yl^,t
%S?+t`RdK?XW*?"[',?<9\bYW%Aa^,i86-l.cM$Rb<N]Y!YX!T)r-Jk\`&&uo7R]aSL8+jY@=_o@L>EUo&4K/d%/U.;9N9bW4^bRh
%Y@=1,1J<9rJJb&#Cff3Vc[D0dH`bIgb688Y6?a.rE+Rh<H%AU(DZ^2Q_\5dA7L#HZ6KbTo==9At(*IiO%CMm\C\`Y!eA*rLUFpB@
%RPlnE%6V$Y0K=#W??R8KE8@EZknSfbDECqa$uT@mJB63."eVSb/;O"X7u0)Eq5hd!A-3+?Mu5fCl0E@$Wcf`TdK[<,"P57"*^^&H
%7OIaTDG/PtS8\Q:`b0u7/s7=a(lI'EK"09I@Nbq=T!'`,XLNLD"t^WcYeFEd1OPQjUZ;a@,&Os%)-iM>ej9_<N,1C,"g]B^'jRZd
%iC4PM)8FJGjuVbGSV@sg8A/brB)A.7K"11-o'9LM$[rf@ZARL0'O$%kf;X"V,R^>N'9?1-_0&q"'O)+P_D2j2E1IaaP:h+6fn"N:
%>esp*+q3J53(3/HosFq+!4VWL^V1FqE5h`/nn)\5Ge$q/(gcaWU(+8>b*AL0ei_0c2/dHm">k!IiZJSA$Ca#b`q*B!-qFuZ:-h]'
%%8SR-)sM=EY_*<Qc63rHHI*T(Snm9#2%EQm21;U3)h#bug'W^#fEubKppC5XJRLoU8i%/RGl#naK.+qgJXB;pa.%ZK&:W-4EPOUn
%7>VGaKFk<HbfPB6aDo0R^EA4)pXh;\$6dR%dA\3*J)KjD/8me:6l9JTdsc)0rCe&:^.b:6idEctA38d/,&E-,\.2HI$:q\b6>(fp
%'87Vppb%:=bV&g0*?@^Rcdr3:)Bq?@Hifjj^nY?OY)t(BR[J.1G86tfXt_c(-QNY%M+BY3g_QcgV-gKGAJ6s_iS%#u2P+ko$<o=K
%DOuo,SVTTHkmU"A6O@1)%8f*gX\MpVA`f7U[8(9%\7h"Z.)aAPPXS"!>^HPD@[<S:-'b:1Eq;mn%(Zi*@H)#9V%A?cj9K0'J+9>.
%5mgI;]gg&Lo=E+Bb)jJc4f3&c]QHE-\*OOq6pZ-V$.CZgYt!>)&W>e")+1+LSG-<\6FM8<.%uVN0(-YTd3+,kU^)oamucGY+bfMZ
%kb;%R[2GlM0m;sE>6bkFI?hE_$jMXk*Oq4sLr#<Z^*n];fD2.ri_mZ.Y/A%W/&lhf@tL.8KbL&B]=9!2=lsF<<hR;i:%B`0iC#'T
%6&d(Kk1hNu]7m/q\U0)MlaIeId2V8SIkTE4\U<=Aj)D/uP@4)L!B31XVru34o>239:c([nbiW)N`K69Pr`t>s/2@rd)1pm730t/K
%)PD&pb:HV"2KOb<"uN7RYmjMhk@=HW_dKY%TKDt&c)%)3%OdjFjBqKbkAcm"X6!k%,B4&dLdmLB_t,^l)uHa[j#K!c2+6DV4[<;C
%I@rd-&;@Vo6PSPMl$[,2i>c0[N$t3OHu_5o*6TB:jTRhX<,?pW3adl;;gQ*sgkls9UE/\+fhi/+`$UKl_IAUdbD5g$:l*nB;PbhX
%O.5qm`$`Kq8X2-*&;B[+OgFtqp6kukf<:>?'Xfcr:3l&8Bai,Bj@bhi6Dnk)CT`iHGiX'S)Lq^ac7U(@']SXDLK3u2PJVH-+V'XE
%aEW6o-,gO_$PH2_eDj7O`1\NiN<k6u0e:gje&UD@a@SeYGe>I\U2\mh6PSPP1d,H0-le:ELE9_\F:D#I$JkK@*m/gmkO:l7pD)IN
%hOV:r"a$(_5Tu^O\(aOt[9%_F)"XFo;!/M3XY)]/U),tJ7D'<NlgWPW_XUkHlkPjGSn-RlTl=n;#[;]d-0\r0>5P1QiZ])rlq;=B
%;S@'\VTG+XYSgSB0DRL$fI`F&/[TRIg,TIn=<\#*.mbC1'?UVn'\6H&)$%jEAq9FU>5P.>cjIN!lZ)YV+.&f#Xok9IIbGGeNb!*M
%.FtMW[55d@!u8!+Gm+pP6-M4k's>dedfq;?K$RWJ+iW/QX[!=p\.Fcj17R_%Z!W]970=:aRDKU5Ybg3nTL'>AJ4lQPqO)&BGTP32
%)Q44.j=-'bCT%HSp_\mB^H(C6:uMJN+tRh6T6:=R$<5[#"Q*G\e;gnu$ENuU.U:oX393dJ.7MF(=CH&DoLS<\B\/Ygp!Ebco;2q*
%[in<#VQGh5QZcm_$5Lu:Ag*bdc>RBi2^L'@%QC<P88)ELE=H-.44/pB[h(48V7;u:4,69X6rgpp$dks<I:dY2R<A`e7+jU.?ANc4
%pmpZ'\3b>)pd13:<t0Ue%A3h@U.@g<0)bHt%:KP>PCQOc$rI%F3[]_,g6XTr;%.7#C5cTg;p@%5/REHBWa&:H,j:qBM%h9s%BmZd
%H@m*0^*i+$YbJP9Zk\RKUG0dRQ*f]A'F?\Nk:'<4S:BOsnp4W4RF\Yc<s%`c%El-)kN5U+KGn<L.jX#bA!8Bt<e\*E:kU0%;@V6f
%CTFjk\oD^!EETZ0@P[4]"ZF<@$s.5fYpe!kXc,VH#`!VV)rfo=+":jt2(`%EJ[1q7%U1)b+"6'XUH"%=1FaY1L[h>A-sq,0O>`E6
%M/u_C$?_`<QFjP9_J5hdY*lrhU%^Pf0Zb/o"dAl`'Y/gBWD6F'e"BNa1u].%(DZSH:?G55bS0a;2G7/>k0>$'ZZ[UQe%;*0S;BF7
%QZpNi5$XHZ_@K!*6TA_ta>X*=Tl.^cC';KO[[`AT2_9u^`\kX.-3Y"=VT$q"`0FS7EtF[JXuZhC%nDIC`5/KR#f@3LqZ%q3E7rVq
%JVZsj3(ZN^JrW7#=%Xh!ZHGs.&MMJbYmN**guQp[`HUk0:PVLe+#-F""Hm?Y,d,-R%T).tOllO*F'jHh)K4:h6$)4k&efq(P=U3*
%Qb_IRU7%OEnJFth:(RhAAuRP`!Of-&r^$e%'JeM:Zcar:H8/$pou]m#,<SO`Fd6PP]Ff-6`<h.\9^tcK+F%Kh0.+44T9]U&K7\-I
%Oe<h%7^iDNJm+]j-tk_7-kn'8eNu0Jl2Y`jc9pUpiN4O.TAD`d#50LoYIk=%'/W"S%O"iB+LGBo^S6A+/I@FD$GrnJd*Uma9%9]d
%O#*uF5XDnAh*XR;RXf?)<H$ph`B,PI&Dg=O8"kP(FfU(F`\S(#.*TcBSNB\&P&W^?3eTjg[;DXil>qplR[\=S-RoCS5R<WC"^sV?
%,a_\"\4U\1H`,CK6$PN0Q&Q*%dN0EjPb<#OIplsmNU%1":l(ca:ZFNWW#[5V'dO&"*R3R\B,lBi)[m%),D6tJZnmkGLkWMWBI!:L
%nj3W!SXFqeKHU1e^nZJbi^eoIaET_(Tai,kTQrM&VT)(cfebn>4Lj9>4A^Ad#4U`l$P/KB5)BNEMi&!t4,(UkO/0;YX^N#mdMXgM
%W)gn?@1Q"ePOLgs;\Hb6dV6L;fQo9(d#<&V&gIZP.cQ_tO5V'HaJbg9NB7_n4NWC>-/+cO+LF3n/fH#Ao<k5@U'/a>p42#]dkoPo
%"UUWeqHQpM#.SpP\<@QTk4GGP@2Na<M\:]+,]:W;Ho-jjL@6?S1FYUCo0Ag4j7<o-2tf@]&E?VDAkZs++M=6+G,++*'9m,MD>hio
%]fAB'-),,n.&a0$THIJT#C-LWiHZX(fguVX<-%T'@GD35[TnuC$P\8<I-h&Rif>N#P6u_E)C_VeR>fJ9"/06/`UV:J$'g;Rf-I']
%M!E6Z"lWi:L*0njkZWhG`&Pa[`3(H)()!b@]Zc7J1@[PVoY/Fo1iYfYEf!&N/&RrH=[`eZ"h6Z6(kf&nq'^e[XfV@\-RmAV?OWJa
%H3fO.Mb4mQj,cKe%A5/82eQ]ln&oOO!<a!bHr(_H:ap#BILlsOY\E^lV3$^LLo0@`/+][(Pl65$_5_&GTHm$Y"HS5?Pm'"2'!p<o
%K#[Oo[m4dAB;7"#kWA'==pK$b/):t;X-BuATW\W'-4:+P_FDfON>Ma92e<&eJmoB!D]hEh-I<GYVjfq-8RjN,/7"JH1m\2OAH>M(
%ZdJoDb>tPnTIIt/M[<o[.nq.rG=L]I"IaZHU$Uu^QoON>JFIQaGVjW=;V!?T)PU#Nim8OoA[YZB5kn'`h_bMW+.MuM;"D<*Ite8r
%c2K^EB<ScB1CR)Qqe$sVSC.\[)itnL,A<[+Js7!,cXfF^fg1]5R:Os)&<n]=L3(GXKDib#Rb\1:-?V3c8?MJu"*ILN]-pCHBn+BF
%#>N,#A-]NWAI)#X<*u4D&%Ap!$juZ@KB$dX,JI8HL1#1'W07k[@GMW<_LXIrr0![g+^u"P/bB*:Muod"b7mj^V^XHE%VJ_]h?)LG
%6M&CCTHuG@"S&h-c#Yq4F'1j$1nS!<d)U6i7M(fZo+NScF1-HED$1l?a0ZV90hjH?<m\?nWQ>La>Tf=YXe7SWV\PHmCKa"P&JEQF
%;l]N6&=rq6PnhfG!ZF@'Bi2JS1up,cF!dbAmd+He:&C3!,A<[C_Klf_4:8G%1oCV-blXo%h%gR)im,[^d'UE.[t1Cn8SJ9,!H"JY
%AmdQKXES=Ca2D>d`*0@5"k8i4>!TTTVOT62r3C2?c,2>j%A7-!Xpq$YNLsME<t1K%f7]g-g\ubb6?jVsqe%=\9\DX_ON=eXL9dPf
%=?l:6MO?6%+8DgLUsf#U_o?C.5?6ip5!0@$6Mk6Rd/&<p)n'me-,O.SqAO@1YYig/VBs*hMf3@;6s*NQE_*FQ[,^_]%i/n$O;U_l
%$EX^+CgAAmicsMj>.DNI=l9okdPWUr4Ea)/Zpag?dp-b^N7W>AdLpPm5Z+fN2Ek1$3F2%_9M7eH8:VVcI33)*e"lbI@RjpsQC+Qs
%NL#A@'=iam-&tVGc))eapNrea_K2=:*24_hGc`ZL(+$Ps35%.P,(0>,C*m+.r6KN,93NNEh.$NTZpYVJ2D]'(j!7D\@>QDJ!,nsW
%#Y;K.]I6f)i`;dobt:AiljOg`&K_bm6,F8nm7oshYf&8ur=pjqhaRk^OUJ+qN/N_(&M=B1UFfMU9(?r$b\]j2mNTqEZ.$Za`41]I
%c&CMs?B&L8^t=f/O(!kn&n%GQM=V;Qgn(l4+5's5NakGUn=.9@ig`;gi>De0$qB4hQ^D2=h,+AB!H]Efi/G0sQn]5?LmAJ@X5O[g
%(6_8J&lB92EoI]DD%pJO\AY=_oE`nYEUJAg9NkmHpGQ9N_r[&ILloeNa0`d)e+"PpM;sp!UhP\MlXF&Wf@d>#J/m$tQ3`8@E!.mH
%&PWtgbeBF?fiX)F*gr:L,=IEP@O8mtK([u&M/glZo+H\:E#\Z#Lm@2QXH#o+H)U3UU(U>=6P?++l[jj``#!Bp1Fb,Rg7H!@Y!e$l
%Qn_a#\KZWjW.iHo`:0@Ndah6O\:j^c;2KAH4]/.G'N!q0W5OMQ$KXUU6s.HN,8Da!CI>dh\2!]t3BR\8Lr)NjD$3es#h$F0iN<o_
%c>\Le<[)!]36VgX)TT.!N=7Y.4EeJZlmB:X?N:iq/g4t(ITOQ<=G^'53&3RrFfa#96O!K/AbY<(^Ae:C,(@_6g]gHj(M9i<Qj$>2
%.\#Q&P_e+\^dPge1[E2UBcp2q#:AI-dWIGaLgui\-j@.e-N+'k&je=(M'tGmQu=C8S#EbD-rHGDh!2@@%;EO_>EN^"iq,SR0l]T6
%=XB*ijG/K"kY8_bEHt-aPQH7Qk&s:dI&Y+g*mieO.R/Ej)))Z<`34%Op()\1kQaF+(,-=t>/CD>59B]d/"]5lYn+To""#3RM`n8o
%bD+CY![$j:Ej_Cm2tl@!ZNoJR>eU-m;7^rUhsEo[L(.PMT)!gCR(+6W(aLeTQTErIM=Fo-#$uQ2I([t<N_75)-:Gg,DXSuOi][eM
%-rM5r"d/?mNuJl_&V5r42\YTeeM!g.beRndA9*KhLbbfjUa%79,=aOu&o3fu2>u0#ch3b$-7/1tIqTMSF4u]BO*kmAb%i?H&$[K8
%9'E0VPf3Ed.>cI,S4Yp?!?RO,6AG[3g0#dMZ,2(2/TeZ`8n-S4DBEof6]$q]`[',S0dj5\=Q:ZQ,l2N[ZRC[t$@YO+G<ljW^_\7.
%Ab(3l,Vd0)RE[]7M)CKbOr3d+*N/"EK&=[1VC79SMa7Ji+-%s3%Hg[EIW"Xc,bjPa.@bh>%4n4S$:I9S7cF\>:+f2+qPn!3a@M98
%9@?g$Q*d\4p239YhEiBb-*nj7M(%ET01KE1MddsOHG(iAND?XsAs?92QdD+f@QUHRlkGGB=AuCPM(s_Q8+UF`)fTD&PXH3t=@$7?
%aAl(MgOa"_k??Ak8Z_p>0SsY#d[%XK,@/h8ke\URV1^Hkc#uqMki]+B%YI##6\J0**8t/;2,Em"[T_Tu8!rq"U*LpT>qlW=]oKA`
%ji&^eI?^#1.#EcY(Oo8G`:c1Y_f-hP_21`OR3q/(Qc7uFf,#`QN3,(21,p=.ZAD/kpTePp</1O#"W&Kt^QcQJ?h(3Fn_2uc?#J#t
%cYsW>KJ85b!IOQSOXTKLajoH-I!EtO5P)1+$Bs,d;*.DnrpK.2V_gkElc3Z69?3-p!a0JL]1-o\?!3O_nJc3dcBag<Ofd(DM1IOW
%Vk=TXq(ls@LD(O^66`#?EUS6SIk`,Y2rZeK66aQ/N@R93Omej&fH*%iV`i&Q'I9s;hN5Zhk=<meWKfmm98l::D>GG$mG6*E84:cp
%^KJ,_*VKt]Lr;-bNCZG<?**YpZ`c2R,5R0'g4TaAA#)!]\S9UT,Ek/)+;'<rd6-348CIj$TS-ub<M0RhKWZ^i@_bAOhJ>M&:+I"t
%U;3c`%n1SR^l;8(faPE0"$@qOGtKG,0tt\:G6T=Q0jXm;?bcGC[IJKu0d%'pMM7t<OaN&k8;ug\Y`Q,N?OG:qFS)oPQ[$/F'd0cm
%]IASFa="Z_*?K:`;HuT7b9LWHY[\Ymeh/s%f0q^$o;.2S@i?C#E"DBW[;=kIL0(bdH43<\Bo]9TeF8:((F)Z9+?a\fFe.DN*>-QB
%5i2EJonN`A7%*%`e.fDm7Sk"`LdD9Qco^RBh`lO+ptoY,aMl;@7(dtnY1/&kSZq%.`H<mBnS=!HJf_(L,GKkS1(B6\2=tA4]?93t
%h(D5V@OkqN&IN%h.O5ZBW)t+I&VD1e%7_Cn,s836&Q,Le7dgpR9!ec%n0LKsdA`]"-W+hrmj'e8I]+RgF?dH5Jke45[8?91a&C`1
%LWSJP\^T[RM:\):A2GK:6QY1BeUK%Dl0l$pq?6pr_d7"i7,/rfkkeSj<Y^,j>?jS"A0YQablK"H@d`S%)A*1cG_q0&jfVEn6p-I[
%=0W@d^,-e6/DS67`%N!:.fr:ETf?+lE5Xe&.l_"DA4.RY+\;p]+lS5s3494-W-.<%O"_Oc1F76"%?BZ6/'`c"ir_snap#B'Lh/RP
%N>T-aRD<LSG,*aS<*lIkK.'[8H9f`MKgs!gNWU\^#@`9q5_mD_eVP4_&ZZn<-]o"7i[>!aabX<9Qb2)@+cp6QlJ4R\#TMqZ/n2KW
%-1?(K5CLaXa[Ag=;eI;o'YTFP_nAlA[:UW6fPXAN9JNn*jcb]+EW:oQLnA]hBI4oe6VdU!7#^(@#"C<Za3\8.KV4\8L`\b6jSP=K
%\@aHLl5jI[est3VM"Oq`,2t@]FZP%'\m?QmEU.HW&.t7bd\oEsR]'DC&u6BKq#Q;=k)XeD@k,f,k93lc2uj2mOeKtnD;6Q"mc?#5
%po(*_KYa8?@aoXY?i$,#h-O8OX;Z*N5^EAI8g=q3cM8m"ilDPs,?)gMh$OK-'1EjdZgGnn5cY'76XmjTBRi#d;us#Un1W`1)U=J'
%E55a6>e<B\X8LJSTUnQrn&2=nG]4AWTk#2L-->BXGVGLZ[t^&Ud+#rcF)=7WS.)]UqEq_S)*%,Qe3!hW\!U/hRCaHZ[OXo*W#%kN
%Bf',lrIpHCQm=42,'j\%[g=>#OYZX4oV2*^W;0B8dQn364mpL!q*>qQm6l=DcW79Km.c"<H$MC_cQ@Qqlu(:k\?Y'?2b.f_/)c&l
%@NiK#<<k,t#HjZ_g:N/o5_+E/P6gf;8VP#!+pb/%`C,%b$])Rb^]]-C1b#Um__?q^*.8+uP?=lI`B/Zd,3B1m<fAoKk8jg7qI:AR
%N(ZT`4Z/4)ni=K3r&:dfS&.<QDK9'OD[`]DBkqX.@V^Z\ir]*:XU#Q"=!R\-e))6C5%AmKD_*palSd)ml%YsaBNHb7M5#DQ=Qg^#
%S'Zp*5*Y$%gDibf_i@5GBD="59l;#MYSI_[*V$;`)6Z#$<[DR7hFdFLU$[`,Qj7](c4\I0grR-3rcW+<Bht(oNbKU,8,G]$e>+VF
%77W3Iiq6*[\ikFS1LG<cP`I8clM,sugb6'a\hN(qkq+>?'JStE<Xd8Bgr@HQ:WYhf`^b?/?I$iEC.%jroiEs5!HQ%=%?5G'F.=A/
%2O&.(_n4*;\>MD,S\G%H*%Z-hf*Te!d"=nE<Ns*qT,$;&fdnIZOZ4RW2cFK^I9rA.cQh&mo2<_54nh']W?e8*'8%4<VGK7#Tm&pt
%Ac=3+#J?.:\j=<"JKGk$O)Ci!Wl(?k<mJT+#\k^c.#=Vk4EM\%<GOYD4LZiS#kL%W#Q9DKVH<mXD4An?jU$'IZrKj)DkFYt\%%^B
%@mV:4*hA,G&=[i?MtYE,AVr$algL9>0i8p^6ma:2\-SYqR+O\/cKA\hR!^_rm\$kUm9ST/U0,W`MtfD05'N]'!\Eh<dIAWq'JK9?
%"5/S+>1-+6pQ2e7:")U`Hn=r2#C0Q6UPPc;#[f#BC_SL\P&O6ZZTE%9SNF&QC7mq=SJ_d`GmKiP1!8k_6bp8J)i8VcE#(NB]Z)E8
%(A>9dZZAWP3I^5BBl+U7WI0u11I:Bbk$J%6JcB5P?K,fQT'bK&O3SZAn=/H[&n0Hs)oi&>^]:Lmg&e"C7*dRk;U'ua?A9*!Vh!iA
%nBDgt.S,T:!V7>`,6>acC-=A>Tl]8(?]T#:Lq8?K0K,Wh7aHIhXaEJI0gUk]KD\m.pcFF?eTLkNkKnIrU=0O'7iUYC\F5ZjX%XRX
%MsD?,SHgU=@5.hCBfg5_o)HF_4,E0+%r_X2aq=C3$m2@2P+0@]08+FAon_gkV/1ma2aXFk4*dhn\GE*KGI.nZh$"P,[rP3gB(dCO
%:cnJ9fJVp+4bL5AU.4YI!&+>-`s5;Scq[@:J3u)$?\2q[.^:58#a"3\5)[-D5SYZU!'cHtT-NM?+@f:#+*/V"Gphdkq&&i-\SEF%
%_FUK%K5R>b@V5.T"u.;Q;R_bp&q%6<*IAB)ZJTM[`jBnh=hr$(^!pUl=t)uiiQ[d?M^&*_VO-%nP3DHRSi8)QF;Up/+.P7d5V4`G
%(iU(r:?DoW;pgJAUn(c?lg:$+.bL$%APp7.gA0BA.eSr3e=/SaM&*q\A%5496=n0XpinZuWPDR(2nR-jLCBDiM,//5MWX4V!TYA$
%HhW-o%U^(]EPpY-Kg`urg_k!2dH+*5>Xj+^AX*_#0@H_=$6J1sULHa\d\\S@FiY$H92`EZgd[TL4?3"Ac"i+Pn;+UkE.`-WpHZbp
%!+&(ZI69`EZ9rUmhX1Ci@IE2$^o?<mE!dP$BG^g3N>QN2)gBAjq+dc?*062kP!S?D(-Gq!b9&hXJs?l_a(2D?/p7N:=BnT.CP*AR
%i+W).gFScck?8b-FW2fI_Bd$0E6"O.QWfALo:Nu>/X?eiV<.7^J)ap*f&Ae1iEj!]b!%_:ffH$kk2N>$i="*ko,sQn!VAF;+bka\
%o2:/eD,-r@/KbqNMR<RUbSDqMk3t#n5/KT(L[#Aq)>XLGSY]$&3$!6W0KA6SU`-JIR0,l<-W/e2%33kA*m\E<0$q%YJNr"7f)_Y9
%BYP:l9UFCAr`0f@.I?jQ7ueUq/7=9(K#Z_n7JN/)<?B@%.YFEj469!icU$pdH'3/jW:^<k57[,<RPB;J3JtGg`uM1N1n!4d]]W77
%8%+)G,cZ0n9Q1u5ql#HEJ1c0UF%PG+'/28F-iAXH-5D6<mE":hTWL2:#i5"06@tAQUd8k7h#Fq+7[p".7##-l-_/o4NN"(Aqm=Zg
%3BK3:N;P&p'TW]I)=QNL>FdMrkr(pMj:&h;5P.!4qUoQFM5o;Ia@e=3h=ck63l4"GoWp;BjhqJU.!kPDP98&N$l?U\et\G:.D36A
%i(tm%K)Gc0%`D<s"OWG"EcCgP>9e4>@5F4k7fX@=!2^5A1)TV0D+A!a@)XGV,B!;ugB9Z-qZT6c\J[M.nXG;#T+itJM[P#(=:=ME
%L\uU^<p+A]QAgudi/f.,KGJ#RQ85E6&fh9XOR2Dj-$tOO<c/(DhVJ5dWcRQ>-g^)qX;.e)k2W]aYkH@'NZMm6DcbUTM9Ls?7\_!\
%B<_LMb9%nRX<]V[rdSd6lT88Dj7P5XH\0RjQ]CTU+D$(_SYCL<39\_F*"u"PHdPBop<.!uh79TEgPM1%_'Na(X>@0o3BDs'*I4[/
%Dj>sp@B+q.`GCRtbE%40qSjXHH?ZA,+!-1H%U=D'Y1%GP)s!^K@8cX9[XcES?4id,dbAM7`GQmV9GD#%-`:k\rJ#Do3aI)Wpjl,%
%=8Wf$N(K_h<&OLG.6$iLE,@=/(GDW'[VC%'E,lk@]*?D'hi\52?dAYcLEqD'#l:"<"P.-4Mc9`D9,J1FrT**IWsJm\i\9<<dK"GV
%'PjcZXNUP(V@J.3Y:`:i+@5iQ&?M8f+ul;2!ph/^.4>d9a2aab<J'nr,I-J9GV'\'.DU+`a5,;RVUM:tZ!]W)NX#We7\qfeM)QtY
%U7I`^?kYC4"'E8EP+Z=ce!VsmdgQQfD:&?M.E@'?K45?Lfq9aIe."[ej7.:!#IkL[Agmu[&XiZb%RA:6@mF`5C"$-(TOZ5Bl2`G]
%`kU_Z1j0nOoE<8@!JZP)_?'d2W*j7d*YqbFM"'q*$Nes<d/h0(!k<OoRq!06/YLTYqO&SPRZ`2l"crGT,iD_)ga4B+M%mKH-`gb$
%V$RM(WM4#n_1ZqO>%5qpn/@PhUad(!cSJO.no!83FbOAVV6]TejIJ\+9g_epnnom0"KX;c%](gh7Yh`ql;!Q\!%/IjVDJM,%#GN2
%)9ge&,"#CGl3t)$/YO=,.&@,aLD.[;gH6-C=Dbj3.=So4#<\/BZ[mqEffP8ghO@<*;fYEFBjUGB5lI3Mm1LIL]6`]5:s)/tQqL<Z
%pQBJMG^B;[4-L<@9\CeUhPuq?J2uRgIrL^0e/pHr6l-tPIL#0r#BEEJW"h'HRKh0rSLR#90-Xf"6c=^AQp"0#5at7:-4(7jgp@iJ
%K%Rpt/L'e:=H,R!?m[/`&`248/PPU#X%Hb&T'?Ft_4B8)Ue9]9/R8F+T'RIH',VS92+j8jOYW2Y/<DWLFNc@3AB#@&Oc[$u'%L*T
%=Fj_,?KDLkN$nbm'6qF!R@6<jnP%kt":Cc;UaV=tcRr(fX*rDEVGbO$9!Om.Yj2ur!;[<XQ99,t<WTKM\MG!O6<.ef7H,._WlUu8
%04Mn('%9a\^lFMfW8n:""Il1P'e9sm=gQ3DP\^rU79GU">9mD#\j[U5*\Xff1u35;Clo:N(ZiN@cdFGCnh?DX0eXnDCBDM?H=.$]
%4[Z"KD9,pQM&<AAF2t)'f8GM@Q#319$p6TiW[Sga)<L25gVC%gOXMqOM8$QeJ]`lA98aZb1XW$sc>]-8Jjs]sUP5d`Gh#>Z_aC\E
%)Y(e6a&:A_)R7dKk4>TcQt9HY``07#dPP5-?.DIjY?`Kd71'u6dZf_lBPCs+>BPcAfHS@M@At40oUM%Bhgi&Z*cGeI,KFTK3"g8&
%.L2u:qN,7u1bR=2VK;f8b*5D6(nb#APZ[4dBdYL<-?`oYd.S=)"FFJh4-3j.eRl363Nl`V^cV$W(-HUQ.E,dO0`=H1^ptZWOckK`
%<Meu33KX9gA.KNr6t/a^E43(%4\uB-Cun=a^g"f!;Y\>T4I(t@^\E<qm=P_(9Db)Nk!0%?[nZXrn#sne#1$KLBEb5\ZpKTk-t2#B
%r"6L;i^g]g+K.T7^1@jT_6QDFf7m@IW'O\qR7b,^;@(u!qR*/]J5A`hBNdqXk93T&%#O'q=Q#K4,%DJ6P-0T$HChPiR[0Kp-'<Hl
%/)EZ+cblT;5e`'OV_F8[0?T)KV3WsDaS7/tA;Qc)`=Z(V5#LT9NPL]h>jkB5_%1%:=>G^L_\\kS.?Si],pl9O;W?f:CF)mcZr8ND
%-S9[\-/S$4Z"0Gtmjsej.u94QElgf"U@])r(M?_u-5b+rO4$]Up,I5bC9fJ23i?kIWJ%-T.OUT$6\+CS8Zr&lT2^Y(PdNo)9arE-
%cZt>*hG4g+1<MY+p="*t:E7q_<j8C._a95FZ3r+(ls_7EdpB[a;c6H3h2J`Ugl$>tP>a/pmLi1Pj77#`#qG7A&4/u=R'p]Aq02R1
%O3?#hc7>="$;+ur=]rS3@-s;dP&l%D.k&NXVn%9bSluk;)5QNE`"fAZHCc&D2I0;Y$D+HW77f''5\ho1HQokU)@Ph%gq0Ijr&,Km
%3X[Et:qJ']`!OjDonDf@3iJq*Jd!jYRG=ds;]]3W>LG4hE_Dst8T:YPZK@>#QBDVJUk"-4J_s:.OQ_is=BAe&66:8g.\i?XV,CVT
%4_UfJaLiD&HE/\9-a<hll:[QIP$]F+-Qcn##.N1QOp$E#92'&khHe7V:).AHeg\:t]pQJ[pT59ogrlN.P:)=;@dlG6!EkB'af3H<
%?p68!Z1XJ@X0'EMg5O>1"IY[^9PH7\=h*e]5C_6q).bEK=_9ieR&2RD)%)\PN&0ar1]rqp85EqU=A*n#d);@+JqZ=N<_E`U!U]'f
%UsLBJ^IpD^3PqpFd\NunR0I7IG;W*nM&`F5HLDOKfgM-7Wm<N(-5r3^l?8S;&BQeLI*DF>]`tMg8%TM*g?;)6J^UeRPC8<H\X0A*
%H__dLEoRi>.G^Y?H#t5"#*$L)T))13Y6CH+-qM4@E1DZnCH-"s3'FR'j*m2Io1j2N<?+]NGF*;)c`VD\=>peK<]U_N!uNb)+U88;
%S;jUF?l!6*/N'Hg,O7@WJAeENPok;*^V;u"ErH)T3n<"`="r@m.:'Lpek)HkkHX8o.2KqG:9@&]g8SfAiXTRISWN\n=u8k-5nT6I
%WUAieaVmql06'a!Q)BmLk@mAf9;#8+KR,b#>E!B-:X"CNQfhpI'8lFRYJLbQT+Ag^h(b;[hUrC9B]gcM!tqJ%KOA`L?KS8dQVAh:
%Y[A:fZ`0h!L=+XY.C8S'O3J'[<*!.dn3hLV4"PiYFZBngaD;rrPKQP^[ToirOR_mQhu=:0Be(tiB"pR9N(6[-):!5;ARGbA/AD/D
%k@^g)9s>NM')i-\,*nJ8*4ttSSqm2GnN5JA;e`::$"Mmi5^^7^]JohM7],=,.`c4#pa/TkHRtPB?BoA.Gq\,k0s=!eTQ.jbSska;
%_B,VUU7f%)^"/$((cA4up$)QXQY.@7UJ/\34HXrB&Ej&'g"u]?F_Md]_qIFY"*563F#1IE*bD+3<HC8<CtH`[qsenso%p++*&73G
%G?fI@/+$862eP0er/A?;FMKnUoG`Gq?7rX0.Bi:30VHek3ZP#_l>\882L_L]a(uGSpqij!\s('V4k_MjBK.%N1Z^+Z0NiDh,s74m
%6hdh%]G67UH+0g;:0SfIY-+iXhq4Ih`FC:XRmS2-NW$jW88_rJ%'?S9^E9n9\"(cJ_ht"p$$5%(j(j-hb@scWZSj5Z:X[m,9==Z'
%OkTc;b*&uSmWA_im.Tc9n<(D?)eCeQbq%^U3Uc`e0u0.mAec1+P58uW_%#<5OtXc-]+k5<c;Dng?fl!%ad!0:UQD$Q,_2C:Q2gut
%R4Mo*$oY"a=Qeir/.S-(2U5p=bQ7i-2%1:Lmgh#UguNgCNKOiZ4<E3s^]EuFja^W">:OD=#1hE"Fh8ah'5[<rD=\+1m,o3F4;a\O
%ZUTeKpEOhB*8+7K3(AG\r&k#`RlE?H`H,cp((1q40l,][XAU%HKMMlTPgEeMFT+CKSDS'DMUll-*<ahDZ71l&,7H/hTi[!gep()<
%7To)GVTs&4&DUFCn%:.D@oFi$b#fLA415YF`a'^ENLSq;$8ufrhm"C5_=kG7%_;)q4Kk^?N#:8/pV+f6#lLfcRkd-s94R602;18W
%Rj*@ZiGm$-SF)\kd4+VMC\MeWZ)&5VA2G6KmBM(KPE\7QRYZM)QsU:!H#Vesf+@C'gDV1tmZ4Xtp,n2Z`o9(PV`@U;&=7B:A7sX-
%0:SH[La>)8>JI<ZGJP&<HapV*m$jfiU#XKBl>>l[5h0o9/$1j)*eu]@no(,Z%cAh*p!mnaT0oN`1(?6.%&tL_$)t\Gf<Ci!g)sQ%
%&'ktK'4:To2?U(rfZ^cDLM,r"DC$g6$r[7EF1.6?po.=oB6hd+):_fu[7np2IC8/HRV*m!R!1kMGGbn=8f%`NKP]S+_gXuhTkuHX
%2t<#=9F!Xug#+[E@!@('eIlW[e(3s47?/F$fN?#J$+\D%d#c*P#jYh&G'F7`@!Qe<:2&\d?#Rk3O]k]\R>e@<4Q6poR>,LAfdoc-
%Ac2$0Ea['(8A/c?7p[s`4`NWt]aXPR`(]q$>H#qFc-&TVn%\kPoBkH6qeuN.5CWR3hu1T&s6;QCiBOOGq6,;E?bcL6rKk:sbJ/E=
%r8tcnr;0k#gL#F/5C`Ii0>IM:n,N7UO'fX"r22dXq/8Ltm?dkMnPA%ks-I*lqR8]hjd0n8rSN,(Iji-oncur*c+j7Es7GVarI9fHrOD~>
%AI9_PrivateDataEnd
